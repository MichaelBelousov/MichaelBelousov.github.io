{"version":3,"sources":["pages/Blog.module.scss","pages/Work.module.scss","images/cubes_mess.png","pages/ThreeD.module.scss","images/bad_face.png","images/bubble_shield.gif","images/dirty_hog.jpeg","images/fire.gif","pages/Work.tsx","pages/Home.tsx","pages/ThreeD.tsx","pages/Blog.tsx","serviceWorker.ts","index.tsx","images/fire_dot.gif","images/generated_bad_rocks.png","images/generated_nebula.png","images/gold_hog.png","images/magnum_back.png","images/mongoose.png","images/parametric_armor_wear.gif","images/revolver.png","images/turret_wireframe.png","images/undersuit_hand_greeble.png","blog/Super_Thin_RAII_Wrappers_for_C_Types.md","blog/billwurtz.md","blog/blender_2_8.md","blog/latex_and_python.md","blog/convex_hull.md","index.module.scss"],"names":["module","exports","Work","useState","window","innerHeight","height","useLayoutEffect","resizePDF","document","addEventListener","removeEventListener","className","styles","container","title","pdf","src","style","href","Homepage","map","s","key","desc","ClickableImage","props","alt","ThreeD","badFace","bubbleShield","cubesMess","dirtyHog","fire","fireDot","generatedBadRocks","generatedNebula","goldHog","magnumBack","mongoose","parametricArmorWear","revolver","turretWireframe","undersuitHandGreeble","PostWrapper","children","post","Post","dangerouslySetInnerHTML","__html","body","Blog","useRef","hljs","initHighlighting","ref","name","blender28","latexScripting","convexHullViz","billWurtzPost","superThinRaiiWrappersPost","Boolean","location","hostname","match","routed","pageWrapper","left","navLink","to","right","exact","path","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,UAAY,wBAAwB,OAAS,qBAAqB,MAAQ,oBAAoB,KAAO,mBAAmB,KAAO,qB,mBCAjJD,EAAOC,QAAU,CAAC,UAAY,wBAAwB,IAAM,oB,mBCD5DD,EAAOC,QAAU,IAA0B,wC,mBCC3CD,EAAOC,QAAU,CAAC,UAAY,4B,mBCD9BD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,6HCuC5BC,EAjCF,WAAO,IAAD,EAEWC,mBAASC,OAAOC,aAF3B,mBAEVC,EAFU,UAYjB,OARAC,2BAAgB,WACd,IAAMC,EAAY,aAIlB,OADAC,SAASC,iBAAiB,SAAUF,GAC7B,kBAAMC,SAASE,oBAAoB,SAAUH,MACnD,IAGD,6BACE,iHACA,yBAAKI,UAAWC,IAAOC,WACrB,0DACA,4BACEC,MAAM,oBACNH,UAAWC,IAAOG,IAClBC,IAAI,iHAEJC,MAAO,CAAEZ,WAET,2GAEA,uBAAGa,KAAK,4CAAR,QAFA,SC2CKC,EAvEE,WACf,OACE,6BACE,+FACA,4MAIA,4BACG,CACC,SACA,SACA,OACA,kCACA,MACA,UACA,YACA,MACA,WACA,SACA,wBACA,oCACA,sBACA,OACA,OACA,QACA,SACA,qCACA,WACA,8BACA,OACA,YACAC,KAAI,SAAAC,GAAC,OAAI,wBAAIC,IAAKD,GAAIA,OAG1B,mFAGA,4BACG,CACC,KACA,OACA,UACA,WACAD,KAAI,SAAAC,GAAC,OAAI,wBAAIC,IAAKD,GAAIA,OAG1B,mEAGA,4BACG,CACC,CAAC,OAAQ,+GAGT,CAAC,UAAW,+JAGZ,CAAC,WAAY,wEACb,CAAC,QAAS,4BACVD,KAAI,mCAAEN,EAAF,KAASS,EAAT,YAAmB,wBAAID,IAAKR,GAAO,gCAASA,GAAzB,IAA0CS,OAGrE,2I,gRC9CAC,EAAiB,SAACC,GACtB,OACE,uBAAGP,KAAMO,EAAMT,KACb,uCAAKU,IAAI,mBAAuBD,MA+EvBE,EA1EA,WACb,OACE,6BACE,qbAUA,uFAEK,uBAAGT,KAAK,uBAAR,WAFL,irBAeA,8hBAUA,4TAOA,0UAQA,yBAAKP,UAAWC,IAAOC,WACrB,kBAAC,EAAD,CAAgBG,IAAKY,IAASF,IAAI,YAClC,kBAAC,EAAD,CAAgBV,IAAKa,IAAcH,IAAI,iBACvC,kBAAC,EAAD,CAAgBV,IAAKc,IAAWJ,IAAKI,MACrC,kBAAC,EAAD,CAAgBd,IAAKe,IAAUL,IAAI,aACnC,kBAAC,EAAD,CAAgBV,IAAKgB,IAAMN,IAAI,SAC/B,kBAAC,EAAD,CAAgBV,IAAKiB,IAASP,IAAI,YAClC,kBAAC,EAAD,CAAgBV,IAAKkB,IAAmBR,IAAI,sBAC5C,kBAAC,EAAD,CAAgBV,IAAKmB,IAAiBT,IAAI,oBAC1C,kBAAC,EAAD,CAAgBV,IAAKoB,IAASV,IAAI,YAClC,kBAAC,EAAD,CAAgBV,IAAKqB,IAAYX,IAAI,eACrC,kBAAC,EAAD,CAAgBV,IAAKsB,IAAUZ,IAAI,aACnC,kBAAC,EAAD,CAAgBV,IAAKuB,IAAqBb,IAAI,wBAC9C,kBAAC,EAAD,CAAgBV,IAAKwB,IAAUd,IAAI,aACnC,kBAAC,EAAD,CAAgBV,IAAKyB,IAAiBf,IAAI,oBAC1C,kBAAC,EAAD,CAAgBV,IAAK0B,IAAsBhB,IAAI,4B,mIClFjDiB,GAAc,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,SACpB,OAAO,yBAAKjC,UAAWC,IAAOiC,MAAOD,EAAS,+BAkB1CE,GAAO,SAACrB,GACZ,OACE,kBAAC,GAAD,KACE,yBAAKsB,wBAAyB,CAACC,OAAQvB,EAAMwB,UAoBpCC,GAfF,WACX,IAAMrC,EAAYsC,iBAAuB,MADxB,EAEqBjD,oBAAS,GAF9B,6BAIjB,OADAI,2BAAgB,WAAW8C,IAAKC,sBAE9B,yBAAKC,IAAKzC,EAAWF,UAAWC,IAAOC,WACrC,kBAAC,GAAD,CAAM0C,KAAK,uBAAuBN,KAAMO,OACxC,kBAAC,GAAD,CAAMD,KAAK,kBAAkBN,KAAMQ,OACnC,kBAAC,GAAD,CAAMF,KAAK,0BAA0BN,KAAMS,OAC3C,kBAAC,GAAD,CAAMH,KAAK,sBAAsBN,KAAMU,OACvC,kBAAC,GAAD,CAAMJ,KAAK,GAAGN,KAAMW,QCtCNC,QACW,cAA7B1D,OAAO2D,SAASC,UAEe,UAA7B5D,OAAO2D,SAASC,UAEhB5D,OAAO2D,SAASC,SAASC,MACvB,2D,oBCVAC,GACJ,yBAAKtD,UAAWC,IAAOsD,aACrB,kBAAC,KAAD,KACE,gCACE,yBAAKvD,UAAWC,IAAOuD,MACrB,kBAAC,KAAD,CAAMxD,UAAWC,IAAOwD,QAASC,GAAG,KAApC,QACA,kBAAC,KAAD,CAAM1D,UAAWC,IAAOwD,QAASC,GAAG,SAApC,QACA,kBAAC,KAAD,CAAM1D,UAAWC,IAAOwD,QAASC,GAAG,OAApC,MACA,kBAAC,KAAD,CAAM1D,UAAWC,IAAOwD,QAASC,GAAG,SAApC,SAEF,yBAAK1D,UAAWC,IAAO0D,OACrB,+CAGJ,6BACA,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,KAAD,CAAOD,OAAK,EAACC,KAAK,SAChB,kBAAC,EAAD,OAEF,kBAAC,KAAD,CAAOD,OAAK,EAACC,KAAK,OAChB,kBAAC,EAAD,OAEF,kBAAC,KAAD,CAAOD,OAAK,EAACC,KAAK,SAChB,kBAAC,GAAD,UAOVC,IAASC,OAAOT,GAAQzD,SAASmE,eAAe,SDwF1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBlF,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,iBCA3CD,EAAOC,QAAU,6yX,iBCAjBD,EAAOC,QAAU,4V,iBCAjBD,EAAOC,QAAU,0iE,iBCAjBD,EAAOC,QAAU,q2P,iBCAjBD,EAAOC,QAAU,2mB,4ECCjBD,EAAOC,QAAU,CAAC,YAAc,yBAAyB,KAAO,kBAAkB,QAAU,wB","file":"static/js/main.ead71383.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Blog_container__2nLp6\",\"loader\":\"Blog_loader__2ZfXV\",\"inner\":\"Blog_inner__hqqqW\",\"spin\":\"Blog_spin__3Kz60\",\"post\":\"Blog_post__2uEt4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Work_container__2JHiM\",\"pdf\":\"Work_pdf__3CQmn\"};","module.exports = __webpack_public_path__ + \"4ab4231b6e01d8d0458faf7902765c4b.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ThreeD_container__1GKfp\"};","module.exports = __webpack_public_path__ + \"43ab820df1e8922757e57755306ee507.png\";","module.exports = __webpack_public_path__ + \"d8748ae35116fa0e0f4396434fc5c935.gif\";","module.exports = __webpack_public_path__ + \"e851694f18afca706dc000d7c8363890.jpeg\";","module.exports = __webpack_public_path__ + \"474123ee18735910539fe623daf81f4d.gif\";","import React, { useLayoutEffect, useState } from 'react';\nimport styles from \"./Work.module.scss\"\n\nconst calcHeight = (windowHeight: number)  => {\n};\n\nconst Work = () => {\n\n  const [height, setHeight] = useState(window.innerHeight);\n\n  useLayoutEffect(() => {\n    const resizePDF = () => {\n      \n    };\n    document.addEventListener('resize', resizePDF);\n    return () => document.removeEventListener('resize', resizePDF);\n  }, []);\n\n  return (\n    <div>\n      <p> It isn't up to date, since I'm not looking for new serious employment right now. </p>\n      <div className={styles.container}>\n        <h3>Michael Belousov's Resume:</h3>\n        <iframe\n          title=\"mike's resume pdf\"\n          className={styles.pdf} \n          src=\"https://docs.google.com/gview?url=http://github.com/MichaelBelousov/resume/raw/master/resume.pdf&embedded=true\"\n          //frameborder=\"0\"\n          style={{ height }}\n        > \n          <p> You can't see it apparently. My resume as a PDF should \n              be at my github page,  \n          <a href=\"http://github.com/MichaelBelousov/resume\">here</a>.</p>\n        </iframe>\n      </div>\n    </div>\n  );\n};\n\nexport default Work;\n\n","import React from 'react';\n\nconst Homepage = () => {\n  return (\n    <div>\n      <p> Hi, I'm Michael Belousov. I'm a programmer and digital artist. </p>\n      <p>\n        Some software components/stacks that I've used in an advanced capacity are listed below.\n        I've used other stuff that may not warrant mention (except to lampoon), such as PHP.\n      </p>\n      <ul>\n        {[\n          'C++, C', \n          'Python', \n          'Bash', \n          'TypeScript, JavaScript, Node.js', \n          'git', \n          'Blender', \n          'Linux/GNU', \n          'Elm', \n          'React.js', \n          'Vue.js', \n          'HTML5, css, sass, SVG', \n          'webpack, yarn, npm, lerna, ...etc',\n          'PostgreSQL, mongodb', \n          'Java',\n          'Lisp',\n          'LaTeX',\n          'Gitlab',\n          'Azure, ADO, Azure storage, Octopus',\n          'GNU make',\n          'lex/flex/reflex, yacc/Bison',\n          'LLVM',\n          '.NET, C#',\n        ].map(s => <li key={s}>{s}</li>)}\n      </ul>\n\n      <p>\n      Things I'm looking to use on a next project include:\n      </p>\n      <ul>\n        {[\n          'Go', \n          'Rust', \n          'Haskell', \n          'Clojure', \n        ].map(s => <li key={s}>{s}</li>)}\n      </ul>\n\n      <p>\n      Some projects I might be working on:\n      </p>\n      <ul>\n        {[\n          ['Sizr', 'refactoring refactored, using a uniquely human-oriented AST query DSL' +\n          ' for declaring terse source transforms'\n          ], \n          ['Fluster', 'a programming language, with fun features like recasing imports and a' +\n            ' focus on reuse, not concerned with runtimes and using a C-style virtual machine model'\n          ],\n          ['Untitled', 'unquestionably correct code formatting with a DSL and spring physics'], \n          ['Engem', 'realtime graphics stuff'],\n        ].map(([title, desc]) => <li key={title}><strong>{title}</strong> {desc}</li>)}\n      </ul>\n\n      <p>\n      I'm interested in lots of things and if you think you have one of them, feel free\n      to contact me via email.\n      </p>\n    </div>\n  );\n};\n\nexport default Homepage;\n\n","import React from 'react';\nimport styles from './ThreeD.module.scss';\n\nimport badFace from '../images/bad_face.png';\nimport bubbleShield from '../images/bubble_shield.gif';\nimport cubesMess from '../images/cubes_mess.png';\nimport dirtyHog from '../images/dirty_hog.jpeg';\nimport fire from '../images/fire.gif';\nimport fireDot from '../images/fire_dot.gif';\nimport generatedBadRocks from '../images/generated_bad_rocks.png';\nimport generatedNebula from '../images/generated_nebula.png';\nimport goldHog from '../images/gold_hog.png';\nimport magnumBack from '../images/magnum_back.png';\nimport mongoose from '../images/mongoose.png';\nimport parametricArmorWear from '../images/parametric_armor_wear.gif';\nimport revolver from '../images/revolver.png';\nimport turretWireframe from '../images/turret_wireframe.png';\nimport undersuitHandGreeble from '../images/undersuit_hand_greeble.png';\n\nconst ClickableImage = (props: React.HTMLProps<HTMLImageElement>) => {\n  return (\n    <a href={props.src}>\n      <img alt=\"no alt provided\" {...(props as any)} />\n    </a>\n  );\n};\n\nconst ThreeD = () => {\n  return (\n    <div>\n      <p>\n      I always thought I would end up doing art before I learned\n      to love programming. But, I don't have the innate talent that\n      an industry-capable artist has. Perhaps dedicated practice that\n      I'm yet to undertake could bring me there. But programming is\n      much faster. You aren't just making the art. You're meta-making\n      the art. You're parametrically defining the art, making the engine\n      to make, and remake the art. \n      </p>\n\n      <p>\n      A couple of decades ago, my dad donated $20 to help\n      make <a href=\"https://blender.org\">Blender</a> free and open-source.\n      When I wanted to do digital art, he had the foresight to show it to\n      me. I didn't keep to it for long, being young (maybe 11), and stupid\n      I never figured out to use it comfortably. I liked the concept, but didn't seek\n      out any tutorials. Later, when I returned to it, I was still just moving\n      vertices around like an idiot. My dad saw what I was doing and\n      showed me a video of someone else using Blender, combining tools to\n      do interesting things (it was actually the subdiv workflow).\n      The realization that I could twist and drive tools with each other,\n      really just think outside the box led me to try new\n      things, watch tutorials, and eventually truly learn Blender.\n      </p>\n\n      <p>\n      Soon my dad would pejoratively call my time blendering: \"polygon twiddling\",\n      He probably wanted me experimenting with programming, but he failed to teach me a\n      couple of times prior. I don't think we made a good teacher/pupil pair at the time.\n      We make a good pair now, after I taught myself the fundamentals. I\n      reintroduced myself to programming much later in my youth, one of my first\n      experiences being Python scripting in Blender to do mechanical things faster. Which\n      my dad ended up helping me with that too.\n      </p>\n\n      <p>\n      Now I'm not really sure what percent I am programmer, and what proportion artist.\n      I'd give it 60-60. I seem to program more, and program things other than art. But when I\n      do art, it's often driven by programming, I'm not sure what the intersection is.\n      Maybe I just ought to write more.\n      </p>\n\n      <p>\n      Anyway here's a small collection of things I've made, they aren't\n      necessarily finished. Most were mostly made with Blender, but I\n      also used Unreal Engine, Substance, Krita, and more.\n      A few have contributing authors (feel free to ask).\n      Several could be substantially improved, but I like them anyway.\n      </p>\n\n      <div className={styles.container}>\n        <ClickableImage src={badFace} alt=\"badFace\" />\n        <ClickableImage src={bubbleShield} alt=\"bubbleShield\" />\n        <ClickableImage src={cubesMess} alt={cubesMess} />\n        <ClickableImage src={dirtyHog} alt=\"dirtyHog\" />\n        <ClickableImage src={fire} alt=\"fire\" />\n        <ClickableImage src={fireDot} alt=\"fireDot\" />\n        <ClickableImage src={generatedBadRocks} alt=\"generatedBadRocks\" />\n        <ClickableImage src={generatedNebula} alt=\"generatedNebula\" />\n        <ClickableImage src={goldHog} alt=\"goldHog\" />\n        <ClickableImage src={magnumBack} alt=\"magnumBack\" />\n        <ClickableImage src={mongoose} alt=\"mongoose\" />\n        <ClickableImage src={parametricArmorWear} alt=\"parametricArmorWear\" />\n        <ClickableImage src={revolver} alt=\"revolver\" />\n        <ClickableImage src={turretWireframe} alt=\"turretWireframe\" />\n        <ClickableImage src={undersuitHandGreeble} alt=\"undersuitHandGreeble\" />\n      </div>\n    </div>\n  );\n};\n\nexport default ThreeD;\n","import React, { useState, useLayoutEffect, useRef } from 'react';\nimport Link from 'react-router-dom';\nimport styles from './Blog.module.scss';\n// TODO: import just used languages, and send a PR to @types/highlight.js for that?\nimport hljs from 'highlight.js';\n\n// TODO: dynamic import blogs for speed\nimport superThinRaiiWrappersPost from '../blog/Super_Thin_RAII_Wrappers_for_C_Types.md';\nimport billWurtzPost from '../blog/billwurtz.md';\nimport blender28 from '../blog/blender_2_8.md';\nimport latexScripting from '../blog/latex_and_python.md';\nimport convexHullViz from '../blog/convex_hull.md';\n\nconst PostWrapper = ({children}: {children?: React.ReactNode}) => {\n  return <div className={styles.post}>{children}<hr/></div>;\n};\n\nconst BlogLoader = () => {\n  return (\n    <PostWrapper>\n      <div className={styles.loader}>\n        <div className={styles.inner} />\n      </div>\n    </PostWrapper>\n  );\n};\n\ninterface PostProps {\n  name: string;\n  body: string;\n}\n\nconst Post = (props: PostProps) => {\n  return (\n    <PostWrapper>\n      <div dangerouslySetInnerHTML={{__html: props.body}} />\n    </PostWrapper>\n  );\n};\n\nconst Blog = () => {\n  const container = useRef<HTMLDivElement>(null);\n  const [loadingNext, setLoadingNext] = useState(true);\n  useLayoutEffect(() => void hljs.initHighlighting());\n  return (\n    <div ref={container} className={styles.container}>\n      <Post name=\"blender28-is-awesome\" body={blender28} />\n      <Post name=\"LaTeX-scripting\" body={latexScripting} />\n      <Post name=\"convex-polygon-hull-viz\" body={convexHullViz} />\n      <Post name=\"bill-wurtz-shoutout\" body={billWurtzPost} />\n      <Post name=\"\" body={superThinRaiiWrappersPost} />\n    </div>\n  );\n};\n\nexport default Blog;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styles from './index.module.scss';\nimport './index.scss';\nimport * as pages from './pages';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\n\nconst routed = (\n  <div className={styles.pageWrapper}>\n    <Router>\n      <header>\n        <div className={styles.left}>\n          <Link className={styles.navLink} to=\"/\">Home</Link>\n          <Link className={styles.navLink} to=\"/work\">Work</Link>\n          <Link className={styles.navLink} to=\"/3d\">3D</Link>\n          <Link className={styles.navLink} to=\"/blog\">Blog</Link>\n        </div>\n        <div className={styles.right}>\n          <h1>Mike Belousov</h1>\n        </div>\n      </header>\n      <hr/>\n      <Switch>\n        <Route exact path=\"/\">\n          <pages.Home />\n        </Route>\n        <Route exact path=\"/work\">\n          <pages.Work />\n        </Route>\n        <Route exact path=\"/3d\">\n          <pages.ThreeD />\n        </Route>\n        <Route exact path=\"/blog\">\n          <pages.Blog />\n        </Route>\n      </Switch>\n    </Router>\n  </div>\n);\n\nReactDOM.render(routed, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"27d9a03f33b9dc896336f5b300ef1fca.gif\";","module.exports = __webpack_public_path__ + \"ebd707687bbc6d5caf6042b9e8d40a7b.png\";","module.exports = __webpack_public_path__ + \"050cfaf42e208bcd62a870ad49b03036.png\";","module.exports = __webpack_public_path__ + \"e31f6b9cabfb8d5271a258924ca05db7.png\";","module.exports = __webpack_public_path__ + \"a9f87d61abd3de0f6d20f66c1a2a423b.png\";","module.exports = __webpack_public_path__ + \"5113fc351055a93138403969e51c8c8e.png\";","module.exports = __webpack_public_path__ + \"4192b713c39dacc29500ebfb83fe52ac.gif\";","module.exports = __webpack_public_path__ + \"531a659df17cfb83720f720e5b5a48a3.png\";","module.exports = __webpack_public_path__ + \"30eb24f73d2d609894e8477f38cd2eff.png\";","module.exports = __webpack_public_path__ + \"fe70b932a676220863d6b62b2525186e.png\";","module.exports = \"<h1 id=\\\"super-thin-raii-wrappers-for-c-types\\\">Super Thin RAII Wrappers for C Types</h1>\\n<h3 id=\\\"june-17-2018\\\">June 17, 2018</h3>\\n<p>Let&#39;s partake in some template indulgence. Suppose we have some C language\\nlibrary that we&#39;re linking to our amazing C++ project, but it leaves us with\\na few sad C &quot;constructors&quot; and &quot;deleters&quot; surrounding a struct, like any\\nnon-object-oriented language. Suppose we have a struct: <code>struct MyCType</code>,  \\na &quot;constructor&quot; for it: <code>MyCtype* Create_MyCType()</code> and a &quot;deleter&quot;\\nfor it too: <code>Free_MyCType(MyCType*)</code>.</p>\\n<p>If you don&#39;t know what \\n<a href=\\\"https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization\\\">Resource Acquisition is Initialization</a>\\nis, you should check it out, it&#39;s a useful programming idiom, often associated with C++,\\nthat you probably already use somewhere.\\nSo the question is, how can we get ourselves some nice RAII, scope-based destruction \\nfor this type with minimal boiler plate? </p>\\n<p>Our goal is that we can transform this code:</p>\\n<pre><code class=\\\"language-cpp\\\">void myFunc()\\n{\\n  CType* ctype = initialize_CType();\\n  //do something with c type\\n  destroy_CType(ctype);\\n}</code></pre>\\n<p>Into this code:</p>\\n<pre><code class=\\\"language-cpp\\\">void myFunc()\\n{\\n    WrappedCType type;\\n    //do something with it\\n}</code></pre>\\n<p>Isn&#39;t that much cleaner? \\nI&#39;ll look into using the STL for a great, simple solution, and then a custom\\nwrapper emphasizing performance.</p>\\n<p>Indeed, it turns out we can actually do what we want there\\n<em>very</em> easily, having decent knowledge of the STL, the natural solution to the\\nproblems that most over-zealous c++ programmers have.\\nLet&#39;s give this an STL solution before we look into a custom one and later we&#39;ll\\nsee what kind of performance gains we can find and if it&#39;s worth it.\\nBut first, let&#39;s define some contrived &quot;C code&quot;, structs and functions that we \\nwill attempt to wrap. We&#39;ll assume it&#39;s partitioned into headers and implementation\\nsource as the files in our working directory of &quot;ctype.h&quot; and &quot;ctype.c&quot;.</p>\\n<pre><code class=\\\"language-cpp\\\">// === ctype.h =============\\n\\ntypedef struct {\\n  int s;\\n  unsigned long long t;\\n} ExampleSubType;\\n\\ntypedef struct {\\n  int a;\\n  float b;\\n  ExampleSubType* sub;\\n} ExampleCType;\\n\\n// === ctype.c ============\\n\\nExampleCType* Create_ExampleCType(int i, float f)\\n{\\n  //pardon any mistakes, in my tests I used C++ allocation\\n  //i.e. new ExampleCType{i,f, new ExampleSubType{5, ...}};\\n  ExampleCType* result = malloc(sizeof(ExampleCType));\\n  result-&gt;a = i;\\n  result-&gt;b = f;\\n  result-&gt;sub = malloc(sizeof(ExampleSubType));\\n  result-&gt;sub-&gt;s = 5;\\n  result-&gt;sub-&gt;t = 334323464592ULL;\\n  return result;\\n}\\n\\nvoid Free_ExampleCType(ExampleCType* in)\\n{\\n  free(in-&gt;sub);\\n  free(in);\\n}</code></pre>\\n<p>So, how can we elegantly use the STL To initialize with our Create function,\\nand destroy with our Delete function? The real hint should be our intended scope\\nbased destruction. We can provide a smart pointer with a custom deleter, which\\nhappens to match our intended signature. If it didn&#39;t, we could still probably use\\na fitting lambda expression to map it to the required deleter signature. Let&#39;s do it\\nas follows:</p>\\n<pre><code class=\\\"language-cpp\\\">#include &lt;ctype.h&gt;\\n#include &lt;type_traits&gt;\\n#include &lt;memory&gt;\\n#include &lt;iostream&gt;\\nusing namespace std;  //for brevity and tersity\\n\\ntemplate&lt;auto Create, auto Delete, typename... CreateArgTypes&gt;\\nshared_ptr&lt;\\ntypename remove_pointer&lt;\\ndecltype(Create(declval&lt;CreateArgTypes&gt;()...))&gt;::type&gt;\\nmakeCTypeWrapper(CreateArgTypes&amp;&amp;... args)\\n{\\n  using CTypePtr = decltype(Create(declval&lt;CreateArgTypes&gt;()...));\\n  using CType = typename remove_pointer&lt;CTypePtr&gt;::type;\\n  return shared_ptr&lt;CType&gt;(Create(args...), Delete);\\n}\\n\\nint main()\\n{\\n  //Example example_inst{1, 0.5f};\\n  auto example_inst = makeCTypeWrapper&lt;\\n  Create_ExampleCType,\\n    Free_ExampleCType&gt;\\n  (-5, 0.5f);\\n  cout &lt;&lt; &quot;peek at the instance&#39;s &#39;a&#39; member&quot; &lt;&lt; endl;\\n  cout &lt;&lt; example_inst-&gt;a &lt;&lt; endl;\\n  cout &lt;&lt; &quot;peek at the instance&#39;s &#39;sub&#39; member&#39;s &#39;t&#39; member&quot; &lt;&lt; endl;\\n  cout &lt;&lt; example_inst-&gt;sub-&gt;t &lt;&lt; endl;\\n}</code></pre>\\n<p>This has some awesome advantages. Copy prevention (if you use unique_ptr), \\nreference counting, all the things that come with smart pointers. The one\\nissue is, what if the library you&#39;re using already does reference counting?\\nWhat if this is just too much overhead for what you&#39;re doing? Exploring a\\nmore raw wrapper is the next step, but before that, I&#39;ll first show what would\\nmake a lovely addition to the above code... if C++ allowed deduced arguments for\\ntemplated aliases. Using a function pointer variable type alias, we can craft\\na single, make_Example() function with no template parameters. Unfortunately, without\\ndeduction, you would have to explicitly list the argument types which is ugly\\nand worst of all redundant. Either way, it might look something like this:</p>\\n<pre><code class=\\\"language-cpp\\\">template&lt;typename... ArgTypes&gt;\\nshared_ptr&lt;ExampleCType&gt;(*make_Example(ArgTypes...) = \\n    &amp;makeCTypeWrapper&lt;Create_ExampleCtype, Free_ExmapleCType, ArgTypes...&gt;;</code></pre>\\n<p>So then, we&#39;re on to a raw wrapper. How thin can we make it?\\nCan we make the wrapping inlined by the compiler entirely? I will explore the latter\\nquestion and discuss it in another article. For now we&#39;ll just bring the wrapper into\\nexistence. That question is what I&#39;d like to use to determine if the \\nsmart_pointer solution is worth it in performance-critical contexts.</p>\\n<p>We&#39;ll start with the idea for our template that hopefully will inevitably do everything\\nwe want.</p>\\n<pre><code class=\\\"language-cpp\\\">template&lt;typename CType, CType*(Create*)(), void(Free*)(CType*)&gt;\\nstruct CTypeWrapper;</code></pre>\\n<p>We&#39;ve got function pointer type value arguments to our template already, and later\\nwe&#39;ll add variadic arguments to match any signature for the Create function. This\\ncould be used to match different overloads but unfortunately it seems difficult to \\ninfer the overload so we can&#39;t do much without boilerplate as far as my \\nintelligence falls.\\nWe can at least infer the wrapped type itself from the function pointer arguments.\\nFor now let&#39;s put in a simple implementation and see how it compiles.</p>\\n<p>I ended up adding some additional templated aliases for the function pointer\\ntypes, which makes it much more comprehensible, but these will disappear in the\\nC++17 version.</p>\\n<pre><code class=\\\"language-cpp\\\">template&lt;T&gt;\\nusing CreateFunc = T*(*)();\\n\\ntemplate&lt;T&gt;\\nusing FreeFunc = void(*)(T*);\\n\\ntemplate&lt;typename CType, \\n  CreateFunc&lt;CType&lt; Create, \\n  FreeFunc&lt;CType&lt; Free&lt;\\nstruct CTypeWrapper\\n{\\n  CType* wrapped;\\n  CTypeWrapper()\\n    : wrapped(Create())\\n  {}\\n  ~CTypeWrapper()\\n  {\\n    Free(wrapped);\\n  }\\n  //implicit conversion to wrapped type\\n  operator CType* ()\\n  {\\n    return wrapped;\\n  }\\n  CType* operator-&gt;()\\n  {\\n    return wrapped;\\n  }\\n};</code></pre>\\n<!--\\n\\nI should probably say by now that there will be some elements of danger\\nto stuff I am discussing, but one of the cool things (I think) you can do\\nwith this type is safely cast a reference of it to the underlying pointer.\\n\\n-->\\n\\n\\n<p>Now let&#39;s use our contrived C example and see what happens</p>\\n<pre><code class=\\\"language-cpp\\\">#include&quot;ctype.h&quot;\\n#include&quot;CTypeWrapper.h&quot;\\n#include &lt;iostream&gt;\\n\\nusing namespace std;  //for brevity and tersity\\n//our shiny type wrapper\\nusing Example = CTypeWrapper&lt;ExampleCType, \\n      Create_ExampleCType, \\n      Free_ExampleCType&gt;;\\n\\nint main()\\n{\\n  Example example_inst;\\n  cout &lt;&lt; &quot;peek at the instance&#39;s &#39;a&#39; member&quot; &lt;&lt; endl;\\n  cout &lt;&lt; example_inst-&gt;a &lt;&lt; endl;\\n  cout &lt;&lt; &quot;peek at the instance&#39;s &#39;sub&#39; member&#39;s &#39;t&#39; member&quot; &lt;&lt; endl;\\n  cout &lt;&lt; example_inst-&gt;sub-&gt;t &lt;&lt; endl;\\n}</code></pre>\\n<p>Assuming &quot;CTypeWrapper.h&quot; contains our templates we&#39;ve made, we should be good\\nto go. Our output is:</p>\\n<pre><code>peek at the instance&#39;s &#39;a&#39; member\\n100\\npeek at the instance&#39;s &#39;sub&#39; member&#39;s &#39;t&#39; member\\n334323464592</code></pre><p>So we&#39;ve got implicit conversion to the underlying type, and an overrided \\n<code>operator-&gt;</code>to\\nprovide access to the underlying type. This should feel a bit worrisome actually, \\nbecause our type <em>should</em> feel like a value, not a pointer, but overriding the \\n<code>.</code>  operator is out of the question for good reason and the \\n<code>-&gt;</code> syntax reminds us that our type really just contains an underlying\\npointer so in my opinion it&#39;s, <em>ok</em>, not great. Definitely sinful.</p>\\n<p>I tried with some difficulty to find out how one can template alias the type\\nto provide a variadic constructor, but unfortunately I don&#39;t believe it&#39;s possible\\nsince the first two types cannot be deduced in a class construction context\\nand template aliases can&#39;t either (as far as I know up to c++17). The function \\ndeduction context appears to correctly deduce the types even with only the partial\\nexplicit template parameters, but the class doesn&#39;t seem to be able to. I couldn&#39;t\\nfigure out a deduction guideline for it either, but I will\\nlook into the difference in deduction rules for classes and functions, and confirm\\nor fix my loss here.\\nThis minimal and I think &quot;acceptable&quot; boilerplate is the\\nfarthest I got for generic RAII wrappers of C-style types. If you&#39;re looking to C++-ify\\nyour C-using code, try something like this, but clearly a heavy duty careful wrapper is \\nthe real solution to any sufficient project. There are a few more hacks for quick wrapping\\nof C types that I explored and may revisit later, but for now I&#39;ll leave the code where\\nI left off, with a tidy wrapper which unfortunately has some definition boilterplate.</p>\\n<pre><code class=\\\"language-cpp\\\">#include &quot;ctype.h&quot;\\n#include &lt;type_traits&gt;\\n\\ntemplate&lt;\\nauto Create, \\n     auto Free,\\n     typename... CreateArgTypes&gt;\\nstruct CTypeWrapper\\n{\\n  private:\\n    using CTypePtr = decltype(Create(std::declval&lt;CreateArgTypes&gt;()...));\\n  public:\\n    CTypePtr wrapped;\\n    CTypeWrapper(CreateArgTypes&amp;&amp;... args)\\n      : wrapped{Create(args...)}\\n    {}\\n    ~CTypeWrapper()\\n    {\\n      Free(wrapped);\\n    }\\n    operator CTypePtr ()\\n    {\\n      return wrapped;\\n    }\\n    CTypePtr operator-&gt;()\\n    {\\n      return wrapped;\\n    }\\n};\\n\\nusing Example = CTypeWrapper&lt;\\nCreate_ExampleCType, \\n  Free_ExampleCType, \\n  int, double&gt;;\\n\\n#include &lt;iostream&gt;\\nusing namespace std;  //for brevity and tersity\\n\\nint main()\\n{\\n  //Example example_inst{1, 0.5f};\\n  Example example_inst{-5, 0.5f};\\n  cout &lt;&lt; &quot;peek at the instance&#39;s &#39;a&#39; member&quot; &lt;&lt; endl;\\n  cout &lt;&lt; example_inst-&gt;a &lt;&lt; endl;\\n  cout &lt;&lt; &quot;peek at the instance&#39;s &#39;sub&#39; member&#39;s &#39;t&#39; member&quot; &lt;&lt; endl;\\n  cout &lt;&lt; example_inst-&gt;sub-&gt;t &lt;&lt; endl;\\n}</code></pre>\\n<p>I&#39;ll add a follow up article eventually for analyzing some of the \\nllvm-ir assembly instructions that the clang compiler can emit to get a good idea \\nat the overhead the wrapper incurs and how to minimize it or potentially eradicate \\nit with optimization\\nand inlining. If you find better ways, as I&#39;m sure you will, please inform me!</p>\\n\";","module.exports = \"<h1 id=\\\"bill-wurtz\\\">Bill Wurtz</h1>\\n<h3 id=\\\"august-28-2018\\\">August 28, 2018</h3>\\n<p>Shout-out to Bill Wurtz.</p>\\n<p>His website is a real treat, it harkens back to the early web styles (or lack thereof). It reminds me of a simpler time when websites were awesome.</p>\\n<p>Check it out: <a href=\\\"https://billwurtz.com\\\">billwurtz.com</a></p>\\n\";","module.exports = \"<h1 id=\\\"photoshop-is-no-longer-my-sketch-pad\\\">Photoshop is no longer my sketch pad</h1>\\n<h3 id=\\\"july-13-2019\\\">July 13, 2019</h3>\\n<p>I needed to do a top-down draft, a design of something I would be 3D-modeling later, and so I opened up\\nmy 2D drawing toolkit. Once photoshop, it was actually more recently Krita. I bumped the resolution to\\n5000x5000 pixels, and had to think deeply about it.</p>\\n<p>The lack of dynamic resolution is so saddening\\nin my drafting process. Having to worry about blurry details and zooming in too far, or zooming out too\\nfar, causing slow stroke finalization/rendering. So, using Blender for practically everything else and\\nloving Blender 2.8 recently, I decided to check out its new 2D tools for kicks. Lo and behold, the lagless\\nvector-based, infinite resolution, hassle-free zoom, layered, materialed, simple, beautiful 2D workspace of my\\ndreams was before me. Gone are the days of drawing arrows to various scene elements to elaborate on them.\\nJust zoom into them! You can just zoom infinitely and write inside them. The brushes are clean, and\\ncustomizable. Erasing is instant (use point-erase), and rendering is lagless. And since you&#39;re not\\ndealing with raster, there are <em>no</em> complex selections to perform. You can select strokes independently,\\nselect their points, move things, scale things, and it takes no time at all. You can <em>sculpt</em> your points,\\nadding or reducing thickness of lines, moving them, adding some fuzziness, simplifying them, and more. It&#39;s not\\njust good for drafting, but all drawing comes naturally to it. And you can even extend it to 3D! Draw in 3D,\\nstart modeling in 3D. Draw on your 3D models to concept some greebling if your artstyle demands it!\\nIt has never felt so easy to me. Blender has always been good for what it does,\\nbut it has never felt so exceptionally designed until now. Whether you&#39;re designing interfaces or levels, doing\\n3D graphics work, doing 2D work, or any animation, definitely get into Blender 2.8 and start a new 2D drawing\\nproject. It just works!</p>\\n\";","module.exports = \"<h1 id=\\\"empowering-latsubesubx-pylatsubesubxc\\\">Empowering LaT<sub>E</sub>X (PyLaT<sub>E</sub>Xc)</h1>\\n<h3 id=\\\"may-4-2019\\\">May 4, 2019</h3>\\n<p>The one nagging gap in my homework development stack early on\\nwas an itch for \\nprogrammability, that trait which Excel is alleged to have.\\nBut I have a gripe with Excel. It&#39;s like Scratch for adults,\\nA psuedoscripting language for the uninitiated and unlearned.\\nPersonally, I&#39;ve always kicked up a Python interpreter any\\ntime I needed a calculation, and I quickly began depending on\\nPython+scipy for more intense derivations and data routines. I scratched\\nup a utility module for producing LaT<sub>E</sub>X tables and pgfplots graphics\\nfrom various data formats, and used it frequently with minimal\\ncopy and paste glue (thank you Cygwin&#39;s \\n    <code>/dev/clipboard</code>).</p>\\n<p>But larger projects begged for more complete tools; like that assignment\\ninvolving the visualization \\nof 26 different samples from a dataset, as well as calculating some\\nstatistical metrics about each sample.\\nA sane person would have used the charting features\\nin the Excel spreadsheet it was provided in, but that&#39;s outside the scope\\nof this post.\\nI exported to csv immediately and made an incredibly primitive \\ntoolkit for embedding Python logic in LaT<sub>E</sub>X. Revisiting it a\\ncouple of months later, I refined my toolkit massively and today I \\nwould consider the design complete, but alternative implementation\\napproaches merit some exploration.</p>\\n<p>The first time I attemped glueing my Pythonisms into LaT<sub>E</sub>X, \\nmy design was a tiny mapping from a LaT<sub>E</sub>X grammar extension\\nto Python formatting key syntax.\\nIf I were to write my LaT<sub>E</sub>X code directly in a Python string,\\nand attempt to use formatting keys,\\nI would probably spontaneously combust. It looks like this:</p>\\n<pre><code class=\\\"language-python\\\">r&quot;&quot;&quot;\\\\begin{{document}}\\n\\\\frac{{ {kill} }}{{ {me} }}\\n\\\\end{{document}}&quot;&quot;&quot;.format(kill=5, me=10)</code></pre>\\n<p>That&#39;s almost as crufty as chained ternary expressions in JSX.\\nBackslash doubling I can avoid by making it a raw string, but that\\nisn&#39;t an option in all use cases.\\nRegardless, I hid this formatting ugliness behind a script, which\\nescaped braces for me, and interpretted the characters &#39;&lt;&lt;&#39; as &#39;{&#39;, and\\n&#39;&gt;&gt;&#39; as &#39;}&#39;. So now I didn&#39;t have to brace every 5 characters, and the\\nkeys looked distinct from the LaT<sub>E</sub>X syntax.\\nMy dumb and ugly LaT<sub>E</sub>X superset templater took about 5 lines of \\nPython code to process, and the source looked like:</p>\\n<pre><code class=\\\"language-python\\\">\\\\begin{document}\\n\\\\frac{&lt;&lt;numerator&gt;&gt;}{&lt;&lt;denominator&gt;&gt;}\\n\\\\end{document}</code></pre>\\n<p>Quite literally, all my template processor had to do was replace all braces with\\nescaped double braces, and then replace all \\ndouble angle brackets with a single formatting brace, thus yielding\\nthe valid Python formatting keys, while allowing raw LaT<sub>E</sub>X to look\\nat least familiar.\\nThen you just produce your values and/or data in your Python script, \\nread this template from some file,\\nand submit it to Python&#39;s formatting functinos with the expected keyword\\narguments that you used in the document source \\n(e.g. &lt;<numerator>&gt;).\\nHere&#39;s the naive templating implementation:</p>\\n<pre><code class=\\\"language-python\\\">def load_pytex(path, **kwargs):\\n  txt = open(path).read()\\n  txt = txt.replace(&#39;{&#39;,&#39;{{&#39;).replace(&#39;}&#39;,&#39;}}&#39;)    \\n  txt = txt.replace(&#39;&lt;&lt;&#39;, &#39;{&#39;).replace(&#39;&gt;&gt;&#39;, &#39;}&#39;)\\n  txt.format(**kwargs)\\n  return txt  # or subproc.check_output([&#39;pdflatex&#39; ...])</code></pre>\\n<p>So this works, but it would be quite annoying to have a Python\\ncontext so decoupled from the usage context. Calculating things\\nwithout regard to the location in the document, and being\\nunable to change the logic while editing the document without\\nswitching files.\\nCertainly I could do better? So I did something sinful.</p>\\n<p>Fake macros in LaT<sub>E</sub>X will make this all look way more T<sub>E</sub>X-savvy. \\nLet&#39;s add a <code>\\\\pyeval</code> pseudo-command, and a \\n<code>pyexec</code> pseudo-environment so that we can get something \\nlike so:</p>\\n<pre><code class=\\\"language-python\\\">\\\\begin{pyexec}\\nname = &#39;John&#39;\\n\\\\end{pyexec}\\n\\nHello I am \\\\pyeval{&#39; &#39;.join([name,&#39;Smith&#39;])}</code></pre>\\n<p>Originally I implemented (knowing my transgressions) a naive\\nregular expression based implementation, but this has many problems</p>\\n<ul>\\n<li>I want to ignore false ends in quotes and comments</li>\\n<li>I want to allow counting of nested braces in pyeval</li>\\n</ul>\\n<p>expressions so that you don&#39;t need to escape all right\\nbraces. (Regular expressions can&#39;t find the valid ending\\n    brace of a nested expression)\\nCheckout the following counter_examples:</p>\\n<pre><code class=\\\"language-python\\\">\\\\begin{pyexec}\\nhate_you = r&#39;\\\\end{pyexec}&#39;  # we need to avoid ending if its in a literal\\n\\\\end{pyexec}\\n\\n\\\\pyeval{h = {&#39;hello&#39;: &#39;world&#39;, &#39;x&#39;: {}}}  # which brace do we end on?</code></pre>\\n<p>So I couldn&#39;t use regular expressions for this, but I still wanted it.\\nBecause my LaT<sub>E</sub>X document source would look like this:</p>\\n<pre><code class=\\\"language-python\\\">\\\\begin{pyexec}\\nfrom scipy.optimize import curve_fit\\nfrom random import random as rand\\nfrom itertools import count, product as crossproduct\\nbin = crossproduct((0,1),repeat=5)\\ndata = list(zip(count(), bin))\\n# add a count of set bits as a column\\nfor row in data:\\nd, b = row\\nrow.append(b.count(1))\\nrandpts = [[rand(),rand()] for _ in range(100)]\\n\\\\end{pyexec}\\n\\n\\\\section*{Data Stuff}\\n\\n\\\\begin{tabular}{|c|c|}\\n\\\\hline\\nDecimal &amp;amp; Binary &amp;amp; 1-Bits \\\\\\\\\\n\\\\hline\\n\\\\pyeval{&#39;\\\\n&#39;.join((&#39;&amp;amp;&#39;.join(map(str,d)) for d in data))}\\n% we can extract the above one-liner for reuse in tabular \\n% construction and any horizontally partitioned context\\n\\\\hline\\n\\\\end{tabular}\\n\\n% use unpack+zip hack to get separate lists of x then y coords\\nBest Fit: \\\\pyeval{curve_fit(lambda x,m,b: m*x+b, zip(*randpts))} </code></pre>\\n<p>Mmmmm... delicious. It looks so much like Python yet so much like LaT<sub>E</sub>X.\\nIt&#39;s both at once, without crippling either one! It&#39;s logic embedded in the document\\nmarkup cleanly. So I did go and implement it. Originally I tried using a more\\ncomplicated parsing approach, PyParsing, but it turned out to be far too complicated\\nfor what was essentially templating. I ended up settling on parsing by character, due\\nto the simplicity of the extension. There are a few performance enhancements I could\\nmake but I&#39;m not in the need of them right now, and I&#39;ve noted them for posterity in\\nmy README. This is PyLaT<sub>E</sub>X, and I put it on my\\n<a href=\\\"https://github.com/MichaelBelousov/pylatexc\\\">GitHub</a></p>\\n<p>At last, I would argue, that we have a tool more extensible than Excel, \\nit&#39;s got all of PyPI behind it, with numpy, scipy, and all the packages\\nyou could want&emdash; embedded in your document.\\nIf you like this approach, maybe you can be just as sinful and throw it into\\nMarkdown, or change up the scripting language to your preference. So long as you\\ndon&#39;t use php. Even if it&#39;s already a templating language.</p>\\n<pre><code class=\\\"language-markdown\\\">My Document\\n===========\\n\\n```pyexec\\nimport csv\\ndata = list(csv.reader(&#39;mycsv.csv&#39;))\\n```\\n`&gt;&gt;&gt; &#39;\\\\n&#39;.join(data)`</code></pre>\\n<p>And as a final note, check out <a href=\\\"https://typora.io/\\\">Typora</a>\\nother cool ways to not use Office products. I don&#39;t actually use it, but the LaT<sub>E</sub>X\\nin Markdown makes me want to. Even if I&#39;m not in school any more.</p>\\n<style>\\nspan.vim {\\n    font-size: 3pt;\\n}\\n</style>\\n\";","module.exports = \"<h1 id=\\\"convex-hull-of-polygons-and-the-melkman-algorithm\\\">Convex Hull of Polygons and the Melkman Algorithm</h1>\\n<h3 id=\\\"may-4-2019\\\">May 4, 2019</h3>\\n<p>For my computational geometry course, I visualized a naive and the melkman convex hull\\nfinding algorithms, with some pedagogical narration, it\\nwas a fun opportunity to really learn Elm for HTML5 content authoring, and SVG rendering.\\n<a href=\\\"https://mikemikeb.com/convex-hull-visualization/\\\">See it here</a>.</p>\\n<p>The narration needs some work, the style is pretty poor and there&#39;s no mobile support,\\nso I&#39;ll come back to it some weekend.</p>\\n\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWrapper\":\"src_pageWrapper__1GYDt\",\"left\":\"src_left__3pQy1\",\"navLink\":\"src_navLink__2rLS0\"};"],"sourceRoot":""}
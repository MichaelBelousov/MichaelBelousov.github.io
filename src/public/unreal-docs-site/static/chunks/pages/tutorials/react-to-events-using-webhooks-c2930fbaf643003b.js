(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1957],{83906:function(e,t,n){"use strict";n.d(t,{Jt:function(){return C},Pu:function(){return l},ZP:function(){return N}});var o=n(36864),a=n(4730),i=n(67294),r=n(3905),s=["components"],l=(i.createElement,{title:"React to iModel events using Webhooks API",tile:{name:"React to iModel events using Webhooks API",description:"This tutorial will teach you how to use Webhooks API to subscribe to iModel events and introduce basic event handling workflows.",href:"/tutorials/react-to-events-using-webhooks/",durationInMinutes:45,relatedApiIds:["webhooks"]}}),d=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)}},p=d("Introduction"),c=d("TutorialSection"),u=d("LinkButton"),h=d("NodeJsIcon"),m=d("GitIcon"),k=d("VSCodeIcon"),g=d("PostmanIcon"),y=d("Title"),w=d("CodeBlock"),f=d("Alert"),v=d("ContinueLearningSection"),b=d("TileList"),T=d("ResourceTile"),x={metadata:l};function N(e){var t=e.components,n=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,o.Z)({},x,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(p,{skillLevel:"Intermediate",durationInMinutes:"45",mdxType:"Introduction"},(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"In this tutorial, you will learn how to use the Webhooks REST API to create and manage your webhooks. Also you will learn how to validate the webhook signature and process received event messages in your application.")),(0,r.kt)(c,{mdxType:"TutorialSection"},(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"This tutorial assumes that you already have:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Basic knowledge on ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Webhook"},"webhooks")," and how they work."),(0,r.kt)("li",{parentName:"ul"},"Knowledge on web application deployment or experience using ",(0,r.kt)("a",{parentName:"li",href:"https://www.heroku.com/about"},"Heroku"),"/",(0,r.kt)("a",{parentName:"li",href:"https://www.netlify.com/"},"Netlify"),"."),(0,r.kt)("li",{parentName:"ul"},"Already registered your own application/client on iTwin Platform.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Steps to follow for registering an application can be found ",(0,r.kt)("a",{parentName:"li",href:"/tutorials/register-and-modify-application/"},"here"),"."),(0,r.kt)("li",{parentName:"ul"},"Make sure that your application/client is associated with ",(0,r.kt)("strong",{parentName:"li"},"Webhooks API")," and has ",(0,r.kt)("inlineCode",{parentName:"li"},"webhooks:read")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"webhooks:modify")," scopes enabled."))),(0,r.kt)("li",{parentName:"ul"},"Any existing ",(0,r.kt)("strong",{parentName:"li"},"iModel")," that your application/client has access and contains at least one changeset that has not a named version created on.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"In order to create one you need to run the synchronization for an iModel which is described in this ",(0,r.kt)("a",{parentName:"li",href:"/tutorials/synchronization-storage-tutorial"},"tutorial"),". Or you can ",(0,r.kt)("a",{parentName:"li",href:"/tutorials/create-test-imodel-sample"},"create a new iModel")," from Bentley provided sample."))),(0,r.kt)("li",{parentName:"ul"},"Knowledge on creating named versions for your iModel.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A tutorial on how to create a named version can be found ",(0,r.kt)("a",{parentName:"li",href:"/tutorials/create-named-version"},"here"),"."))))),(0,r.kt)(c,{mdxType:"TutorialSection"},(0,r.kt)("h2",{id:"1-set-up-your-environment"},"1. Set up your environment")),(0,r.kt)(c,{subSection:!0,actions:[(0,r.kt)(u,{href:"https://nodejs.org",target:"_blank",title:"Node.js",icon:(0,r.kt)(h,{mdxType:"NodeJsIcon"}),mdxType:"LinkButton"}),(0,r.kt)(u,{href:"https://git-scm.com/downloads",target:"_blank",title:"Git",icon:(0,r.kt)(m,{mdxType:"GitIcon"}),mdxType:"LinkButton"})],mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"11-required-materials"},"1.1 Required materials"),(0,r.kt)("h5",{id:"a-hrefhttpsnodejsorg-target_blanknodejs-14x-lts-versiona"},(0,r.kt)("a",{href:"https://nodejs.org",target:"_blank"},"Node.js (14.x LTS version)")),(0,r.kt)("p",null,"This tool provides the backend JavaScript runtime necessary for your computer to read and render code appropriately. It also allows you to run NPM command line."),(0,r.kt)("h5",{id:"a-hrefhttpsgit-scmcomdownloads-target_blankgita"},(0,r.kt)("a",{href:"https://git-scm.com/downloads",target:"_blank"},"Git")),(0,r.kt)("p",null,"This is the common source code control system.")),(0,r.kt)(c,{subSection:!0,actions:[(0,r.kt)(u,{href:"https://code.visualstudio.com/",target:"_blank",title:"VS Code",icon:(0,r.kt)(k,{mdxType:"VSCodeIcon"}),mdxType:"LinkButton"}),(0,r.kt)(u,{href:"https://www.postman.com/downloads/",target:"_blank",title:"Postman",icon:(0,r.kt)(g,{mdxType:"PostmanIcon"}),mdxType:"LinkButton"})],mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"12-suggested-materials"},"1.2 Suggested materials"),(0,r.kt)("h5",{id:"a-hrefhttpscodevisualstudiocom-target_blankvisual-studio-codea"},(0,r.kt)("a",{href:"https://code.visualstudio.com/",target:"_blank"},"Visual Studio Code")),(0,r.kt)("p",null,"This is our recommended editor and debugger tool for developing iTwin.js applications. It is free, open source and includes a GUI for working with GIT."),(0,r.kt)("h5",{id:"a-hrefhttpswwwpostmancomdownloads-target_blankpostmana"},(0,r.kt)("a",{href:"https://www.postman.com/downloads/",target:"_blank"},"Postman")),(0,r.kt)("p",null,"If you want to test the REST API calls directly, you can use ",(0,r.kt)("a",{parentName:"p",href:"https://www.postman.com/downloads/"},"Postman")," or any other solution capable of sending HTTP requests. If you do it this way, you will require an authorization token for the requests to work."),(0,r.kt)("h5",{id:"a-hrefhttpssignupherokucom-target_blankheroku-accounta"},(0,r.kt)("a",{href:"https://signup.heroku.com/",target:"_blank"},"Heroku account")),(0,r.kt)("p",null,"Heroku will be used to deploy the test application during this tutorial.")),(0,r.kt)(c,{mdxType:"TutorialSection"},(0,r.kt)("h2",{id:"2-create-your-application"},"2. Create your application"),(0,r.kt)("p",null,"Since webhooks are sending the events via HTTP requests you need to have an application running that exposes a public HTTP endpoint - callback URL. In this tutorial we are going to use ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/en"},"Node.js")," together with ",(0,r.kt)("a",{parentName:"p",href:"https://expressjs.com/"},"Express")," for test application.")),(0,r.kt)(c,{subSection:!0,actions:[(0,r.kt)(y,{mdxType:"Title"},"Project initialization"),(0,r.kt)(w,{language:"bash",code:"cd your-project\nnpm init -y\nnpm install express\nnpm install -D typescript @types/express\ntsc --init",mdxType:"CodeBlock"}),(0,r.kt)(y,{mdxType:"Title"},"tsconfig.json"),(0,r.kt)(w,{language:"json",code:'"outDir":"dist"',mdxType:"CodeBlock"}),(0,r.kt)(y,{mdxType:"Title"},"package.json"),(0,r.kt)(w,{language:"json",code:'"main":"dist/index.js"',mdxType:"CodeBlock"}),(0,r.kt)(w,{language:"json",code:'"scripts":{\n  "start":"tsc && node dist/index.js"\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"21-initialize-the-project"},"2.1 Initialize the project"),(0,r.kt)("p",null,"To start off, create new directory for your application and execute the following initialization commands. These commands will initialize new npm project, install required dependencies and configure typescript. After initialization, update freshly generated ",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," file by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"outDir")," property to ",(0,r.kt)("inlineCode",{parentName:"p"},'"dist"'),". Next step will be updating ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file to update the application entry point and ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," script. After that is done, the project is ready for the next step."),(0,r.kt)(f,{type:"informational",mdxType:"Alert"},'If you are running into "tsc is not recognized" problems, try installing typescript globally "npm install typescript -g".')),(0,r.kt)(c,{subSection:!0,actions:[(0,r.kt)(y,{mdxType:"Title"},"src/index.ts"),(0,r.kt)(w,{language:"typescript",code:'import express from "express";\n\nconst app = express();\napp.use(express.text({ type: "application/json" }));\n\napp.post("/events", () => {\n  // Handle the event\n});\n\nconst port = 5000;\napp.listen(port, () => {\n  console.log("Application was started.");\n});',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"22-create-express-server"},"2.2 Create express server"),(0,r.kt)("p",null,"Now let\u2019s start implementing the application. At first, create a new file in your project directory ",(0,r.kt)("inlineCode",{parentName:"p"},"src/index.ts"),". This is going to be the application starting point. From example on the side you can see that we are going to have a public HTTP endpoint that will be accepting POST requests ",(0,r.kt)("inlineCode",{parentName:"p"},'app.post("/events", () => {})'),". This is because event messages are sent using POST method. Note that above there is a line ",(0,r.kt)("inlineCode",{parentName:"p"},'app.use(express.text({ type: "application/json" }))')," that makes the server treat the requests with json content as text and not deserialize them initially because raw payload will be required for event authorization in one of the upcoming steps.")),(0,r.kt)(c,{subSection:!0,actions:[(0,r.kt)(y,{mdxType:"Title"},"src/index.ts"),(0,r.kt)(w,{language:"typescript",code:'\napp.options("/events", async (req, res) => {\n  const requestedOrigin = req.headers["webhook-request-origin"] as string;\n\n  res.setHeader("allow", ["POST"]);\n  res.setHeader("webhook-allowed-origin", requestedOrigin);\n  res.sendStatus(200);\n});',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"23-add-callback-validation-handler"},"2.3 Add callback validation handler"),(0,r.kt)("p",null,"Before we start working with event handling, first we need to make sure that newly created webhook gets activated by passing the callback URL validation. To handle this, we need to add one more HTTP endpoint that accepts OPTIONS requests ",(0,r.kt)("inlineCode",{parentName:"p"},'app.options("/events", () => {})')," and performs the validation handshake as described in ",(0,r.kt)("a",{parentName:"p",href:"/apis/webhooks/#callbackvalidation"},"documentation"),".")),(0,r.kt)(c,{subSection:!0,actions:[(0,r.kt)(y,{mdxType:"Title"},"src/index.ts"),(0,r.kt)(w,{language:"typescript",code:'import crypto from "crypto";',mdxType:"CodeBlock"}),(0,r.kt)(w,{language:"typescript",code:'function validateSignature(payload: string, signatureHeader: string): boolean {\n  // Replace with your own webhook secret later\n  const secret = "4eb25d308ef2a9722ffbd7a2b7e5026f9d1f2feaca5999611d4ef8692b1ad70d";\n\n  const [algorithm, signature] = signatureHeader.split("=");\n  const generated_sig = crypto.createHmac(algorithm, secret).update(payload, "utf-8").digest("hex");\n\n  return generated_sig.toLowerCase() === signature.toLowerCase();\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"24-add-event-authorization"},"2.4 Add event authorization"),(0,r.kt)("p",null,"In order to authorize the event source, we need to add event signature validation. Event signature is ",(0,r.kt)("inlineCode",{parentName:"p"},"HMAC-SHA256")," string that is included in the request ",(0,r.kt)("inlineCode",{parentName:"p"},"Signature")," header. For validation we will be using Node.js ",(0,r.kt)("inlineCode",{parentName:"p"},"crypto")," utility which basically lets us to generate the same type of signature in our end. Generated signature and the signature included in the request should match to pass the authorization. Let\u2019s start adding validation by creating a new function ",(0,r.kt)("inlineCode",{parentName:"p"},"function validateSignature(payload: string, signatureHeader: string)"),". As a first parameter it will to expect raw request payload and as a second parameter it will expect signature header value. This function will also need the webhook ",(0,r.kt)("inlineCode",{parentName:"p"},"secret")," which we are going to add later on we create a webhook. Since, the signature header value also contains the cryptographic algorithm name and the signature value separated by ",(0,r.kt)("inlineCode",{parentName:"p"},"="),", we need to extract these values into separate variables ",(0,r.kt)("inlineCode",{parentName:"p"},'const [algorithm, signature] = signatureHeader.split("=")'),". Then at this point, using all the existing variables we can generate a signature ",(0,r.kt)("inlineCode",{parentName:"p"},'crypto.createHmac(algorithm, secret).update(payload, "utf-8").digest("hex")'),". Lastly, we need to check if both signatures match and return the result.")),(0,r.kt)(c,{subSection:!0,actions:[(0,r.kt)(y,{mdxType:"Title"},"src/models.ts"),(0,r.kt)(w,{language:"typescript",code:"export type Event = {\n  content: IModelEvent | NamedVersionCreatedEvent;\n  contentType: string;\n  enqueuedDateTime: string;\n  messageId: string;\n  subscriptionId: string;\n};\n\nexport type IModelEvent = {\n  imodelId: string;\n  projectId: string;\n};\n\nexport type NamedVersionCreatedEvent = {\n  changesetId: string;\n  changesetIndex: string;\n  versionId: string;\n  versionName: string;\n} & IModelEvent;",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"25-define-data-models"},"2.5 Define data models"),(0,r.kt)("p",null,"Before we can start receiving the events, we need to prepare the models for expected data. You can find events schema by downloading API definition file from ",(0,r.kt)("a",{parentName:"p",href:"/apis/webhooks"},"API reference"),". Select preferred schema type on the right and click Export. Now from that point, create a new file ",(0,r.kt)("inlineCode",{parentName:"p"},"src/models.ts")," and create event types by matching the schema.")),(0,r.kt)(c,{subSection:!0,actions:[(0,r.kt)(y,{mdxType:"Title"},"src/index.ts"),(0,r.kt)(w,{language:"typescript",code:'import { Event, NamedVersionCreatedEvent } from "./models";',mdxType:"CodeBlock"}),(0,r.kt)(w,{language:"typescript",code:'app.post("/events", (req, res) => {\n  const signatureHeader = req.headers["signature"] as string;\n  if (!signatureHeader || !req.body) res.sendStatus(401);\n\n  if (!validateSignature(req.body, signatureHeader)) {\n    res.sendStatus(401);\n  } else {\n    const event = JSON.parse(req.body) as Event;\n    switch (event.contentType) {\n      case "NamedVersionCreatedEvent": {\n        const content = event.content as NamedVersionCreatedEvent;\n        console.log(`New named version (ID: ${content.versionId}, Name: ${content.versionName}) was created for iModel (ID: ${content.imodelId})`);\n        break;\n      }\n      default:\n        res.sendStatus(400); //Unexpected event type\n    }\n  }\n});',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"26-event-handling"},"2.6 Event handling"),(0,r.kt)("p",null,"Now that we have everything ready for event handling, we can start implementing it. Firstly, we want to return ",(0,r.kt)("inlineCode",{parentName:"p"},"401 Unauthorized")," for any request that does not have a event signature header or any payload, because these are required components for passing the validation ",(0,r.kt)("inlineCode",{parentName:"p"},"if (!signatureHeader || !req.body) res.sendStatus(401)"),". If request does have these components then we can proceed with further processing logic and try to validate the event signature using the function we defined in step 2.3 ",(0,r.kt)("inlineCode",{parentName:"p"},"if (!validateSignature(req.body, signatureHeader)) res.sendStatus(401)"),". If validation fails, we can assume that the event was sent from unexpected source and safely return ",(0,r.kt)("inlineCode",{parentName:"p"},"401 Unauthorized")," as well. In other case, when validation passes, proceed by deserializing the event and react accordingly to its type.")),(0,r.kt)(c,{subSection:!0,mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"27-deploy"},"2.7 Deploy"),(0,r.kt)("p",null,"For this application to work, you have to deploy it to be publicly accessible. If you have any preferences for the deployment, go ahead and use your own deployment method and platform. If not, you can keep following the tutorial and deploy the application using ",(0,r.kt)("a",{parentName:"p",href:"https://www.heroku.com/about"},"Heroku"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create new Heroku application and empty Heroku Git repository ",(0,r.kt)("a",{parentName:"li",href:"https://devcenter.heroku.com/articles/git#for-a-new-heroku-app"},"https://devcenter.heroku.com/articles/git#for-a-new-heroku-app"),"."),(0,r.kt)("li",{parentName:"ol"},"Deploy by pushing the code ",(0,r.kt)("a",{parentName:"li",href:"https://devcenter.heroku.com/articles/git#deploying-code"},"https://devcenter.heroku.com/articles/git#deploying-code"),"."),(0,r.kt)("li",{parentName:"ol"},"Use ",(0,r.kt)("inlineCode",{parentName:"li"},"heroku logs --tail")," for monitoring the behavior of the application.")),(0,r.kt)("p",null,"Once you have the application deployed and running, we can move on to the webhook creation.")),(0,r.kt)(c,{mdxType:"TutorialSection"},(0,r.kt)("h2",{id:"3-create-a-webhook"},"3. Create a webhook"),(0,r.kt)("p",null,"Webhooks are one way that apps can send automated messages or information to other apps. In this case, we are going to create a webhook for an existing iModel events.")),(0,r.kt)(c,{subSection:!0,actions:[(0,r.kt)(y,{mdxType:"Title"},'Example HTTP request for "Create iModel events webhook" operation'),(0,r.kt)(w,{language:"http",code:"POST https://api.bentley.com/webhooks/imodels HTTP/1.1\nAuthorization: Bearer JWT_TOKEN\nContent-Type: application/json",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"31-request"},"3.1 Request"),(0,r.kt)("p",null,"A webhook for iModel events is created by sending a POST request to ",(0,r.kt)("a",{parentName:"p",href:"https://api.bentley.com/webhooks/imodels"},"https://api.bentley.com/webhooks/imodels"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header with valid Bearer access token is required.")),(0,r.kt)(c,{subSection:!0,actions:[(0,r.kt)(y,{mdxType:"Title"},"Example request body"),(0,r.kt)(w,{language:"json",code:'{\n  "imodelId":"IMODEL_ID",\n  "callbackUrl":"https://HOSTNAME/events",\n  "eventTypes":[\n    "NamedVersionCreatedEvent"\n  ],\n  "expirationDateTime":"2021-06-07T08:27:42Z"\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"32-request-body"},"3.2 Request body"),(0,r.kt)("p",null,"Webhook creation has 3 required properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"imodelId")," - related iModel ID of which events you want to receive."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"callbackUrl")," - a public endpoint of your application where you expect the event to be sent."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"eventTypes")," - a list of iModel event types you want to subscribe to."),(0,r.kt)("li",{parentName:"ul"},"expirationDateTime - ",(0,r.kt)("em",{parentName:"li"},"(optional)")," date and time when the webhook will not longer be active. If the value is not specified, webhook will expire in 30 days.")),(0,r.kt)("p",null,"For more information see the ",(0,r.kt)("a",{parentName:"p",href:"/apis/webhooks/operations/create-imodels-webhook"},"documentation"),"."),(0,r.kt)(f,{type:"informational",mdxType:"Alert"},'Don\'t forget to replace the "IMODEL_ID" placeholder value with an existing iModel ID and "HOSTNAME" placeholder value with your deployed application hostname.')),(0,r.kt)(c,{subSection:!0,actions:[(0,r.kt)(y,{mdxType:"Title"},'Example response "Location" header'),(0,r.kt)(w,{language:"http",code:"Location: https://api.bentley.com/webhooks/f6f3aff5-7e28-4874-a3ff-22dbc62d94c9",mdxType:"CodeBlock"}),(0,r.kt)(y,{mdxType:"Title"},"Example response result"),(0,r.kt)(w,{language:"json",code:'{\n  "webhook":{\n    "id": "b41adbb6-2ecc-4770-a626-1721dff5be1e",\n    "secret":"4eb25d308ef2a9722ffbd7a2b7e5026f9d1f2feaca5999611d4ef8692b1ad70d"\n  }\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"33-response"},"3.3 Response"),(0,r.kt)("p",null,"On the successful response you will get returned the webhook secret which will be needed later validating received events. The location of created webhook will be included in response ",(0,r.kt)("inlineCode",{parentName:"p"},"Location")," header value. Generally you would need to store both webhook location or ID and secret in your application storage in order to prepare for receiving events, but for this tutorial just use it to replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"const secret")," value in ",(0,r.kt)("inlineCode",{parentName:"p"},"function validateSignature")," from step 2.3."),(0,r.kt)(f,{type:"informational",mdxType:"Alert"},"Note that the webhook secret should not be shared with anyone and treated as a private key.")),(0,r.kt)(c,{mdxType:"TutorialSection"},(0,r.kt)("h2",{id:"4-trigger-imodel-event"},"4. Trigger iModel event"),(0,r.kt)("p",null,"Since we created the webhook specifically for ",(0,r.kt)("inlineCode",{parentName:"p"},"NamedVersionCreatedEvent")," event type, you will need to trigger this event manually. Use Get iModel Changesets ",(0,r.kt)("a",{parentName:"p",href:"/apis/imodels/operations/create-named-version"},"operation"),". For detailed explanation on how to create a named version see this ",(0,r.kt)("a",{parentName:"p",href:"/tutorials/create-named-version"},"tutorial"),"."),(0,r.kt)("p",null,"After you create a named version, webhook event will be triggered and sent to your application (callback URL) for further processing. If you have deployed your test application using Heroku, use ",(0,r.kt)("inlineCode",{parentName:"p"},"heroku logs --tail")," command to monitor your application logs and wait for the event to be captured and processed.")),(0,r.kt)(v,{mdxType:"ContinueLearningSection"},(0,r.kt)("h2",{id:"more-resources-that-you-may-like"},"More resources that you may like"),(0,r.kt)(b,{mdxType:"TileList"},(0,r.kt)(T,{title:"Workflow Automation API group documentation",href:"/api-groups/workflow-automation",description:"An overview and detailed Workflow Automation API group documentation.",mdxType:"ResourceTile"}),(0,r.kt)(T,{title:"Data Management API group documentation",href:"/api-groups/data-management",description:"An overview and detailed Data Management API group documentation.",mdxType:"ResourceTile"}))))}N.isMDXComponent=!0;var C=function(){return[{id:"introduction",level:2,title:"Introduction",children:[]},{id:"prerequisites",level:2,title:"Prerequisites",children:[]},{id:"1-set-up-your-environment",level:2,title:"1. Set up your environment",children:[{id:"11-required-materials",level:3,title:"1.1 Required materials",children:[]},{id:"12-suggested-materials",level:3,title:"1.2 Suggested materials",children:[]}]},{id:"2-create-your-application",level:2,title:"2. Create your application",children:[{id:"21-initialize-the-project",level:3,title:"2.1 Initialize the project",children:[]},{id:"22-create-express-server",level:3,title:"2.2 Create express server",children:[]},{id:"23-add-callback-validation-handler",level:3,title:"2.3 Add callback validation handler",children:[]},{id:"24-add-event-authorization",level:3,title:"2.4 Add event authorization",children:[]},{id:"25-define-data-models",level:3,title:"2.5 Define data models",children:[]},{id:"26-event-handling",level:3,title:"2.6 Event handling",children:[]},{id:"27-deploy",level:3,title:"2.7 Deploy",children:[]}]},{id:"3-create-a-webhook",level:2,title:"3. Create a webhook",children:[{id:"31-request",level:3,title:"3.1 Request",children:[]},{id:"32-request-body",level:3,title:"3.2 Request body",children:[]},{id:"33-response",level:3,title:"3.3 Response",children:[]}]},{id:"4-trigger-imodel-event",level:2,title:"4. Trigger iModel event",children:[]},{id:"more-resources-that-you-may-like",level:2,title:"More resources that you may like",children:[]}]}},14666:function(e,t,n){"use strict";n.r(t);var o=n(3905),a=n(1176),i=n(58822),r=n(83906),s=(n(67294),n(80989)),l=n(85893);n(14473),t.default=function(){var e={headline:r.Pu.title,navigationItems:(0,r.Jt)(),tutorialSteps:(0,l.jsx)(o.Zo,{components:i.d,children:(0,l.jsx)(r.ZP,{})})};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.d,{title:"".concat(r.Pu.title," - Tutorials | iTwin Platform")}),(0,l.jsx)(a.Z,{tutorial:e})]})}},21881:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorials/react-to-events-using-webhooks",function(){return n(14666)}])}},function(e){e.O(0,[3714,8670,9734,9102,8764,1706,4009,1610,6638,9774,2888,179],(function(){return t=21881,e(e.s=t);var t}));var t=e.O();_N_E=t}]);
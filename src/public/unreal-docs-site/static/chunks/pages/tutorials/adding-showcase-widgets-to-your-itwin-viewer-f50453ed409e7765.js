(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4379],{22544:function(e,t,n){"use strict";n.d(t,{Jt:function(){return T},Pu:function(){return l},ZP:function(){return y}});var a=n(36864),i=n(4730),s=n(67294),o=n(3905),r=["components"],l=(s.createElement,{title:"Adding showcase widgets to your iTwin Viewer",tile:{name:"Adding showcase widgets to your iTwin Viewer",description:"This tutorial takes widgets from the sample showcase and adds them into your iTwin Viewer using the `uiProviders` prop.",thumbnail:"/unreal-docs-site/static/images/view_attributes_ported_results.png",href:"/tutorials/adding-showcase-widgets-to-your-itwin-viewer/",durationInMinutes:30,relatedApiIds:["visualization"],showInFirstSteps:!0,firstStepsSequenceNumber:3}}),p=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},d=p("Introduction"),c=p("TutorialSection"),u=p("Title"),g=p("CodeBlock"),m=p("ContinueLearningSection"),w=p("TileList"),h=p("Tile"),k=p("ResourceTile"),v={metadata:l};function y(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(d,{skillLevel:"Basic",durationInMinutes:"30",summaryImageSrc:"/unreal-docs-site/static/images/adding-showcase-widgets-to-your-itwin-viewer-sample.gif",mdxType:"Introduction"},(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"This tutorial takes widgets from the sample showcase and adds them to your iTwin Viewer using the ",(0,o.kt)("inlineCode",{parentName:"p"},"uiProviders")," prop.")),(0,o.kt)(c,{mdxType:"TutorialSection"},(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"This tutorial assumes that you already have:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Explored the ",(0,o.kt)("a",{parentName:"li",href:"https://www.itwinjs.org/sample-showcase"},"Sample Showcase"),"."),(0,o.kt)("li",{parentName:"ul"},"Created your own iTwin Web Viewer based on the ",(0,o.kt)("a",{parentName:"li",href:"/tutorials/web-application-quick-start"},"Web Application Quick Start"),"."),(0,o.kt)("li",{parentName:"ul"},"Configured your iTwin Viewer with the House Model sample iModel.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Instructions to use this sample iModel can be found at the ",(0,o.kt)("a",{parentName:"li",href:"/tutorials/create-test-imodel-sample"},"create iModel sample tutorial"),"."))),(0,o.kt)("li",{parentName:"ul"},"Understand the concept of a ",(0,o.kt)("a",{parentName:"li",href:"https://www.itwinjs.org/reference/appui-react/uiprovider/uiitemsprovider/"},"UiItemsProvider")," and how to add widgets on a ",(0,o.kt)("a",{parentName:"li",href:"https://www.itwinjs.org/reference/appui-react/uiprovider/uiitemsprovider/"},"UiItemsProvider")," to an iTwin Viewer."),(0,o.kt)("li",{parentName:"ul"},"Completed the ",(0,o.kt)("a",{parentName:"li",href:"/tutorials/itwin-viewer-hello-world"},"\u201cCustomizing the iTwin Viewer\u201d")," tutorial."))),(0,o.kt)(c,{mdxType:"TutorialSection"},(0,o.kt)("h2",{id:"1-understanding-the-sample-showcase"},"1. Understanding the Sample Showcase"),(0,o.kt)("p",null,"We hope you have given the ",(0,o.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/sample-showcase"},"Sample Showcase")," a tour and enjoyed the many samples provided. You may want to use some of these samples in your own iTwin Viewer. To do so you first need to understand how the showcase works."),(0,o.kt)("p",null,"If we take a closer look at the files involved in each sample, notice they all follow the same pattern containing a few important files:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"[SampleName]App.tsx")," - Corresponds to ",(0,o.kt)("inlineCode",{parentName:"li"},"App.tsx")," in the iTwin Viewer template and provides the main ",(0,o.kt)("inlineCode",{parentName:"li"},"Viewer")," component."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"[SampleName]Widget.tsx")," - Defines the ",(0,o.kt)("inlineCode",{parentName:"li"},"UiItemsProvider")," that will be passed into prop ",(0,o.kt)("inlineCode",{parentName:"li"},"uiProviders")," for our sample widget component. This widget is the controller for our samples."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"[SampleName]Api.ts")," - Defines widget functionality that uses the iTwin.js API being showcased."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"[SampleName].scss")," - Defines the styles in our css classes used inside the widget.")),(0,o.kt)("p",null,"Given this pattern, it\u2019s simple to identify the parts required to bring our sample showcase to your iTwin Viewer. The component revolves around the ",(0,o.kt)("inlineCode",{parentName:"p"},"[SampleName]Widget.tsx")," file so we need to copy all the files associated with our custom widgets ",(0,o.kt)("inlineCode",{parentName:"p"},"UiItemsProvider")," and pass it in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Viewer")," component.")),(0,o.kt)(c,{mdxType:"TutorialSection"},(0,o.kt)("h2",{id:"2-example-using-a-sample"},"2. Example using a sample"),(0,o.kt)("p",null,"For this tutorial, we will be taking the widget from sample ",(0,o.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/sample-showcase/?group=Viewer&sample=view-attributes-sample&imodel=House+Sample"},"View Attributes")," and adding it into our iTwin Viewer.")),(0,o.kt)(c,{hasTitle:!1,actions:[(0,o.kt)(u,{mdxType:"Title"},"Lines you need to add in your iTwin Viewer in `App.tsx`"),(0,o.kt)(g,{language:"typescript",code:'... // Import the widget provider\nimport { ViewAttributesWidgetProvider } from "./ViewAttributesWidget";\n\n... // Pass the imported UiProvider into the uiProvider prop in the <Viewer /> component\n<Viewer\n  ...\n  uiProviders={[new ViewAttributesWidgetProvider()]}\n/>',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,o.kt)("p",null,"The two lines shown in the code snippet are the only lines you will need to add in your iTwin Viewer in ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx"),".")),(0,o.kt)(c,{hasTitle:!1,actions:[(0,o.kt)(u,{mdxType:"Title"},"ViewAttributes.scss"),(0,o.kt)(g,{language:"scss",code:".sample-options {\n    box-sizing: border-box;\n    width: 100%;\n    height: 100%;\n    padding: 8px;\n    display: grid;\n    row-gap: 16px;\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr min-content;\n    max-width: 1200px;\n    margin: auto;\n  \n    .sample-grid {\n      display: grid;\n      gap: 16px;\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n      grid-auto-rows: min-content;\n      align-content: start;\n    }\n  \n    .sample-control {\n      display: grid;\n      column-gap: 8px;\n      grid-template-columns: 30px 130px auto;\n      align-items: center;\n    }\n  \n    .instructions {\n      align-self: end;\n      justify-self: start;\n    }\n  }",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,o.kt)("p",null,"  We need to copy these three files to bring our widget over."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ViewAttributesApi.ts")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ViewAttributesWidget.tsx")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ViewAttributes.scss")))),(0,o.kt)(c,{hasTitle:!1,actions:[(0,o.kt)(u,{mdxType:"Title"},"ViewAttributesApi.ts"),(0,o.kt)(g,{language:"typescript",code:'import { RenderMode, ViewFlagsProperties } from "@itwin/core-common";\nimport { Viewport, ViewState3d } from "@itwin/core-frontend";\n\nexport type ViewFlag = keyof Pick<ViewFlagsProperties, "acsTriad" | "backgroundMap" | "grid" | "hiddenEdges" | "monochrome" | "visibleEdges" | "shadows">;\n\nexport interface AttrValues {\n  renderMode: RenderMode;\n  backgroundTransparency: number;\n  cameraOn: boolean;\n  skybox: boolean;\n  viewFlags: Record<ViewFlag, boolean>;\n}\n\n/** This class implements the interaction between the sample and the iTwin.js API.  No user interface. */\nexport class ViewAttributesApi {\n\n  public static settings: AttrValues = {\n    renderMode: RenderMode.SmoothShade,\n    backgroundTransparency: 0,\n    cameraOn: true,\n    skybox: true,\n    viewFlags: {\n      acsTriad: false,\n      backgroundMap: true,\n      grid: false,\n      hiddenEdges: false,\n      monochrome: false,\n      visibleEdges: false,\n      shadows: false,\n    },\n  };\n\n  public static getAttrValues(vp: Viewport): AttrValues {\n    return {\n      renderMode: vp.viewFlags.renderMode,\n      backgroundTransparency: ViewAttributesApi.getBackgroundTransparency(vp),\n      cameraOn: vp.isCameraOn,\n      skybox: ViewAttributesApi.isSkyboxOn(vp),\n      viewFlags: {\n        acsTriad: vp.viewFlags.acsTriad,\n        backgroundMap: vp.viewFlags.backgroundMap,\n        grid: vp.viewFlags.grid,\n        hiddenEdges: vp.viewFlags.hiddenEdges,\n        monochrome: vp.viewFlags.monochrome,\n        visibleEdges: vp.viewFlags.visibleEdges,\n        shadows: vp.viewFlags.shadows,\n      },\n    };\n  }\n\n  // Modify flag values using the Viewport API.\n  public static setViewFlag(vp: Viewport, flag: ViewFlag, on: boolean) {\n    vp.viewFlags = vp.viewFlags.with(flag, on);\n    vp.synchWithView();\n  }\n\n  // Query map background transparency using the Viewport API\n  public static getBackgroundTransparency(vp: Viewport) {\n    return vp.backgroundMapSettings.transparency === false ? 1 : vp.backgroundMapSettings.transparency;\n  }\n\n  // Modify map background transparency using the Viewport API\n  public static setBackgroundTransparency(vp: Viewport, transparency: number) {\n    const style = vp.backgroundMapSettings.clone({ transparency });\n    vp.displayStyle.backgroundMapSettings = style;\n    vp.synchWithView();\n  }\n\n  // Modify camera setting using the Viewport API.\n  public static setCameraOnOff(vp: Viewport, on: boolean) {\n    if (on)\n      vp.turnCameraOn();\n    else\n      (vp.view as ViewState3d).turnCameraOff();\n\n    vp.synchWithView();\n  }\n\n  // Query skybox setting using the Viewport API.\n  public static isSkyboxOn(vp: Viewport) {\n    if (vp.view.is3d()) {\n      const displayStyle = vp.view.getDisplayStyle3d();\n      return displayStyle.environment.displaySky;\n    }\n\n    return false;\n  }\n\n  // Modify skybox setting using the Viewport API.\n  public static setSkyboxOnOff(vp: Viewport, on: boolean) {\n    if (vp.view.is3d()) {\n      const style = vp.view.getDisplayStyle3d();\n      style.environment = style.environment.withDisplay({ sky: on });\n    }\n  }\n\n  // Query render model setting using the Viewport API.\n  public static getRenderModel(vp: Viewport): RenderMode {\n    return vp.viewFlags.renderMode;\n  }\n\n  // Modify render mode setting using the Viewport API.\n  public static setRenderMode(vp: Viewport, mode: RenderMode) {\n    const viewFlags = vp.viewFlags.override({ renderMode: mode });\n    vp.viewFlags = viewFlags;\n  }\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"}),(0,o.kt)(c,{hasTitle:!1,actions:[(0,o.kt)(u,{mdxType:"Title"},"ViewAttributesWidget.tsx"),(0,o.kt)(g,{language:"jsx",code:'import React from "react";\nimport { StagePanelLocation, StagePanelSection, UiItemsProvider, Widget, WidgetState  } from "@itwin/appui-react";\nimport { RenderMode } from "@itwin/core-common";\nimport { IModelApp } from "@itwin/core-frontend";\nimport { SvgHelpCircularHollow } from "@itwin/itwinui-icons-react";\nimport { Alert, IconButton, Select, Slider, Text, ToggleSwitch, Tooltip } from "@itwin/itwinui-react";\nimport { AttrValues, ViewAttributesApi, ViewFlag } from "./ViewAttributesApi";\nimport "./ViewAttributes.scss";\n\nexport const ViewAttributesWidget = () => {\n  const [attrValuesState, setAttrValuesState] = React.useState<AttrValues>(() => ViewAttributesApi.settings);\n\n  const onChangeRenderMode = (renderMode: RenderMode) => {\n    const vp = IModelApp.viewManager.selectedView;\n    if (vp) {\n      ViewAttributesApi.setRenderMode(vp, renderMode);\n      setAttrValuesState({ ...attrValuesState, renderMode });\n    }\n  };\n\n  // Handle changes to the skybox toggle.\n  const onChangeSkyboxToggle = (checked: boolean) => {\n    const vp = IModelApp.viewManager.selectedView;\n    if (vp) {\n      ViewAttributesApi.setSkyboxOnOff(vp, checked);\n    }\n  };\n\n  // Handle changes to the camera toggle.\n  const onChangeCameraToggle = (checked: boolean) => {\n    const vp = IModelApp.viewManager.selectedView;\n    if (vp) {\n      ViewAttributesApi.setCameraOnOff(vp, checked);\n    }\n  };\n\n  // Handle changes to a view flag toggle.\n  const onChangeViewFlagToggle = (flag: ViewFlag, checked: boolean) => {\n    const vp = IModelApp.viewManager.selectedView;\n    if (vp) {\n      ViewAttributesApi.setViewFlag(vp, flag, checked);\n      attrValuesState.viewFlags = { ...attrValuesState.viewFlags, [flag]: checked };\n      setAttrValuesState({ ...attrValuesState });\n    }\n  };\n\n  // Handle changes to a view flag toggle.\n  const onMapTransparencyChange = (num: number) => {\n    const vp = IModelApp.viewManager.selectedView;\n    if (vp) {\n      ViewAttributesApi.setBackgroundTransparency(vp, num);\n      setAttrValuesState({ ...attrValuesState, backgroundTransparency: num });\n    }\n  };\n\n  const Help = ({ text }: { text: string }) => (\n    <Tooltip content={text}>\n      <IconButton styleType="borderless" size="small"><SvgHelpCircularHollow /></IconButton>\n    </Tooltip>\n  );\n\n  return (\n    <div className="sample-options">\n      <div className="sample-grid">\n        <div className="sample-control">\n          <Help text="Controls the render mode."></Help>\n          <Text>Render Mode</Text>\n          <Select\n            size="small"\n            value={attrValuesState.renderMode}\n            options={renderModelOptions}\n            onChange={onChangeRenderMode} />\n        </div>\n        <div className="sample-control">\n          <Help text="Click to see the iModel on a map. Click again to disable map. Does not apply if the selected iModel is not geolocated."></Help>\n          <Text>Background Map</Text>\n          <ToggleSwitch checked={attrValuesState.viewFlags.backgroundMap} onChange={() => onChangeViewFlagToggle("backgroundMap", !attrValuesState.viewFlags.backgroundMap)} />\n        </div>\n        <div className="sample-control">\n          <Help text="Adjusting the slider changes the transparency of the background map. Does not apply if map is not currently being displayed."></Help>\n          <Text>Map Transparency</Text>\n          <Slider min={0} max={1} step={0.01} values={[attrValuesState.backgroundTransparency]} onChange={(values) => onMapTransparencyChange(values[0])} disabled={!attrValuesState.viewFlags.backgroundMap}></Slider>\n        </div>\n        <div className="sample-control">\n          <Help text="Click to see a visualization of the active coordinate system."></Help>\n          <Text>ACS</Text>\n          <ToggleSwitch checked={attrValuesState.viewFlags.acsTriad} onChange={() => onChangeViewFlagToggle("acsTriad", !attrValuesState.viewFlags.acsTriad)} />\n        </div>\n        <div className="sample-control">\n          <Help text="Click for perspective view. Click again for orthographic view."></Help>\n          <Text>Camera</Text>\n          <ToggleSwitch checked={attrValuesState.cameraOn} onChange={() => onChangeCameraToggle(!attrValuesState.cameraOn)} />\n        </div>\n        <div className="sample-control">\n          <Help text="Toggle grid view."></Help>\n          <Text>Grid</Text>\n          <ToggleSwitch checked={attrValuesState.viewFlags.grid} onChange={() => onChangeViewFlagToggle("grid", !attrValuesState.viewFlags.grid)} />\n        </div>\n        <div className="sample-control">\n          <Help text="Click to disable colors."></Help>\n          <Text>Monochrome</Text>\n          <ToggleSwitch checked={attrValuesState.viewFlags.monochrome} onChange={() => onChangeViewFlagToggle("monochrome", !attrValuesState.viewFlags.monochrome)} />\n        </div>\n        <div className="sample-control">\n          <Help text="Click to see shadows."></Help>\n          <Text>Shadows</Text>\n          <ToggleSwitch checked={attrValuesState.viewFlags.shadows} onChange={() => onChangeViewFlagToggle("shadows", !attrValuesState.viewFlags.shadows)} />\n        </div>\n        <div className="sample-control">\n          <Help text="Click to see the sky box."></Help>\n          <Text>Sky box</Text>\n          <ToggleSwitch checked={attrValuesState.skybox} onChange={() => onChangeSkyboxToggle(!attrValuesState.skybox)} />\n        </div>\n        <div className="sample-control">\n          <Help text="Click to disable visible edges. Only applies to smooth shade render mode."></Help>\n          <Text>Visible Edges</Text>\n          <ToggleSwitch checked={attrValuesState.viewFlags.visibleEdges} onChange={() => onChangeViewFlagToggle("visibleEdges", !attrValuesState.viewFlags.visibleEdges)} />\n        </div>\n        <div className="sample-control">\n          <Help text="Click to see hidden edges.  Does not apply to wireframe. For smooth shade render mode, does not apply when visible edges are off."></Help>\n          <Text>Hidden Edges</Text>\n          <ToggleSwitch\n            checked={attrValuesState.viewFlags.hiddenEdges}\n            onChange={() => onChangeViewFlagToggle("hiddenEdges", !attrValuesState.viewFlags.hiddenEdges)}\n            disabled={attrValuesState.renderMode === RenderMode.Wireframe || (attrValuesState.renderMode === RenderMode.SmoothShade && !attrValuesState.viewFlags.visibleEdges)} />\n        </div>\n      </div>\n      <Alert type="informational" className="instructions">\n        Use the controls to change the view attributes.\n      </Alert>\n    </div>\n  );\n};\n\nconst renderModelOptions = [\n  { value: RenderMode.HiddenLine, label: "Hidden Line" },\n  { value: RenderMode.SmoothShade, label: "Smooth Shade" },\n  { value: RenderMode.SolidFill, label: "Solid Fill" },\n  { value: RenderMode.Wireframe, label: "Wireframe" },\n];\n\nexport class ViewAttributesWidgetProvider implements UiItemsProvider {\n  public readonly id: string = "ViewAttributesWidgetProvider";\n\n  public provideWidgets(_stageId: string, _stageUsage: string, location: StagePanelLocation, _section?: StagePanelSection): ReadonlyArray<Widget> {\n    const widgets: Widget[] = [];\n    if (location === StagePanelLocation.Right) {\n      widgets.push(\n        {\n          id: "ViewAttributesWidget",\n          label: "View Attributes Controls",\n          defaultState: WidgetState.Open,\n          content: <ViewAttributesWidget />,\n        }\n      );\n    }\n    return widgets;\n  }\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"}),(0,o.kt)(c,{hasTitle:!1,mdxType:"TutorialSection"},(0,o.kt)("p",null,"For this tutorial, these files will be placed directly in our src directory so your file structure should look similar to this:"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"/unreal-docs-site/static/images/sample_viewer_port_to_itwin_viewer.png",alt:"ViewAttributesStructure"})),(0,o.kt)("p",null,"Running our iTwin Viewer, notice the same fully functional widget from the sample showcase in your iTwin Viewer."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"/unreal-docs-site/static/images/view_attributes_ported_results.png",alt:"ViewAttributesResults"})),(0,o.kt)("p",null,"Feel free to customize these widgets to your liking.")),(0,o.kt)(c,{mdxType:"TutorialSection"},(0,o.kt)("h2",{id:"3-multiple-ways-to-extend-uiproviders"},"3. Multiple ways to extend uiProviders"),(0,o.kt)("p",null,"If you already have a ",(0,o.kt)("inlineCode",{parentName:"p"},"uiProviders")," prop passed in or would like to add more widgets from the sample showcase, the ",(0,o.kt)("inlineCode",{parentName:"p"},"uiProviders")," prop takes in an array of providers. Extending the widget is as simple as appending to your array.")),(0,o.kt)(c,{hasTitle:!1,mdxType:"TutorialSection"},(0,o.kt)("p",null,"You can add to the uiProviders const variable, i.e.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> uiProviders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">ViewAttributesWidgetProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HyerModelingWidgetProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span>\n'}})),(0,o.kt)("p",null,"or ignore the variable completely and pass the array in directly:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Viewer</span></span>\n  <span class="token attr-name">iTwinId</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>iTwinId<span class="token punctuation">}</span></span>\n  <span class="token attr-name">iModelId</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>iModelId<span class="token punctuation">}</span></span>\n  <span class="token attr-name">authClient</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>authClient<span class="token punctuation">}</span></span>\n  <span class="token attr-name">viewCreatorOptions</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>viewCreatorOptions<span class="token punctuation">}</span></span>\n  <span class="token attr-name">enablePerformanceMonitors</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span></span> <span class="token comment">// see description in the README (https://www.npmjs.com/package/@itwin/web-viewer-react)</span>\n  <span class="token attr-name">onIModelAppInit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onIModelAppInit<span class="token punctuation">}</span></span>\n  <span class="token attr-name">uiProviders</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">ViewAttributesWidgetProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HyperModelingWidgetProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n'}}))),(0,o.kt)(c,{hasTitle:!1,mdxType:"TutorialSection"},(0,o.kt)("p",null,"Just remember to copy corresponding files to your source.")),(0,o.kt)(c,{hasTitle:!1,actions:[(0,o.kt)(u,{mdxType:"Title"},"Using an existing UiItemsProvider instead of passing in multiple new ones"),(0,o.kt)(g,{language:"jsx",code:"export class MyCustomUiProvider extends UiItemsProvider {\n  ... // Your custom code\n  public provideWidgets(\n    _stageId: string,\n    _stageUsage: string,\n    location: StagePanelLocation,\n    _section?: StagePanelSection\n    ): ReadonlyArray<Widget> {\n      const widgets: Widget[] = [];\n\n      if (location === StagePanelLocation.Right) {\n        widgets.push({\n          id: 'ViewAttributesWidget',\n          label: 'View Attributes Controls',\n          defaultState: WidgetState.Floating,\n          content: <ViewAttributesWidget />, // Don't forget to copy code for the ViewAttributesWidget\n        });\n      }\n  }\n}",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,o.kt)("p",null,"If you would like to use an existing UiItemsProvider instead of passing in multiple new ones, just add the widget in your ",(0,o.kt)("inlineCode",{parentName:"p"},"provideWigets()")," function along with copying and pasting the react component to your desired location.")),(0,o.kt)(c,{hasTitle:!1,mdxType:"TutorialSection"},(0,o.kt)("p",null,"As you can see, extending your iTwin Viewer with multiple widgets is simple.\nIt\u2019s completely up to you on how you want to structure your directories and components. Feel free to extend as many widgets as you like.")),(0,o.kt)(m,{mdxType:"ContinueLearningSection"},(0,o.kt)("h2",{id:"continue-learning"},"Continue learning"),(0,o.kt)(w,{mdxType:"TileList"},(0,o.kt)(h,{name:"Start building a Viewer App",thumbnail:"/unreal-docs-site/static/images/retail-tutorial-sample-small.png",description:"This quick start is intended to help you get started with using iTwin Platform visualization components. By the end of this walk-through, you will be able to build and run a web application for viewing an infrastructure digital twin (iTwin).",href:"/tutorials/web-application-quick-start/",mdxType:"Tile"}),(0,o.kt)(h,{name:'Customizing the iTwin Viewer - "The Basics"',thumbnail:"/unreal-docs-site/static/images/itwin-viewer-hello-world-sample-small.png",description:"This tutorial will take you through the first steps of customizing your iTwin Web Viewer. First you will learn how to add a new user interface component. Later you will customize that component to change the background color of your viewer.",href:"/tutorials/itwin-viewer-hello-world",mdxType:"Tile"}),(0,o.kt)(h,{name:"Adding view decorations to your iTwin Viewer",thumbnail:"/unreal-docs-site/static/images/adding-decorators-and-markers.png",description:"This tutorial guides you through customizing your iTwin Viewer application by displaying application-specific graphics, called View Decorations.",href:"/tutorials/adding-decorators-and-markers/",mdxType:"Tile"})),(0,o.kt)("h2",{id:"more-resources-that-you-may-like"},"More resources that you may like"),(0,o.kt)(w,{mdxType:"TileList"},(0,o.kt)(k,{title:"Create a test iModel from a Bentley provided sample",href:"/tutorials/create-test-imodel-sample",description:"The quickest way to get access to a cloud hosted iModel is by creating an iModel seeded with Bentley provided sample data.",mdxType:"ResourceTile"}),(0,o.kt)(k,{title:"Sample House Model",href:"/tutorials/create-test-imodel-sample/#house-sample",description:"Bentley provided sample of a House for test iModel creation.",mdxType:"ResourceTile"}),(0,o.kt)(k,{title:"UI Provider",href:"https://www.itwinjs.org/reference/ui-abstract/uiitemsprovider/uiitemsprovider/",description:"Describes interface of objects that want to provide UI component to the running IModelApp.",isExternal:!0,mdxType:"ResourceTile"}),(0,o.kt)(k,{title:"View Attributes Sample",href:"https://www.itwinjs.org/sample-showcase/?group=Viewer&sample=view-attributes-sample&imodel=House+Sample",description:"This sample demonstrates the API used to control view attributes.",isExternal:!0,mdxType:"ResourceTile"}),(0,o.kt)(k,{title:"Visit the iTwin Sample Showcase",href:"https://www.itwinjs.org/sample-showcase/",description:"The iTwin Sample Showcase provides many samples demonstrating options for customizing the iTwin viewer.",isExternal:!0,mdxType:"ResourceTile"}))))}y.isMDXComponent=!0;var T=function(){return[{id:"introduction",level:2,title:"Introduction",children:[]},{id:"prerequisites",level:2,title:"Prerequisites",children:[]},{id:"1-understanding-the-sample-showcase",level:2,title:"1. Understanding the Sample Showcase",children:[]},{id:"2-example-using-a-sample",level:2,title:"2. Example using a sample",children:[]},{id:"3-multiple-ways-to-extend-uiproviders",level:2,title:"3. Multiple ways to extend uiProviders",children:[]},{id:"continue-learning",level:2,title:"Continue learning",children:[]},{id:"more-resources-that-you-may-like",level:2,title:"More resources that you may like",children:[]}]}},29838:function(e,t,n){"use strict";n.r(t);var a=n(3905),i=n(1176),s=n(58822),o=n(22544),r=(n(67294),n(80989)),l=n(85893);n(14473),t.default=function(){var e={headline:o.Pu.title,navigationItems:(0,o.Jt)(),tutorialSteps:(0,l.jsx)(a.Zo,{components:s.d,children:(0,l.jsx)(o.ZP,{})})};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(r.d,{title:"".concat(o.Pu.title," - Tutorials | iTwin Platform")}),(0,l.jsx)(i.Z,{tutorial:e})]})}},21181:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorials/adding-showcase-widgets-to-your-itwin-viewer",function(){return n(29838)}])}},function(e){e.O(0,[3714,8670,9734,9102,8764,1706,4009,1610,6638,9774,2888,179],(function(){return t=21181,e(e.s=t);var t}));var t=e.O();_N_E=t}]);
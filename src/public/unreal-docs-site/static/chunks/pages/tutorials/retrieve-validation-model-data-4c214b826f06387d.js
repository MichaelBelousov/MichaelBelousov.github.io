(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[476],{88774:function(e,t,n){"use strict";n.d(t,{Jt:function(){return C},Pu:function(){return s},ZP:function(){return k}});var o=n(36864),i=n(4730),a=n(67294),l=n(3905),r=["components"],s=(a.createElement,{title:"Retrieve Validation Model Data",tile:{name:"Retrieve Validation Model Data",description:"Walk-through of retrieving and understanding basic model information needed for various validation functions.",href:"/tutorials/retrieve-validation-model-data/",thumbnail:"/unreal-docs-site/static/images/ClashDetectionSample.png",durationInMinutes:20,relatedApiIds:["clashdetection","validation/propertyValue"]}}),d=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",t)}},c=d("Introduction"),p=d("TutorialSection"),m=d("Alert"),u=d("Title"),h=d("CodeBlock"),y=d("ContinueLearningSection"),g=d("TileList"),T=d("ResourceTile"),f={metadata:s};function k(e){var t=e.components,n=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,o.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(c,{skillLevel:"Basic",durationInMinutes:"20",mdxType:"Introduction"},(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"Model validation functions are used to check a model you\u2019ve created to make sure everything is as expected. In the case of property validation, this means making sure element properties fit specific criteria. In the case of clash detection, this means certain elements are not touching or are within a certain range of each other.")),(0,l.kt)(p,{mdxType:"TutorialSection"},(0,l.kt)("h2",{id:"1-optional-create-a-test-itwin-and-imodel-for-testing"},"1. (Optional) Create a Test iTwin and iModel for testing"),(0,l.kt)("p",null,"Follow the steps listed ",(0,l.kt)("a",{parentName:"p",href:"/tutorials/create-test-imodel-sample/"},"here")),(0,l.kt)("p",null,"You will be redirected to the ",(0,l.kt)("inlineCode",{parentName:"p"},'"My iTwins - iModel Home"')," page. Click the ",(0,l.kt)("inlineCode",{parentName:"p"},'"Copy IDs"')," button in the top right. The iTwin ID (also referred to as the project ID) and the iModel ID will be copied to the clipboard. Both of these IDs will be used frequently throughout validation API calls.")),(0,l.kt)(p,{mdxType:"TutorialSection"},(0,l.kt)("h2",{id:"2-get-a-token"},"2. Get a token"),(0,l.kt)("p",null,"To make API requests, a user token is needed. There are several ways to get it."),(0,l.kt)("h3",{id:"implement-authorization-code-flow-in-the-application"},"Implement Authorization Code Flow in the application"),(0,l.kt)("p",null,"Follow this ",(0,l.kt)("a",{parentName:"p",href:"/apis/overview/authorization/"},"article")," to implement Authorization code workflow in your application. You will need to include the scopes clashdetection:read and clashdetection:modify."),(0,l.kt)("h3",{id:"grab-a-user-token-from-the-api-reference-try-it-out-section"},"Grab a user token from the API reference \u201cTry it out\u201d Section"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Go ",(0,l.kt)("a",{parentName:"li",href:"/apis/clash-detection/operations/create-clashdetection-tests/"},"here")),(0,l.kt)("li",{parentName:"ol"},"Click ",(0,l.kt)("inlineCode",{parentName:"li"},'"Try it out"')," button."),(0,l.kt)("li",{parentName:"ol"},"On Authorization section select ",(0,l.kt)("inlineCode",{parentName:"li"},'"AuthorizationCode"'),"."),(0,l.kt)("li",{parentName:"ol"},"After popup closes Authorization header with your user token value should be visible."),(0,l.kt)("li",{parentName:"ol"},"Save user token value for this tutorial.")),(0,l.kt)(m,{type:"informational",mdxType:"Alert"},"Use the user token to replace JWT_TOKEN dynamic parameter in the next steps.")),(0,l.kt)(p,{actions:[(0,l.kt)(u,{mdxType:"Title"},"Extraction Request Syntax"),(0,l.kt)(h,{language:"http",code:"POST https://api.bentley.com/clashdetection/modelsAndCategories/imodels/00000000-0000-0000-0000-000000000000 HTTP/1.1",mdxType:"CodeBlock"}),(0,l.kt)(u,{mdxType:"Title"},"Request Headers"),(0,l.kt)(h,{language:"http",code:"Accept: application/vnd.bentley.itwin-platform.v1+json\nAuthorization: Bearer JWT_TOKEN",mdxType:"CodeBlock"}),(0,l.kt)(u,{mdxType:"Title"},"Request Body"),(0,l.kt)(h,{language:"json",code:'{\n  "projectId": "00000000-0000-0000-0000-000000000000"\n}',mdxType:"CodeBlock"}),(0,l.kt)(u,{mdxType:"Title"},"Retrieval Request Syntax"),(0,l.kt)(h,{language:"http",code:"GET https://api.bentley.com/clashdetection/modelsAndCategories/imodels/00000000-0000-0000-0000-000000000000?projectId=00000000-0000-0000-0000-000000000000 HTTP/1.1",mdxType:"CodeBlock"}),(0,l.kt)(u,{mdxType:"Title"},"Request Headers"),(0,l.kt)(h,{language:"http",code:"Accept: application/vnd.bentley.itwin-platform.v1+json\nAuthorization: Bearer JWT_TOKEN",mdxType:"CodeBlock"}),(0,l.kt)(u,{mdxType:"Title"},"Response Body"),(0,l.kt)(h,{language:"json",code:'{\n  "status":"available",\n  "models":[\n    {\n      "id":"0x21",\n      "displayName":"ProcessPhysicalModel"\n    }\n  ],\n  "categories":[\n    {\n      "id":"0x20000000002",\n      "displayName":"Uncategorized"\n    },\n    {\n      "id":"0x30000000048",\n      "displayName":"PID LineStyle Default"\n    },\n    {\n      "id":"0x3000000004a",\n      "displayName":"Border"\n    },\n    {\n      "id":"0x4000000000d",\n      "displayName":"Tag-Category"\n    },\n    {\n      "id":"0x40000000e71",\n      "displayName":"Structure"\n    }\n  ]\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,l.kt)("h2",{id:"3-retrieving-models-and-categories"},"3. Retrieving Models and Categories"),(0,l.kt)("p",null,"For creating any Clash Detection test, you will need a list of the models or categories you wish to check for clashing elements."),(0,l.kt)("p",null,"There are two ways to retrieve these:"),(0,l.kt)("h3",{id:"31-extractionretrieval-request-apis"},"3.1 Extraction/Retrieval Request APIs"),(0,l.kt)("p",null,"First, you can send an HTTP request to ",(0,l.kt)("inlineCode",{parentName:"p"},"POST https://api.bentley.com/clashdetection/modelsAndCategories/imodels/{iModelId}")," using your iModel ID in place of {iModelId}. If model information has not previously been extracted for the iModel, an agent will be started to process the request. A status of 202 is returned if the agent was successfully started."),(0,l.kt)("p",null,"Next, you can repeat calls to ",(0,l.kt)("inlineCode",{parentName:"p"},"GET https://api.bentley.com//clashdetection/modelsAndCategories/imodels{iModelId}")," until a status of ",(0,l.kt)("inlineCode",{parentName:"p"},"available")," is returned with the response."),(0,l.kt)("p",null,"The response will include a complete list of models and categories, with their respective ids and display names.")),(0,l.kt)(p,{actions:[(0,l.kt)(u,{mdxType:"Title"},"Sample Category List widget and provider"),(0,l.kt)(h,{language:"typescript",code:'import { useCallback, useEffect, useMemo, useState } from "react";\nimport { useActiveIModelConnection } from "@itwin/appui-react";\nimport { AbstractWidgetProps, StagePanelLocation, StagePanelSection, UiItemsProvider, WidgetState } from "@itwin/appui-abstract";\nimport { QueryRowFormat } from "@itwin/core-common";\nimport { Table } from "@itwin/itwinui-react";\nexport interface CategoryInfo {\n  id: string;\n  name: string;\n};\nexport type CreateTypeFromInterface<Interface> = {\n  [Property in keyof Interface]: Interface[Property];\n};\nexport type CategoryInfoType = CreateTypeFromInterface<CategoryInfo>;\nconst CategoryListWidget = () => {\n  const [availableCategories, setAvailableCategories] = useState<CategoryInfoType[]>([]);\n  const iModel = useActiveIModelConnection();\n  // Example for querying list of all categories in the iModel\n  const queryCategories = useCallback(async (): Promise<CategoryInfo[]> => {\n    const categories: CategoryInfo[] = [];\n    // Query for list of unique category ids in iModel\n    const selectUsedSpatialCategoryIds = "SELECT DISTINCT Category.Id as id from BisCore.GeometricElement3d WHERE Category.Id IN (SELECT ECInstanceId from BisCore.SpatialCategory)";\n    // Use category ids to query for label and code values\n    const ecsql = "SELECT ECInstanceId as id, UserLabel as label, CodeValue as code FROM BisCore.SpatialCategory WHERE ECInstanceId IN (" + selectUsedSpatialCategoryIds + ")";\n    const rowIterator = iModel?.query(ecsql, undefined, { rowFormat: QueryRowFormat.UseJsPropertyNames });\n    if (rowIterator) {\n        for await (const row of rowIterator) {\n        categories.push({ id: row.id, name: row.label ?? row.code });\n      }\n    }  \n    return categories;\n  }, [iModel]);\n  useEffect(() => {\n    queryCategories()\n      .then((categoryInfos: CategoryInfo[]) => {\n        setAvailableCategories(categoryInfos);\n      })\n      .catch((_e) => {\n        setAvailableCategories([]);\n      });\n  }, [queryCategories]);\n  const columnDefinition = useMemo(() => [\n    {\n      Header: "Table",\n      columns: [\n        {\n          id: "categoryId",\n          Header: "Id",\n          accessor: "id",\n        },\n        {\n          id: "categoryName",\n          Header: "Name",\n          accessor: "name",\n        },\n      ],\n    },\n  ], []);\n  return (\n    <Table\n      data={availableCategories}\n      columns={columnDefinition}\n      emptyTableContent={"No data"}\n      density="extra-condensed"\n      style={{ height: "100%" }} />\n  );\n};\nexport class CategoryListWidgetProvider implements UiItemsProvider {\n  public readonly id: string = "CategoryListWidgetProvider";\n  public provideWidgets(_stageId: string, _stageUsage: string, location: StagePanelLocation, _section?: StagePanelSection): ReadonlyArray<AbstractWidgetProps> {\n    const widgets: AbstractWidgetProps[] = [];\n    if (location === StagePanelLocation.Bottom && _section === StagePanelSection.Start) {\n      widgets.push(\n        {\n          id: "CategorListWidget",\n          label: "Category List",\n          defaultState: WidgetState.Open,\n          getWidgetContent: () => <CategoryListWidget />,\n        }\n      );\n    }\n    return widgets;\n  }\n}',mdxType:"CodeBlock"}),(0,l.kt)(u,{mdxType:"Title"},"Sample Model List widget and provider"),(0,l.kt)(h,{language:"typescript",code:'import { useCallback, useEffect, useMemo, useState } from "react";\nimport { AbstractWidgetProps, StagePanelLocation, StagePanelSection, UiItemsProvider, WidgetState } from "@itwin/appui-abstract";\nimport { useActiveIModelConnection } from "@itwin/appui-react";\nimport { Table } from "@itwin/itwinui-react";\nimport type { GeometricModel3dProps, ModelQueryParams } from "@itwin/core-common";\nexport type CreateTypeFromInterface<Interface> = {\n  [Property in keyof Interface]: Interface[Property];\n};\nexport interface ModelInfo {\n  id: string;\n  name: string;\n}\nexport type ModelInfoType = CreateTypeFromInterface<ModelInfo>;\nconst ModelListWidget = () => {\n  const [availableModels, setAvailableModels] = useState<ModelInfoType[]>([]);\n  const iModel = useActiveIModelConnection();\n  // Example for querying list of all 3D models in the iModel\n  const queryModels = useCallback(async (): Promise<ModelInfo[]> => {\n    const queryParams: ModelQueryParams = {\n      from: "BisCore.GeometricModel3d",\n      wantPrivate: false,\n    };\n    const modelProps = await iModel?.models.queryProps(queryParams) ?? [];\n    return modelProps\n      .map(({ id, name }: GeometricModel3dProps) => ({ id, name }))\n      .filter(({ id }) => id) as ModelInfo[];\n  }, [iModel]);\n  useEffect(() => {\n    queryModels()\n      .then((modelInfos: ModelInfo[]) => {\n        setAvailableModels(modelInfos);\n      })\n      .catch((_e) => {\n        setAvailableModels([]);\n      });\n  }, [queryModels]);\n  const columnDefinition = useMemo(() => [\n    {\n      Header: "Table",\n      columns: [\n        {\n          id: "id",\n          Header: "Id",\n          accessor: "id",\n        },\n        {\n          id: "modelName",\n          Header: "Name",\n          accessor: "name",\n        },\n      ],\n    },\n  ], []);\n  return (\n    <Table\n      data={availableModels}\n      columns={columnDefinition}\n      emptyTableContent={"No data"}\n      density="extra-condensed"\n      style={{ height: "100%" }} />\n  );\n};\nexport class ModelListWidgetProvider implements UiItemsProvider {\n  public readonly id: string = "ModelListWidgetProvider";\n  public provideWidgets(_stageId: string, _stageUsage: string, location: StagePanelLocation, _section?: StagePanelSection): ReadonlyArray<AbstractWidgetProps> {\n    const widgets: AbstractWidgetProps[] = [];\n    if (location === StagePanelLocation.Bottom && _section === StagePanelSection.Start) {\n      widgets.push(\n        {\n          id: "ModelListWidget",\n          label: "Model List",\n          defaultState: WidgetState.Open,\n          getWidgetContent: () => <ModelListWidget />,\n        }\n      );\n    }\n    return widgets;\n  }\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,l.kt)("h3",{id:"32-direct-imodel-query"},"3.2 Direct iModel Query"),(0,l.kt)("p",null,"For applications with access to an iModel, you can directly query for the list of models and categories."),(0,l.kt)("h4",{id:"321-creating-a-sample-app"},"3.2.1 Creating a Sample App"),(0,l.kt)("p",null,"To assist you with implementing this, we have included two sample widgets on the right which can be dropped into an iTwin viewer app."),(0,l.kt)(m,{type:"informational",mdxType:"Alert"},"For help with creating an iTwin viewer app, see"," ",(0,l.kt)("a",{style:{textDecoration:"underline"},href:"https://developer.bentley.com/tutorials/web-application-quick-start/"},"iTwin Viewer Quick Start"),"."),(0,l.kt)("p",null,"Once you have a sample app ready to test with, you can create a couple new .tsx files called ",(0,l.kt)("inlineCode",{parentName:"p"},"CategoryListWidget.tsx")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"ModelListWidget.tsx")," and copy the sample code into them.")),(0,l.kt)(p,{actions:[(0,l.kt)(u,{mdxType:"Title"},"Sample imports for widget providers"),(0,l.kt)(h,{language:"typescript",code:'import { CategoryListWidgetProvider } from "./CategoryListWidget";\nimport { ModelListWidgetProvider } from "./ModelListWidget";',mdxType:"CodeBlock"}),(0,l.kt)(u,{mdxType:"Title"},"Sample for adding the CategoryListWidgetProvider and ModelListWidgetProvider to your iTwin viewer app."),(0,l.kt)(h,{language:"jsx",code:'<Viewer\n  iTwinId={iTwinId ?? ""}\n  iModelId={iModelId ?? ""}\n  authClient={authClient}\n  onIModelAppInit={onIModelAppInit}\n  uiProviders={[\n    new CategoryListWidgetProvider(),\n    new ModelListWidgetProvider(),\n  ]}\n/>',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,l.kt)("h4",{id:"322-adding-the-widgets-to-the-application"},"3.2.2 Adding the widgets to the application"),(0,l.kt)("p",null,"Once you have the viewer app ready with the sample widgets copied in, you can get them hooked up by adding the provider names to the ",(0,l.kt)("inlineCode",{parentName:"p"},"uiProviders")," property of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Viewer")," react component (as shown on the right)."),(0,l.kt)(m,{type:"informational",mdxType:"Alert"},"If you want a more in-depth explanation on the usage of providers, see"," ",(0,l.kt)("a",{style:{textDecoration:"underline"},href:"/tutorials/itwin-viewer-hello-world"},"iTwin Viewer Hello World tutorial"),".")),(0,l.kt)(p,{actions:[(0,l.kt)(u,{mdxType:"Title"},"Extraction Request Syntax"),(0,l.kt)(h,{language:"http",code:"POST https://api.bentley.com/clashdetection/schemas/imodels/00000000-0000-0000-0000-000000000000 HTTP/1.1",mdxType:"CodeBlock"}),(0,l.kt)(u,{mdxType:"Title"},"Request Headers"),(0,l.kt)(h,{language:"http",code:"Accept: application/vnd.bentley.itwin-platform.v1+json\nAuthorization: Bearer JWT_TOKEN",mdxType:"CodeBlock"}),(0,l.kt)(u,{mdxType:"Title"},"Request Body"),(0,l.kt)(h,{language:"json",code:'{\n  "projectId": "00000000-0000-0000-0000-000000000000"\n}',mdxType:"CodeBlock"}),(0,l.kt)(u,{mdxType:"Title"},"Retrieval Request Syntax"),(0,l.kt)(h,{language:"http",code:"GET https://api.bentley.com/clashdetection/schemas/imodels/00000000-0000-0000-0000-000000000000?projectId=00000000-0000-0000-0000-000000000000 HTTP/1.1",mdxType:"CodeBlock"}),(0,l.kt)(u,{mdxType:"Title"},"Request Headers"),(0,l.kt)(h,{language:"http",code:"Accept: application/vnd.bentley.itwin-platform.v1+json\nAuthorization: Bearer JWT_TOKEN",mdxType:"CodeBlock"}),(0,l.kt)(u,{mdxType:"Title"},"Response Body"),(0,l.kt)(h,{language:"json",code:'{\n  "schema":[\n    {\n      "name":"ProcessPhysical",\n      "label":null,\n      "entityClass":[\n        {\n          "name":"PIPING_COMPONENT",\n          "label":"Piping Component",\n          "properties":[\n            {\n              "name":"COMPONENT_NAME",\n              "label":"Component Name"\n            },\n            {\n              "name":"STATE",\n              "label":"Component State"\n            },\n            {\n              "name":"LENGTH_EFFECTIVE",\n              "label":"Length Effective"\n            },\n            {\n              "name":"DESIGN_LENGTH_CENTER_TO_BRANCH_END_EFFECTIVE",\n              "label":"Design Length Center To Branch End Effective"\n            },\n            {\n              "name":"DESIGN_LENGTH_CENTER_TO_OUTLET_END_EFFECTIVE",\n              "label":"Design Length Center To Outlet End Effective"\n            },\n            {\n              "name":"DESIGN_LENGTH_CENTER_TO_RUN_END_EFFECTIVE",\n              "label":"Design Length Center To Run End Effective"\n            },\n            {\n              "name":"WALL_THICKNESS",\n              "label":"Wall Thickness"\n            },\n            {\n              "name":"UPDATE_GRAPHICS",\n              "label":"Update Graphics"\n            },\n            {\n              "name":"NOMINAL_DIAMETER_RUN_END",\n              "label":"Nominal Diameter Run End"\n            },\n            {\n              "name":"Geometry",\n              "label":"Element Geometry"\n            },\n            {\n              "name":"SPOOL_ID",\n              "label":"Spool Id"\n            },\n            {\n              "name":"SPOOL_NUMBER",\n              "label":"Spool Number"\n            },\n            {\n              "name":"OPTION_CODE",\n              "label":"Option Code"\n            },\n            {\n              "name":"NOTES",\n              "label":"Notes"\n            },\n            {\n              "name":"CATALOG_NAME",\n              "label":"Catalog Name"\n            },\n            {\n              "name":"EC_CLASS_NAME",\n              "label":"EC Class Name"\n            },\n            {\n              "name":"UNIT_OF_MEASURE",\n              "label":"Unit Of Measure"\n            },\n            {\n              "name":"PIECE_MARK",\n              "label":"Piece Mark"\n            },\n            {\n              "name":"FABRICATION_CATEGORY",\n              "label":"Fabrication Category"\n            },\n            {\n              "name":"LINENUMBER",\n              "label":"Line Number"\n            },\n            {\n              "name":"INSULATION_THICKNESS",\n              "label":"Insulation Thickness"\n            },\n            {\n              "name":"INSULATION",\n              "label":"Insulation Material"\n            },\n            {\n              "name":"LENGTH",\n              "label":"Length"\n            },\n            {\n              "name":"INSIDE_DIAMETER",\n              "label":"Inside Diameter"\n            },\n            {\n              "name":"NORMAL_OPERATING_PRESSURE",\n              "label":"Normal Operating Pressure"\n            },\n            {\n              "name":"OUTSIDE_DIAMETER",\n              "label":"Outside Diameter"\n            },\n            {\n              "name":"PIPE_FLANGE_TYPE",\n              "label":"Pipe Flange Type"\n            },\n            {\n              "name":"GRADE",\n              "label":"Grade"\n            },\n            {\n              "name":"SHOP_FIELD",\n              "label":"Shop Field"\n            },\n            {\n              "name":"HUB_DEPTH",\n              "label":"Hub Depth"\n            },\n            {\n              "name":"HUB_WIDTH",\n              "label":"Hub Width"\n            },\n            {\n              "name":"TRACING",\n              "label":"Tracing"\n            }\n          ],\n          "aspects":[],\n          "typeDefinitions":[]\n        }\n      ]\n    }\n  ]\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,l.kt)("h2",{id:"4-get-schema-info"},"4. Get Schema Info"),(0,l.kt)("p",null,"For creating Property Validation rules you will need to get all the class/property names in the iModel schemas."),(0,l.kt)("p",null,"First, you can send an HTTP request to ",(0,l.kt)("inlineCode",{parentName:"p"},"POST https://api.bentley.com/clashdetection/schemas/imodels/{iModelId}")," using your iModel ID in place of {iModelId}. If schema information has not previously been extracted for the iModel, an agent will be started to process the request. A status of 202 is returned if the agent was successfully started."),(0,l.kt)("p",null,"Next, you can repeat calls to ",(0,l.kt)("inlineCode",{parentName:"p"},"GET https://api.bentley.com//clashdetection/schemas/imodels{iModelId}")," until a status of ",(0,l.kt)("inlineCode",{parentName:"p"},"available")," is returned with the response."),(0,l.kt)("p",null,"The response will include a complete tree of schemas, classes and associated properties. For creating property validation rules, you will be using the ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," values. However, the ",(0,l.kt)("inlineCode",{parentName:"p"},"label")," values may help you identify the correct classes and properties.")),(0,l.kt)(p,{mdxType:"TutorialSection"},(0,l.kt)("h2",{id:"4-conclusion"},"4. Conclusion"),(0,l.kt)("p",null,"You should be able to successfully retrieve the related IDs and schema info for your model. While this information is of limited value on its own, it is useful and necessary for creating clash detection and property validation tests, so check out the continue learning section to put your new knowledge to use.")),(0,l.kt)(y,{mdxType:"ContinueLearningSection"},(0,l.kt)("h2",{id:"more-resources-that-you-may-like"},"More resources that you may like"),(0,l.kt)(g,{mdxType:"TileList"},(0,l.kt)(T,{title:"Clash Test Basics",href:"/tutorials/clash-test-basics",description:"A tutorial that covers the basics of the clash detection lifecycle and usage.",mdxType:"ResourceTile"}),(0,l.kt)(T,{title:"Validation API documentation",href:"/api-groups/validation/",description:"An overview and detailed version of Validation API documentation, including both Clash Detection and Property Validation.",mdxType:"ResourceTile"}))))}k.isMDXComponent=!0;var C=function(){return[{id:"introduction",level:2,title:"Introduction",children:[]},{id:"1-optional-create-a-test-itwin-and-imodel-for-testing",level:2,title:"1. (Optional) Create a Test iTwin and iModel for testing",children:[]},{id:"2-get-a-token",level:2,title:"2. Get a token",children:[{id:"implement-authorization-code-flow-in-the-application",level:3,title:"Implement Authorization Code Flow in the application",children:[]},{id:"grab-a-user-token-from-the-api-reference-try-it-out-section",level:3,title:"Grab a user token from the API reference \u201cTry it out\u201d Section",children:[]}]},{id:"3-retrieving-models-and-categories",level:2,title:"3. Retrieving Models and Categories",children:[{id:"31-extractionretrieval-request-apis",level:3,title:"3.1 Extraction/Retrieval Request APIs",children:[]},{id:"32-direct-imodel-query",level:3,title:"3.2 Direct iModel Query",children:[]}]},{id:"4-get-schema-info",level:2,title:"4. Get Schema Info",children:[]},{id:"4-conclusion",level:2,title:"4. Conclusion",children:[]},{id:"more-resources-that-you-may-like",level:2,title:"More resources that you may like",children:[]}]}},27096:function(e,t,n){"use strict";n.r(t);var o=n(3905),i=n(1176),a=n(58822),l=n(88774),r=(n(67294),n(80989)),s=n(85893);n(14473),t.default=function(){var e={headline:l.Pu.title,navigationItems:(0,l.Jt)(),tutorialSteps:(0,s.jsx)(o.Zo,{components:a.d,children:(0,s.jsx)(l.ZP,{})})};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.d,{title:"".concat(l.Pu.title," - Tutorials | iTwin Platform")}),(0,s.jsx)(i.Z,{tutorial:e})]})}},93730:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorials/retrieve-validation-model-data",function(){return n(27096)}])}},function(e){e.O(0,[3714,8670,9734,9102,8764,1706,4009,1610,6638,9774,2888,179],(function(){return t=93730,e(e.s=t);var t}));var t=e.O();_N_E=t}]);
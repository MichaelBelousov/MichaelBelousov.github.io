(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9704],{18171:function(e,t,n){"use strict";n.d(t,{Jt:function(){return v},Pu:function(){return s},ZP:function(){return w}});var a=n(36864),i=n(4730),o=n(67294),r=n(3905),l=["components"],s=(o.createElement,{title:"Controlling your iModel in Unreal",tile:{name:"Controlling your iModel in Unreal",description:"Build a UI to control the animations in your iModel",thumbnail:"/images/unreal-ui-featured-thumb.png",href:"/tutorials/itwin-unreal-controlling-your-imodel",durationInMinutes:60,relatedApiIds:["itwin-unreal"],showInFirstSteps:!1}}),p=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)}},u=p("Introduction"),c=p("TutorialSection"),d=p("TitledImage"),h=p("Alert"),m=p("LinkingImage"),g=p("WebMLoop"),k=p("ContinueLearningSection"),y=p("TileList"),b=p("ResourceTile"),f={metadata:s};function w(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(u,{skillLevel:"Advanced",durationInMinutes:"30",summaryImageSrc:"/images/unreal-ui-featured.png",mdxType:"Introduction"},(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"This tutorial looks at the various blueprint functions in the iTwin Unreal Datasmith Plugin you can use to manipulate your iModel in Unreal\nand builds a simple user interface with a scrubber for users to interact with your schedule animation in real-time.\nIt also focuses on synchronizing the level sequence (used by actors with transform animations) with the ScheduledActor\u2019s animations,\nwhich is necessary when you exported using the ",(0,r.kt)("em",{parentName:"p"},"combine meshes")," option.")),(0,r.kt)(c,{mdxType:"TutorialSection"},(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"This tutorial assumes that you have:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Installed ",(0,r.kt)("a",{parentName:"li",href:"https://www.unrealengine.com/download"},"Unreal Engine 4.26.1")," or later"),(0,r.kt)("li",{parentName:"ul"},"In your project already imported Datasmith content that was made with the iTwin Exporter for Datasmith from an iTwin that contains a schedule script. You may\nfollow one of the tutorials below for help exporting your own data.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/tutorials/itwin-unreal-export-combined-meshes/"},"Exporting iModel to Unreal Datasmith as a combined mesh")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/tutorials/itwin-unreal-dataprep"},"Processing iModel metadata in Unreal Visual Dataprep")))),(0,r.kt)("li",{parentName:"ul"},"An existing Unreal Engine project with the ",(0,r.kt)("a",{parentName:"li",href:"/tutorials/itwin-unreal-export-combined-meshes/#3-install-the-itwin-unreal-datasmith-plugin-in-your-unreal-project"},"iTwin Unreal Datasmith Plugin")," installed.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Depending on your Unreal Engine version, this may require Visual Studio to be installed. The prerequisites section of ",(0,r.kt)("a",{parentName:"li",href:"/tutorials/itwin-unreal-export-combined-meshes/#prerequisites"},"Exporting iModel to Unreal Datasmith as a combined mesh"),"\nhas instructions for recompiling the plugin."))),(0,r.kt)("li",{parentName:"ul"},"A reasonable knowledge of blueprint scripting in Unreal Engine"))),(0,r.kt)(c,{mdxType:"TutorialSection"},(0,r.kt)("h2",{id:"1-preparing-actors-in-your-scene"},"1. Preparing actors in your scene"),(0,r.kt)("p",null,"In the level editor where you see your imported data, you need to add some tags to specific actors so later code can find them easily.\nFrom the ",(0,r.kt)("strong",{parentName:"p"},"World Outliner")," at the top right of the editor, select the datasmith scene actor that was created when you imported your Datasmith content. Then in the ",(0,r.kt)("strong",{parentName:"p"},"Details")," panel,\nsearch for or scroll down to the ",(0,r.kt)("strong",{parentName:"p"},"Actor > Tags")," section and press the plus button to add a new tag, give it a value of \u201cExampleDatasmithScene1\u201d."),(0,r.kt)("p",null,"If you selected the ",(0,r.kt)("em",{parentName:"p"},"combine meshes")," option while exporting, you will have an actor named ScheduleActor as a child of your datasmith scene actor,\nSelect it and give it a new tag with a value of \u201cExampleScheduleActor1\u201d. It is not necessary to have done a combined-mesh export,\nhowever this tutorial will assume you have and write the code to synchronize the exported level sequence with the ScheduleActor\ndriving animations in the combined mesh."),(0,r.kt)(d,{src:"/images/unreal-ui-actor-tags.png",alt:"setting actor tags in the details panel",className:"sample-img-l",mdxType:"TitledImage"}),(0,r.kt)("p",null,"If you have not done so already, in the Content Browser, in the folder where you chose to import your datasmith content, go into the animations subfolder\nand drag-and-drop the ScheduleAnimation asset into the level to add the actor to the scene."),(0,r.kt)(d,{src:"/images/unreal-export-anim-drag-drop.png",alt:"drag-and-drop-level-sequence",mdxType:"TitledImage"}),(0,r.kt)("p",null,"Make sure the new level sequence actor is selected, and in the ",(0,r.kt)("strong",{parentName:"p"},"Details Panel"),", give it an\nactor tag with a value of \u201cScheduleLevelSequence1\u201d. Still in the ",(0,r.kt)("strong",{parentName:"p"},"Details Panel"),", find the ",(0,r.kt)("strong",{parentName:"p"},"Playback")," settings section, check ",(0,r.kt)("strong",{parentName:"p"},"Auto Play")," and\nset the ",(0,r.kt)("strong",{parentName:"p"},"Loop")," option to ",(0,r.kt)("strong",{parentName:"p"},"Loop Indefinitely"),"."),(0,r.kt)(d,{src:"/images/unreal-ui-set-autoplay.png",alt:"set auto play",className:"sample-img-l",mdxType:"TitledImage"}),(0,r.kt)("p",null,"Using actor tags is one of several ways to make it easy to access actors in the level at runtime in our code. Now that you have them setup,\nyou can use them in the code of the classes that will comprise your user interface.")),(0,r.kt)(c,{mdxType:"TutorialSection"},(0,r.kt)("h2",{id:"2-setting-up-our-interface-classes"},"2. Setting up our interface classes"),(0,r.kt)("p",null,"In Unreal Engine, ",(0,r.kt)("inlineCode",{parentName:"p"},"HUD")," (Heads Up Display) classes are used to draw the 2-dimensional interface overlaying the rendered scene.\nThe HUD is controlled by the ",(0,r.kt)("inlineCode",{parentName:"p"},"PlayerController")," it is attached to, and both are provisioned by the engine\u2019s active ",(0,r.kt)("inlineCode",{parentName:"p"},"GameMode"),".\nIn this tutorial a basic gamemode setup will be created so when you run your project, the interface will have a scrubber timeline, some\ndisplayed information about the scene, and inputs to control the schedule animation playback."),(0,r.kt)("p",null,"Start by pressing the ",(0,r.kt)("strong",{parentName:"p"},"Add/Import")," button in the Content Browser, and under ",(0,r.kt)("strong",{parentName:"p"},"User Interface")," pick ",(0,r.kt)("strong",{parentName:"p"},"Widget Blueprint")," to create a new\n",(0,r.kt)("em",{parentName:"p"},"Widget Blueprint"),". Name it ",(0,r.kt)("inlineCode",{parentName:"p"},"ExampleTimelineWidget"),"."),(0,r.kt)(h,{type:"informational",mdxType:"Alert"},"The names used in this tutorial are arbitrary. You can use any name as long as you connect the classes correctly."),(0,r.kt)(d,{src:"/images/unreal-ui-createwidgetblueprint.png",alt:"create a widget blueprint by using the add/import button in the Content Browser",className:"sample-img-m",mdxType:"TitledImage"}),(0,r.kt)("p",null,"Next, create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"GameModeBase")," blueprint by pressing the ",(0,r.kt)("strong",{parentName:"p"},"Add/Import")," button in the Content Browser again,\nthis time choosing ",(0,r.kt)("strong",{parentName:"p"},"Blueprint Class")," at the top, under create ",(0,r.kt)("strong",{parentName:"p"},"Create Basic Asset"),". In the ",(0,r.kt)("strong",{parentName:"p"},"Pick Parent Class")," dialog, use the search menu to\nfind the ",(0,r.kt)("inlineCode",{parentName:"p"},"GameModeBase")," class. Some, but not all, classes may also be selected from the ",(0,r.kt)("strong",{parentName:"p"},"Common Classes")," list at the top of the dialog.\nName your new ",(0,r.kt)("inlineCode",{parentName:"p"},"GameModeBase")," subclass ",(0,r.kt)("inlineCode",{parentName:"p"},"ExampleGameModeBase"),". In the same way create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"PlayerController")," blueprint, ",(0,r.kt)("inlineCode",{parentName:"p"},"ExamplePlayerController"),",\nand a new ",(0,r.kt)("inlineCode",{parentName:"p"},"HUD")," blueprint, ",(0,r.kt)("inlineCode",{parentName:"p"},"ExampleHUD"),", as well. Double-click the newly created ",(0,r.kt)("inlineCode",{parentName:"p"},"ExampleHUD")," asset in the content editor to open the blueprint editor."),(0,r.kt)("p",null,"In your HUD\u2019s blueprint event graph, add a ",(0,r.kt)("inlineCode",{parentName:"p"},"Create Widget")," node to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Begin Play")," event and call the ",(0,r.kt)("inlineCode",{parentName:"p"},"Add to Viewport")," function on the created widget reference.\nSet the class parameter of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Create Widget")," node to the blueprint widget class you created, ",(0,r.kt)("inlineCode",{parentName:"p"},"ExampleTimelineWidget"),".\nThe resulting node graph for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Begin Play")," event should look as follows."),(0,r.kt)(m,{src:"/images/unreal-ui-hud-beginplay.png",alt:"screenshot of blueprint code for ExampleHUD class",href:"https://blueprintue.com/blueprint/k0_44j0-/",tooltip:"Click to interact or copy nodes at blueprintue.com",className:"sample-img-xl",mdxType:"LinkingImage"}),(0,r.kt)("p",null,"Go back to the Content Browser in the main level editor window and open the ",(0,r.kt)("inlineCode",{parentName:"p"},"ExamplePlayerController")," class. In the ",(0,r.kt)("inlineCode",{parentName:"p"},"Begin Play")," event,\nadd a ",(0,r.kt)("inlineCode",{parentName:"p"},"Get All Actors Of Class with Tag")," node and get all Scheduled Actors with the tag you added earlier, \u201cExampleScheduleActor1\u201d. Get the\nelement at index 0 (the first) element of the array, since we know we have one such actor in the scene, and set it as the value for a new\nvariable, ",(0,r.kt)("inlineCode",{parentName:"p"},"Scene"),". You can drag the output pin of the array indexing ",(0,r.kt)("inlineCode",{parentName:"p"},"Get")," node, and release in the graph space to open the context menu\nand at the top select ",(0,r.kt)("strong",{parentName:"p"},"Promote to variable")," to do this quickly."),(0,r.kt)("p",null,"Then add a ",(0,r.kt)("inlineCode",{parentName:"p"},"Get HUD")," node and a ",(0,r.kt)("inlineCode",{parentName:"p"},"Cast to ExampleHUD")," node after the intialization of ",(0,r.kt)("inlineCode",{parentName:"p"},"Scene"),". Store the ExampleHUD instance in a new variable, ",(0,r.kt)("inlineCode",{parentName:"p"},"PlayerHUD"),"."),(0,r.kt)(m,{src:"/images/unreal-ui-playercontroller-beginplay.png",alt:"screenshot of player controller's beginplay",href:"https://blueprintue.com/blueprint/02yoz_1_/",tooltip:"Click to interact or copy nodes at blueprintue.com",className:"blueprint-img",mdxType:"LinkingImage"}),(0,r.kt)("p",null,"Create a new boolean variable ",(0,r.kt)("inlineCode",{parentName:"p"},"IsMouseCaptured"),", and right-click in the event graph, search in the context menu for \u201cspacebar\u201d to add the\nspace bar input event. Then add the following blueprint code to use spacebar to toggle between controlling our spectator pawn or the mouse."),(0,r.kt)(h,{type:"informational",mdxType:"Alert"},"See the"," ",(0,r.kt)("a",{href:"https://docs.unrealengine.com/InteractiveExperiences/Input/"},"Unreal Engine input management documentation")," ","for better ways of managing input. Using a direct keyboard event is done for simplicity and there are more robust ways of reacting to input."),(0,r.kt)(m,{src:"/images/unreal-ui-playercontroller-onspacebar.png",alt:"screenshot of player controller's spacebar event implementation",href:"https://blueprintue.com/blueprint/wdbxp-au/",tooltip:"Click to interact or copy nodes at blueprintue.com",className:"blueprint-img",mdxType:"LinkingImage"}),(0,r.kt)("p",null,"Finally, set your world to use these new blueprint classes, so that when the level is played, your widget is\nin the viewport. Click the ",(0,r.kt)("strong",{parentName:"p"},"Settings")," icon in the top bar, and click ",(0,r.kt)("strong",{parentName:"p"},"World Settings")," in its dropdown. In the ",(0,r.kt)("strong",{parentName:"p"},"World Settings")," panel,\nfind the ",(0,r.kt)("strong",{parentName:"p"},"Game Mode")," section. There, see the ",(0,r.kt)("strong",{parentName:"p"},"GameMode Override")," dropdown value to your newly created ",(0,r.kt)("inlineCode",{parentName:"p"},"ExampleGameModeBase"),".\nThen expand the ",(0,r.kt)("strong",{parentName:"p"},"Selected GameMode")," options by clicking the arrow to the left of the label, and set the HUD and PlayerController classes to the ones you created."),(0,r.kt)(d,{src:"/images/unreal-ui-gamemode-override.png",alt:"screenshot of gamemode override settings",mdxType:"TitledImage"}),(0,r.kt)(h,{type:"informational",mdxType:"Alert"},"In addition to a game mode override for local testing, you may also want to set the default GameMode in the project settings'"," ",(0,r.kt)("strong",null,"Maps & Modes")," section."),(0,r.kt)("p",null,"Now that HUD and widget spawn when play begins, you need to add some controls to your widget to be able to see it, and then you will be able to hook up those controls\nto your iTwin\u2019s animation.")),(0,r.kt)(c,{mdxType:"TutorialSection"},(0,r.kt)("h2",{id:"3-laying-out-the-hud"},"3. Laying out the HUD"),(0,r.kt)("p",null,"In the Content Browser, double-click the ",(0,r.kt)("inlineCode",{parentName:"p"},"ExampleTimelineWidget")," asset you created to open the widget editor. From the ",(0,r.kt)("strong",{parentName:"p"},"Palette")," on the left,\ndrag and drop a ",(0,r.kt)("em",{parentName:"p"},"Slider")," control into the widget designer viewport. Make sure it is selected, and use the scale handles to scale it across the bottom\nedge of the viewport to use as our scrubber. Additionally, place a ",(0,r.kt)("em",{parentName:"p"},"Text")," control at each the left and right end of the slider, and one more above the middle\nof the slider. You will show your iTwin\u2019s schedule start, end, and current time of the animation in these text controls, updating the current time every tick."),(0,r.kt)(g,{src:"/images/unreal-ui-widget-building.webm",mdxType:"WebMLoop"}),(0,r.kt)("p",null,"In the ",(0,r.kt)("strong",{parentName:"p"},"Hierarchy")," panel on the left of the editor, rename your newly placed controls respectively to, Scrubber, StartTime, EndTime, and CurrentTime,\nand in the top-right corner of the ",(0,r.kt)("strong",{parentName:"p"},"Details")," panel make sure the ",(0,r.kt)("strong",{parentName:"p"},"Is Variable")," checkbox is checked so you can reference your controls in the event graph."),(0,r.kt)(d,{src:"/images/unreal-ui-isvariable.png",alt:"the location of the Is Variable checkbox in the interface",className:"sample-img-xl",mdxType:"TitledImage"}),(0,r.kt)("p",null,"To start scripting your placed controls, switch to the blueprint graph by pressing the ",(0,r.kt)("strong",{parentName:"p"},"Graph")," button in the top right of the window in the blueprint widget editor.\nOn the widget\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"Construct")," event, first store both the \u201cExampleScheduleActor1\u201d, and the \u201cScheduleLevelSequence1\u201d tagged actors stored to variables in your script.\nThen call the StartTime text control\u2019s ",(0,r.kt)("em",{parentName:"p"},"Set Text")," function and set it to the formatted date text of the ScheduledActor\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"AnimationStartTime"),". Do the same\nfor EndTime but with the ScheduledActor\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"AnimationEndTime"),"."),(0,r.kt)(h,{type:"informational",mdxType:"Alert"},"If you did not perform an export with the ",(0,r.kt)("em",null,"combine meshes")," option, the ScheduledActor's static blueprint function"," ",(0,r.kt)("a",{href:"/unreal/integration/blueprint-api-reference/#AScheduledActor::GetSeparatedExportSceneData"},(0,r.kt)("code",null,"GetSeparatedExportSceneData"))," ","can be called with your Datasmith Scene Actor to receive the"," ",(0,r.kt)("code",null,"ScheduleStartDateTime"),", ",(0,r.kt)("code",null,"ScheduleEndDateTime"),", and"," ",(0,r.kt)("code",null,"ScheduleTicksPerSecond"),"."),(0,r.kt)("p",null,"Then add a custom event to the event graph by right-clicking in the graph and search\nfor ",(0,r.kt)("strong",{parentName:"p"},"Add Custom Event"),' in the context menu. Name this event "Set Correct Level\nSequence End", and invoke the event after the variables are initialized in the Construct\nevent that you have been building up.'),(0,r.kt)(m,{src:"/images/unreal-ui-timelinewidget-beginplay.png",alt:"screenshot of timeline widget's construct event",href:"https://blueprintue.com/blueprint/1fqeenu4/",tooltip:"Click to interact or copy nodes at blueprintue.com",className:"blueprint-img",mdxType:"LinkingImage"}),(0,r.kt)("p",null,"Before you implement that custom event, in the tick event update the CurrentText control with the current time of the ScheduleActor. If you did not combine meshes during export,\nyou can instead use the static plugin blueprint function ",(0,r.kt)("a",{parentName:"p",href:"/unreal/integration/blueprint-api-reference/#AScheduledActor::GetScheduleDateTimeFromActiveSequence"},(0,r.kt)("inlineCode",{parentName:"a"},"GetScheduleDateTimeFromActiveSequence")),"\nto get the current date given the level sequence actor. Then, after having set the text, calculate the proportion of the animation played and update Scrubber\u2019s value to match, so that it moves along\nwith the animation every tick."),(0,r.kt)(m,{src:"/images/unreal-ui-timelinewidget-tick.png",alt:"screenshot of timeline widget's tick event",href:"https://blueprintue.com/blueprint/m5zhmaz-/",tooltip:"Click to interact or copy nodes at blueprintue.com",className:"blueprint-img",mdxType:"LinkingImage"}),(0,r.kt)("p",null,"Now you should implement the custom event, ",(0,r.kt)("inlineCode",{parentName:"p"},"SetCorrectLevelSequenceEnd"),". This step is necessary to synchronize the exported level sequence with the ScheduledActor,\nbecause the DatasmithSDK does not currently have a way to set the end frame of a level sequence. When an export is created with the combine meshes option, only\ntransform data is put in the level sequence, therefore the true end frame which is typically a non-transform frame (i.e. visibility, color, etc, frame) is lost.\nTo compensate for this, you can calculate the end frame manually from the metadata, and set the correct end time at startup. You could also set the end of the level sequence\nasset itself, but a one-time computation at startup is not expensive and does not need to be recalculated in the event of a re-export of your Datasmith content."),(0,r.kt)("p",null,"To calculate it, divide the schedule date range using the ",(0,r.kt)("inlineCode",{parentName:"p"},"AnimationTicksPerSecondScale")," variable to find how many 24FPS frames occur during the equivalent game time, which\ncan then be used to set the level sequence end frame from. In this example int64 is used in order to have the same resolution as DateTime which is internally a single int64.\nAdditionally, some constants from Unreal\u2019s native ",(0,r.kt)("inlineCode",{parentName:"p"},"ETimespan")," enumeration are reproduced to calculate the amount of ticks from the amount of seconds using only available blueprint nodes."),(0,r.kt)(m,{src:"/images/unreal-ui-setcorrectlevelsequenceend.png",alt:"screenshot of player timeline widget's custom event 'set correct level sequence end'",href:"https://blueprintue.com/blueprint/aug9_doq/",tooltip:"Click to interact or copy nodes at blueprintue.com",className:"blueprint-img",mdxType:"LinkingImage"}),(0,r.kt)("p",null,"Now, when you hit the ",(0,r.kt)("strong",{parentName:"p"},"Play")," button to watch the scene unfold, your animations should play and loop, with the scrubber moving and the date text updating throughout. You should\nalso be able to press the spacebar to get control of the mouse in order to move the scrubber. Moving the scrubber however, won\u2019t do anything. That is your next step.")),(0,r.kt)(c,{mdxType:"TutorialSection"},(0,r.kt)("h2",{id:"4-scripting-the-scrubber"},"4. Scripting the scrubber"),(0,r.kt)("p",null,"Go back to the widget designer by hitting the ",(0,r.kt)("strong",{parentName:"p"},"Designer")," button at the top-right of the widget blueprint graph. Select your scrubber control in the ",(0,r.kt)("strong",{parentName:"p"},"Hierarchy")," tab,\nand in the ",(0,r.kt)("strong",{parentName:"p"},"Details")," tab scroll all the way to the bottom to the ",(0,r.kt)("strong",{parentName:"p"},"Events")," section. Click the green plus ",(0,r.kt)("strong",{parentName:"p"},"On Mouse Capture Begin"),", ",(0,r.kt)("strong",{parentName:"p"},"On Mouse Capture End"),",\nand ",(0,r.kt)("strong",{parentName:"p"},"On Value Changed")," buttons to add those events. Each time you press one of the buttons, you will be taken to where the event was added in the graph, go back to the\ndesigner each time until all three events have been added."),(0,r.kt)(d,{src:"/images/unreal-ui-widget-add-callbacks.png",alt:"the green plus buttons that let you add callbacks for scrubber controls to the event graph",className:"sample-img-xl",mdxType:"TitledImage"}),(0,r.kt)("p",null,"On mouse capture, pause the animation, so that the scene does not keep playing while a user is trying to scrub through it. In the ",(0,r.kt)("inlineCode",{parentName:"p"},"On Mouse Capture Begin")," event,\nset the ScheduleActor\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"AnimationIsPlaying")," variable to false, and call the ",(0,r.kt)("inlineCode",{parentName:"p"},"Pause")," function on the level sequence. In the ",(0,r.kt)("inlineCode",{parentName:"p"},"On Mouse Capture End")," event, do the opposite,\nsetting ",(0,r.kt)("inlineCode",{parentName:"p"},"AnimationIsPlaying")," to true, and calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"Play")," function on the level sequence."),(0,r.kt)(m,{src:"/images/unreal-ui-timelinewidget-onmouse.png",alt:"the implementation of On Mouse Capture events for the ExampleTimelineWidget for playback control",href:"https://blueprintue.com/blueprint/vt_82mpw/",tooltip:"Click to interact or copy nodes at blueprintue.com",className:"sample-img-xl",mdxType:"LinkingImage"}),(0,r.kt)("p",null,"Finally, you must implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"On Value Changed")," event by converting the scrubber value from between 0 and 1 to the appropriate date in the schedule for setting the\nScheduleActor\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"AnimationTime"),", and you must calculate the proportional time in the level sequence and call its ",(0,r.kt)("inlineCode",{parentName:"p"},"SetPlaybackPosition")," function. The necessary math for\ntransforming from the value between 0 and 1 to the level sequence seconds and schedule date time can be seen in the following blueprint code."),(0,r.kt)(m,{src:"/images/unreal-ui-timelinewidget-onvaluechanged.png",alt:"the implementation of On Value Changed for the ExampleTimelineWidget",href:"https://blueprintue.com/blueprint/brwbb3iz/",tooltip:"Click to interact or copy nodes at blueprintue.com",className:"blueprint-img",mdxType:"LinkingImage"})),(0,r.kt)(c,{mdxType:"TutorialSection"},(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"With your scene scrubber now working, you should be able to start extending the code with your own inputs and controls,\nsuch as using custom interface control styles, or new inputs like pause buttons, etc. For a full list of available blueprint\nfunctions in the iTwin Unreal Datasmith Plugin, see the ",(0,r.kt)("a",{parentName:"p",href:"/unreal/integration/blueprint-api-reference/"},"Blueprint API reference"),"."),(0,r.kt)("p",null,"If you have an idea for something that could improve your workflow and belongs in the plugin, visit ",(0,r.kt)("a",{parentName:"p",href:"https://itwinplatform.ideas.aha.io/?category=7010781758179112615"},"our ideas portal"),".")),(0,r.kt)(k,{mdxType:"ContinueLearningSection"},(0,r.kt)("h2",{id:"more-resources-that-you-may-like"},"More resources that you may like"),(0,r.kt)(y,{mdxType:"TileList"},(0,r.kt)(b,{title:"iTwin Exporter for Datasmith documentation",href:"/unreal/integration/documentation/",description:"Extended functionality and workflow descriptions in iTwin Exporter for Datasmith",mdxType:"ResourceTile"}),(0,r.kt)(b,{title:"The iTwin Unreal Datasmith Plugin Blueprint api reference",href:"/unreal/integration/blueprint-api-reference/",description:"Follow this tutorial to get iModel data into the Datasmith format as a combined mesh",mdxType:"ResourceTile"}),(0,r.kt)(b,{title:"Unreal example HUD",href:"https://docs.unrealengine.com/Resources/ContentExamples/Blueprints_HUD/1_1/",description:"See the official example HUD in Unreal to learn some HUD design techniques and best practices",isExternal:!0,mdxType:"ResourceTile"}))))}w.isMDXComponent=!0;var v=function(){return[{id:"introduction",level:2,title:"Introduction",children:[]},{id:"prerequisites",level:2,title:"Prerequisites",children:[]},{id:"1-preparing-actors-in-your-scene",level:2,title:"1. Preparing actors in your scene",children:[]},{id:"2-setting-up-our-interface-classes",level:2,title:"2. Setting up our interface classes",children:[]},{id:"3-laying-out-the-hud",level:2,title:"3. Laying out the HUD",children:[]},{id:"4-scripting-the-scrubber",level:2,title:"4. Scripting the scrubber",children:[]},{id:"conclusion",level:2,title:"Conclusion",children:[]},{id:"more-resources-that-you-may-like",level:2,title:"More resources that you may like",children:[]}]}},15593:function(e,t,n){"use strict";n.r(t);var a=n(3905),i=n(1176),o=n(58822),r=n(18171),l=(n(67294),n(80989)),s=n(85893);n(14473),t.default=function(){var e={headline:r.Pu.title,navigationItems:(0,r.Jt)(),tutorialSteps:(0,s.jsx)("div",{className:"disable-actions-section",children:(0,s.jsx)(a.Zo,{components:o.d,children:(0,s.jsx)(r.ZP,{})})})};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(l.d,{title:"".concat(r.Pu.title," | iTwin for Game Engines")}),(0,s.jsx)(i.Z,{tutorial:e})]})}},98745:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorials/itwin-unreal-controlling-your-imodel",function(){return n(15593)}])}},function(e){e.O(0,[3714,8670,9734,9102,8764,1706,4009,1610,6638,9774,2888,179],(function(){return t=98745,e(e.s=t);var t}));var t=e.O();_N_E=t}]);
"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9332],{29332:function(e,n,t){t.d(n,{Jt:function(){return v},Pu:function(){return p},ZP:function(){return y}});var a=t(36864),o=t(4730),s=t(67294),r=t(3905),i=["components"],p=(s.createElement,{title:"Adding view decorations to your iTwin Viewer",tile:{name:"Adding view decorations to your iTwin Viewer",description:"This tutorial demonstrates how to add marker decorations to the Viewer.",thumbnail:"/images/adding-decorators-and-markers.png",href:"/tutorials/adding-decorators-and-markers/",durationInMinutes:45,relatedApiIds:["visualization"],showInFirstSteps:!1}}),l=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)}},c=l("Introduction"),d=l("TutorialSection"),u=l("WebMLoop"),m=l("Title"),k=l("CodeBlock"),h=l("ContinueLearningSection"),w=l("TileList"),g=l("ResourceTile"),f={metadata:p};function y(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(c,{skillLevel:"Basic",durationInMinutes:"45",summaryImageSrc:"/images/adding-decorators-and-markers.png",mdxType:"Introduction"},(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"This tutorial guides you through customizing your iTwin Viewer application by displaying application-specific graphics, called ",(0,r.kt)("em",{parentName:"p"},"view decorations"),", in addition to an iModel\u2019s geometry. "),(0,r.kt)("p",null,"First, we explore the basics about view decorations, decorators and markers. Then, we create a simple viewer application which displays markers for elements of interest in a 3D iModel.")),(0,r.kt)(d,{mdxType:"TutorialSection"},(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"This tutorial assumes that you have:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Your own local source for the iTwin Web Viewer based on the template @itwin/web-viewer",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"See the ",(0,r.kt)("a",{parentName:"li",href:"/tutorials/web-application-quick-start"},"Get Started!")," tutorial for instructions."))),(0,r.kt)("li",{parentName:"ul"},"Configured your local source to open the \u201cHouse Model\u201d sample iModel.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"See the ",(0,r.kt)("a",{parentName:"li",href:"/tutorials/create-test-imodel-sample"},"Create a test iModel from a Bentley provided sample")," tutorial for instructions on using a sample iModel."))),(0,r.kt)("li",{parentName:"ul"},"Completed the \u201c",(0,r.kt)("a",{parentName:"li",href:"/tutorials/itwin-viewer-hello-world"},"Customizing the iTwin Viewer"),"\u201d tutorial."),(0,r.kt)("li",{parentName:"ul"},"Completed the \u201c",(0,r.kt)("a",{parentName:"li",href:"/tutorials/adding-showcase-widgets-to-your-itwin-viewer"},"Adding showcase widgets to your iTwin Viewer"),"\u201d tutorial."))),(0,r.kt)(d,{mdxType:"TutorialSection"},(0,r.kt)("h2",{id:"1-view-decorations-decorators-and-markers"},"1. View Decorations, Decorators and Markers")),(0,r.kt)(d,{subSection:!0,mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"11-view-decorations"},"1.1 View Decorations"),(0,r.kt)("p",null,"Using iTwin.js, there are many ways to customize your iTwin Viewer application, such as displaying custom graphics in the viewport. Additionally, to add graphics that are not contained in, or provided by, the iModel, use View Decorations. At their core, view decorations are application-generated graphics supplied to the viewer\u2019s render system at runtime. There are three categories of view decorations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"View Graphic Decorations"),(0,r.kt)("li",{parentName:"ul"},"Canvas Decorations"),(0,r.kt)("li",{parentName:"ul"},"HTML Decorations")),(0,r.kt)("p",null,"View graphic decorations, of which there are many sub-types, are decorations drawn using the iTwin.js rendering system through WebGL. They allow you to display complex graphics alongside the models\u2019 geometry. They are constructed using a ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/rendering/graphicbuilder/"},"GraphicBuilder")," or by using ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/tiles/readgltfgraphics"},"readGltfGraphics")," to load ",(0,r.kt)("a",{parentName:"p",href:"https://www.khronos.org/gltf/"},"glTF")," assets. Depending on their sub-type, view graphic decorations can be drawn using the view\u2019s lighting, shading and render mode. A common use case of view graphic decorations is the display of 3D bounding boxes around certain elements of a model."),(0,r.kt)("figure",{style:{display:"table",width:"60%","margin-left":"auto","margin-right":"auto","margin-top":"22px","margin-bottom":"22px","padding-left":"0px"}},(0,r.kt)("img",{style:{width:"100%"},src:"/images/tutorials/adding-decorators-and-markers/project_extents.png",alt:"3d iModel of a red brick house over a green background with a white bounding box illustrating the model's limits."}),(0,r.kt)("figcaption",{style:{display:"table-caption","caption-side":"bottom"}},"View graphic decorations created using a graphicsBuilder to display a bounding box around the House Model.")),(0,r.kt)("p",null,"Canvas decorations are decorations drawn atop the scene using ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D"},"CanvasRenderingContext2D"),", which means they always appear in front of your models. They are very useful to display information you do not want to lose sight of behind elements. Canvas decorations are created by implemention the ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/rendering/canvasdecoration/"},"CanvasDecoration")," interface. The iTwin.js implementation of ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/views/sprite/"},"Sprites")," uses canvas decorations."),(0,r.kt)("p",null,"HTML decorations are simply HTML elements added to the DOM on top of your views. They are displayed in front of canvas decorations."),(0,r.kt)("p",null,"For more information on using view decorations, see ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/learning/frontend/viewdecorations/"},"View Decorations"),".")),(0,r.kt)(d,{subSection:!0,mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"12-decorators"},"1.2 Decorators"),(0,r.kt)("p",null,"View decorations are added to a viewport using a ",(0,r.kt)("em",{parentName:"p"},"decorator"),". A decorator is an object implementing the ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/views/decorator/"},"Decorator")," interface that manages a set of view decorations. Each time a viewport renders a frame, each registered decorator\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"decorate")," method is called. The method receives a ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/rendering/decoratecontext/"},"DecorateContext"),", which is used to add the view decorations to be rendered for that frame. Decorators are registered with the ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/views/viewmanager/adddecorator/"},"ViewManager.addDecorator")," method.")),(0,r.kt)(d,{subSection:!0,mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"13-markers"},"1.3 Markers"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/learning/frontend/markers/"},"Markers")," are a convenient way to display information atop the view that follow a fixed point in the world. They are often used as visual indicators showing the location of data from external sources or points of interest in the world. As such, they can present information when hovered and perform actions when clicked. Markers can optionaly display all three types of view decorations.")),(0,r.kt)(d,{mdxType:"TutorialSection"},(0,r.kt)("h2",{id:"2-creating-a-simple-app-to-display-markers-for-elements-of-interest"},"2. Creating a simple app to display markers for elements of interest"),(0,r.kt)("p",null,"To apply what we have just learned about view decorations, decorators, and markers, we will now create a simple Viewer application using these three features. Our goal is to display markers representing interesting elements in the House Model. Those markers will consist of simple 2D images. When hovered, they will show a name for the element and, when clicked, they will take us to that element."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": You can have a look at the ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/sandboxes/RaphaelMelancon/Simple%20Marker%20Sample%20App"},"Simple Marker Sample App")," community sandbox to see what your application will look like at the end of this tutorial."),(0,r.kt)("p",null,"Let\u2019s get started!"),(0,r.kt)(u,{src:"/images/tutorials/adding-decorators-and-markers/sample-app-green-bg.webm",alt:"Screen recording of the Viewer app being used.",style:{display:"block",width:"60%","margin-left":"auto","margin-right":"auto"},mdxType:"WebMLoop"}),(0,r.kt)("br",null)),(0,r.kt)(d,{subSection:!0,actions:[(0,r.kt)(m,{mdxType:"Title"},"ElementOfInterestMarker class"),(0,r.kt)(k,{language:"typescript",code:'import { Marker } from "@itwin/core-frontend";\n\nexport class ElementOfInterestMarker extends Marker {\n  private static _height = 35;\n  private _onMouseButtonCallback: any;\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"21-creating-our-elementofinterestmarker-class"},"2.1 Creating our ElementOfInterestMarker class"),(0,r.kt)("p",null,"First off, make sure you are starting from a newly created Viewer Test App. Have a look at the ",(0,r.kt)("a",{parentName:"p",href:"#Prerequisites"},"prerequisites")," if you are unsure how to do that."),(0,r.kt)("p",null,"Now, let\u2019s create a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementOfInterestMarker.ts")," in the same directory as your ",(0,r.kt)("inlineCode",{parentName:"p"},"App.tsx")," file. In this file, we define our custom ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementOfInterestMarker")," class extending ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/views/marker/"},"Marker"),", which we import."),(0,r.kt)("p",null,"To have all our markers appear the same size, we add the property ",(0,r.kt)("inlineCode",{parentName:"p"},"private static _height = 35;")," to our class.\nWe also add ",(0,r.kt)("inlineCode",{parentName:"p"},"private _onMouseButtonCallback: any;")," to hold each marker\u2019s callback function.",(0,r.kt)("br",null),"\nWe will use those properties in the constructor.")),(0,r.kt)(d,{subSection:!0,actions:[(0,r.kt)(m,{mdxType:"Title"},"ElementOfInterestMarker constructor"),(0,r.kt)(k,{language:"typescript",code:"constructor(\n  image: HTMLImageElement,\n  title: string,\n  onMouseButtonCallback: any,\n  worldLocation: Point3d,\n) {\n  super(worldLocation, new Point2d(image.width * (ElementOfInterestMarker._height / image.height), ElementOfInterestMarker._height));\n  this._onMouseButtonCallback = onMouseButtonCallback;\n  this.title = title;\n  this.setImage(image);\n}",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h4",{id:"constructor"},"Constructor"),(0,r.kt)("p",null,"Indeed, our marker class needs a constructor in which to setup the image to display, its position and size, the tooltip shown when hovered and the callback function triggered when clicked. We define such a constructor, which expects an image, a string for the tooltip, a callback function to call when clicked, and world coordinates."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript","data-language":"typescript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token function">constructor</span><span class="token punctuation">(</span>image<span class="token operator">:</span> HTMLImageElement<span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> onMouseButtonCallback<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> worldLocation<span class="token operator">:</span> Point3d<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n'}})),(0,r.kt)("p",null,"As with any constructor of a class extending another, the first line of our constructor must call the parent class\u2019s constructor using ",(0,r.kt)("inlineCode",{parentName:"p"},"super"),". In our case, ",(0,r.kt)("inlineCode",{parentName:"p"},"Marker"),"'s ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/views/marker/constructor/"},"constructor")," expects a ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-geometry/cartesiangeometry/point3d/"},"Point3d")," representing the world coordinates of the marker and a ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-geometry/cartesiangeometry/point2d/"},"Point2d")," representing its size in pixels. We can directly use ",(0,r.kt)("inlineCode",{parentName:"p"},"worldLocation")," for the former and a simple calculation gives us the latter, keeping the input image\u2019s aspect ratio while reducing its size."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript","data-language":"typescript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">super</span><span class="token punctuation">(</span>worldLocation<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Point2d</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token punctuation">(</span>ElementOfInterestMarker<span class="token punctuation">.</span>_height <span class="token operator">/</span> image<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">,</span> ElementOfInterestMarker<span class="token punctuation">.</span>_height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}})),(0,r.kt)("p",null,"Then, we assign the callback function to the previously created ",(0,r.kt)("inlineCode",{parentName:"p"},"_onMouseButtonCallback")," property, set the marker\u2019s ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/views/marker/title/"},"title"),", and set the image using ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/views/marker/setimage/"},"setImage"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript","data-language":"typescript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">this</span><span class="token punctuation">.</span>_onMouseButtonCallback <span class="token operator">=</span> onMouseButtonCallback<span class="token punctuation">;</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setImage</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}})),(0,r.kt)("p",null,"Make sure to add the necessary imports."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript","data-language":"typescript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Point2d<span class="token punctuation">,</span> Point3d <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@itwin/core-geometry"</span><span class="token punctuation">;</span>\n'}}))),(0,r.kt)(d,{subSection:!0,actions:[(0,r.kt)(m,{mdxType:"Title"},"ElementOfInterestMarker's onMouseButton method"),(0,r.kt)(k,{language:"typescript",code:"public onMouseButton(ev: BeButtonEvent): boolean {\n  if (BeButton.Data !== ev.button || !ev.isDown || !ev.viewport || !ev.viewport.view.isSpatialView())\n    return true;\n  this._onMouseButtonCallback();\n  return true;\n}",mdxType:"CodeBlock"}),(0,r.kt)(m,{mdxType:"Title"},"Complete ElementOfInterestMarker.ts file"),(0,r.kt)(k,{language:"typescript",code:'import { BeButton, BeButtonEvent, Marker } from "@itwin/core-frontend";\nimport { Point2d, Point3d } from "@itwin/core-geometry";\n\nexport class ElementOfInterestMarker extends Marker {\n  private static _height = 35;\n  private _onMouseButtonCallback: any;\n\n  constructor(\n    image: HTMLImageElement,\n    title: string,\n    onMouseButtonCallback: any,\n    worldLocation: Point3d,\n  ) {\n    super(worldLocation, new Point2d(image.width * (ElementOfInterestMarker._height / image.height), ElementOfInterestMarker._height));\n    this._onMouseButtonCallback = onMouseButtonCallback;\n    this.title = title;\n    this.setImage(image);\n  }\n\n  public onMouseButton(ev: BeButtonEvent): boolean {\n    if (BeButton.Data !== ev.button || !ev.isDown || !ev.viewport || !ev.viewport.view.isSpatialView())\n      return true;\n    this._onMouseButtonCallback();\n    return true;\n  }\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h4",{id:"onmousebutton-method"},"onMouseButton method"),(0,r.kt)("p",null,"To complete our ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementOfInterestMarker")," class, let\u2019s implement its optional ",(0,r.kt)("inlineCode",{parentName:"p"},"onMouseButton")," method, which is called whenever a mouse button event takes place on the marker. The method receives an instance of ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/tools/bebuttonevent/"},"BeButtonEvent")," containing information about the mouse event and returns a boolean. We will trigger a callback when such an event takes place."),(0,r.kt)("p",null,"In our case, we only want our application to react to mouse events that correspond to the right mouse button. We thus use the condition ",(0,r.kt)("inlineCode",{parentName:"p"},"BeButton.Data !== ev.button")," to return before doing anything if the button clicked is not the ",(0,r.kt)("em",{parentName:"p"},"Data")," (left) button. We also do not want anything to happen when a mouse button is depressed rather than pressed. We thus add the condition ",(0,r.kt)("inlineCode",{parentName:"p"},"!ev.isDown")," to also return early when the mouse button started from a down position. These two conditions ensure that we only act when the right mouse button is pressed. The other conditions are safeguards to prevent triggering the callback when the viewport is missing or invalid."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript","data-language":"typescript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">if</span> <span class="token punctuation">(</span>BeButton<span class="token punctuation">.</span>Data <span class="token operator">!==</span> ev<span class="token punctuation">.</span>button <span class="token operator">||</span> <span class="token operator">!</span>ev<span class="token punctuation">.</span>isDown <span class="token operator">||</span> <span class="token operator">!</span>ev<span class="token punctuation">.</span>viewport <span class="token operator">||</span> <span class="token operator">!</span>ev<span class="token punctuation">.</span>viewport<span class="token punctuation">.</span>view<span class="token punctuation">.</span><span class="token function">isSpatialView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n'}})),(0,r.kt)("p",null,"If none of the above conditions are true, we trigger the callback stored in ",(0,r.kt)("inlineCode",{parentName:"p"},"_onMouseButtonCallback"),". We always return ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to signal the event was processed and not to forward it to other UI elements."),(0,r.kt)("p",null,"Again, make sure to add the necessary imports."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript","data-language":"typescript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">import</span> <span class="token punctuation">{</span> BeButton<span class="token punctuation">,</span> BeButtonEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@itwin/core-frontend"</span><span class="token punctuation">;</span>\n'}})),(0,r.kt)("p",null,"Just like that, our ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementOfInterestMarker")," class is complete! You can see the completed file in the code snippet.",(0,r.kt)("br",null),"\nWe suggest you review the ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/views/marker/"},"Marker")," documention, as the class provides many other useful methods and properties to tweak the behavior of your markers.")),(0,r.kt)(d,{subSection:!0,mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"22-creating-our-elementofinterestdecorator-class"},"2.2 Creating our ElementOfInterestDecorator class"),(0,r.kt)("p",null,"Now that we have created our marker class, we need to create a decorator which will supply the viewport with the markers to draw on each render. First, create a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementtOfInterestDecorator.ts"),".")),(0,r.kt)(d,{subSection:!0,actions:[(0,r.kt)(m,{mdxType:"Title"},"ElementOfInterest interface"),(0,r.kt)(k,{language:"typescript",code:'import { Id64String } from "@itwin/core-bentley";\nimport { StandardViewId } from "@itwin/core-frontend";\n\nexport interface ElementOfInterest {\n  id: Id64String,\n  title: string,\n  viewOrientation: StandardViewId\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h4",{id:"elementofinterest-interface"},"ElementOfInterest interface"),(0,r.kt)("p",null,"In this file, let\u2019s define the interface ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementOfInterest")," which represents the properties our decorator needs to create an ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementOfInterestMarker")," for an iModel element. We need the element\u2019s id to access information such as its position in the model and a custom title to display as the marker\u2019s tooltip. Let\u2019s also add a property indicating the best angle to see this element from, which we use to adjust the view when we select the element\u2019s marker. Do not forget to import ",(0,r.kt)("inlineCode",{parentName:"p"},"Id64String")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"StandardViewId"),".")),(0,r.kt)(d,{subSection:!0,actions:[(0,r.kt)(m,{mdxType:"Title"},"ElementOfInterestDecorator class"),(0,r.kt)(k,{language:"typescript",code:'import { DecorateContext, Decorator } from "@itwin/core-frontend";\nimport { ElementOfInterestMarker } from "./ElementOfInterestMarker";\n\nexport class ElementOfInterestDecorator implements Decorator {\n  private _markers: ElementOfInterestMarker[] = [];\n\n  public decorate = (context: DecorateContext) => {\n    if (context.viewport.view.isSpatialView()) {\n      this._markers.forEach(marker => marker.addDecoration(context));\n    }\n  }\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h4",{id:"elementofinterestdecorator-class"},"ElementOfInterestDecorator class"),(0,r.kt)("p",null,"It\u2019s now time to create our decorator. We create the class ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementOfInterestDecorator")," implementing the ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/views/decorator/"},"Decorator")," interface in ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementOfInterestDecorator.ts"),". To store our decorator\u2019s markers, we add the property ",(0,r.kt)("inlineCode",{parentName:"p"},"private _markers: ElementOfInterestMarker[] = [];")," to our class. Then, in the required decorate method, we can call the inherited ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/views/marker/adddecoration/"},"addDecoration")," method of each of our markers, supplying the context.\nRefer to the code snippet for the necessary imports.")),(0,r.kt)(d,{subSection:!0,actions:[(0,r.kt)(m,{mdxType:"Title"},"ElementOfInterestDecorator's _zoomToElementCallback method"),(0,r.kt)(k,{language:"typescript",code:"private _zoomToElementCallback = (elementId: Id64String, viewOrientation: StandardViewId) => {\n  const vp = IModelApp.viewManager.selectedView;\n  if (vp !== undefined)\n    vp.zoomToElements(elementId, {standardViewId: viewOrientation, animateFrustumChange: true})\n}",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h4",{id:"_zoomtoelementcallback-method"},"_zoomToElementCallback method"),(0,r.kt)("p",null,"Our decorator needs to provide the markers with a callback function to move the view to the corresponding element, so we define the method ",(0,r.kt)("inlineCode",{parentName:"p"},"_zoomToElementCallback")," that receives the element\u2019s id and desired view orientation. To achieve the view change, we use the viewport\u2019s built-in ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/views/viewport/zoomtoelements/"},"zoomToElements")," method. We get the viewport instance through the ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/imodelapp/imodelapp/"},"IModelApp")," singleton by doing ",(0,r.kt)("inlineCode",{parentName:"p"},"IModelApp.viewManager.selectedView"),". Don\u2019t forget to import it. Then, we call its zoomToElements method with the element id and additional options to specify the view orientation and to animate the view change.")),(0,r.kt)(d,{subSection:!0,actions:[(0,r.kt)(m,{mdxType:"Title"},"ElementOfInterestDecorator's _createMarker method"),(0,r.kt)(k,{language:"typescript",code:"private _createMarker = (elementProps: ElementOfInterest, image: HTMLImageElement, iModel: IModelConnection) => {\n  const _onMouseButtonCallback = () => this._zoomToElementCallback(elementProps.id, elementProps.viewOrientation);\n  iModel.elements.getPlacements(elementProps.id).then((placements) => {\n    const elementCenter = placements[0].getWorldCorners().getCenter();\n    this._markers.push(new ElementOfInterestMarker(image, elementProps.title, _onMouseButtonCallback, elementCenter));\n  });\n}",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h4",{id:"_createmarker-method"},"_createMarker method"),(0,r.kt)("p",null,"Additionaly, we need a method to create a marker for an element and add it to the ",(0,r.kt)("inlineCode",{parentName:"p"},"_markers")," array of our decorator. Recall our ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementOfInterestMarker"),"'s constructor requires an image, a title, a callback function and a location in the world. Our method thus needs as inputs an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementOfInterest"),", an image, and an iModelConnection to get the element\u2019s world location."),(0,r.kt)("p",null,"Let\u2019s create a ",(0,r.kt)("inlineCode",{parentName:"p"},"_createMarker")," method with those inputs."),(0,r.kt)("p",null,"We use our ",(0,r.kt)("inlineCode",{parentName:"p"},"_zoomToElementCallback")," method to create the marker\u2019s callback function, providing the element\u2019s id and viewOrientation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript","data-language":"typescript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> <span class="token function-variable function">_onMouseButtonCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_zoomToElementCallback</span><span class="token punctuation">(</span>elementProps<span class="token punctuation">.</span>id<span class="token punctuation">,</span> elementProps<span class="token punctuation">.</span>viewOrientation<span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}})),(0,r.kt)("p",null,"To get the element\u2019s world location, we can query the ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/imodelconnection/imodelconnection/"},"IModelConnection"),". In our case, we fetch the element\u2019s ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-common/geometry/placement3d/"},"placement"),", which contain its location in the world, by calling ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/imodelconnection/imodelconnection/imodelconnection.elements/getplacements/"},"iModel.elements.getPlacements")," with the element\u2019s id. From the placements we get the elements center point."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript","data-language":"typescript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> elementCenter <span class="token operator">=</span> placements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getWorldCorners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}})),(0,r.kt)("p",null,"Finally, we create a new instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementOfInterestMarker")," and add it to our decorator\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"_markers")," array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript","data-language":"typescript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">this</span><span class="token punctuation">.</span>_markers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ElementOfInterestMarker</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> elementProps<span class="token punctuation">.</span>title<span class="token punctuation">,</span> _onMouseButtonCallback<span class="token punctuation">,</span> elementCenter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}})),(0,r.kt)("p",null,"However, ",(0,r.kt)("inlineCode",{parentName:"p"},"getPlacements()")," is an async method, so we need to wrap the previous lines inside a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.then")," statement."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript","data-language":"typescript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'iModel<span class="token punctuation">.</span>elements<span class="token punctuation">.</span><span class="token function">getPlacements</span><span class="token punctuation">(</span>elementProps<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>placements<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}})),(0,r.kt)("p",null,"Refer to the code snippet for the necessary import statements.")),(0,r.kt)(d,{subSection:!0,actions:[(0,r.kt)(m,{mdxType:"Title"},"ElementOfInterestDecorator's constructor"),(0,r.kt)(k,{language:"typescript",code:"constructor(elements: ElementOfInterest[], image: HTMLImageElement, iModel: IModelConnection) {\n  elements.forEach((element) => {this._createMarker(element, image, iModel)});\n}",mdxType:"CodeBlock"}),(0,r.kt)(m,{mdxType:"Title"},"Finalized contents of ElementOfInterestDecorator.ts"),(0,r.kt)(k,{language:"typescript",code:'import { Id64String } from "@itwin/core-bentley";\nimport { DecorateContext, Decorator, IModelApp, IModelConnection, StandardViewId } from "@itwin/core-frontend";\nimport { ElementOfInterestMarker } from "./ElementOfInterestMarker";\n\nexport interface ElementOfInterest {\n  id: Id64String,\n  title: string,\n  viewOrientation: StandardViewId\n}\n\nexport class ElementOfInterestDecorator implements Decorator {\n  private _markers: ElementOfInterestMarker[] = [];\n\n  private _zoomToElementCallback = (elementId: Id64String, viewOrientation: StandardViewId) => {\n    const vp = IModelApp.viewManager.selectedView;\n    if (vp !== undefined)\n      vp.zoomToElements(elementId, {standardViewId: viewOrientation, animateFrustumChange: true})\n  }\n\n  private _createMarker = (element: ElementOfInterest, image: HTMLImageElement, iModel: IModelConnection, ) => {\n    const _onMouseButtonCallback = () => this._zoomToElementCallback(element.id, element.viewOrientation);\n    iModel.elements.getPlacements(element.id).then((placements) => {\n      const elementCenter = placements[0].getWorldCorners().getCenter();\n      this._markers.push(new ElementOfInterestMarker(image, element.title, _onMouseButtonCallback, elementCenter));\n    });\n  }\n\n  constructor(elements: ElementOfInterest[], image: HTMLImageElement, iModel: IModelConnection) {\n    elements.forEach((element) => {this._createMarker(element, image, iModel)});\n  }\n\n  public decorate = (context: DecorateContext) => {\n    if (context.viewport.view.isSpatialView()) {\n      this._markers.forEach(marker => marker.addDecoration(context));\n    }\n  }\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h4",{id:"constructor-1"},"Constructor"),(0,r.kt)("p",null,"To complete our decorator class, let\u2019s add a constructor that creates the markers from a supplied image, an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementOfInterest")," and an ",(0,r.kt)("inlineCode",{parentName:"p"},"IModelConnection"),". We simply call the ",(0,r.kt)("inlineCode",{parentName:"p"},"_createMarker")," method for each of the elements in the supplied array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript","data-language":"typescript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'elements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_createMarker</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> image<span class="token punctuation">,</span> iModel<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}})),(0,r.kt)("p",null,"Again, make sure to import the required objects."),(0,r.kt)("p",null,"Our decorator class is now complete, you can see the final contents of ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementOfInterestDecorator.ts")," in the code snippet.")),(0,r.kt)(d,{subSection:!0,actions:[(0,r.kt)(m,{mdxType:"Title"},"Finalized contents of App.tsx"),(0,r.kt)(k,{language:"tsx",code:'import "./App.scss";\n\nimport { BrowserAuthorizationClient } from "@itwin/browser-authorization";\nimport { FitViewTool, imageElementFromUrl, IModelApp, IModelConnection, StandardViewId } from "@itwin/core-frontend";\nimport type { ScreenViewport } from "@itwin/core-frontend";\nimport { FillCentered } from "@itwin/core-react";\nimport { ProgressLinear } from "@itwin/itwinui-react";\nimport {\n  useAccessToken,\n  Viewer,\n  ViewerPerformance,\n} from "@itwin/web-viewer-react";\nimport React, { useCallback, useEffect, useMemo, useState } from "react";\n\nimport { history } from "./history";\n\nimport { ElementOfInterest, ElementOfInterestDecorator } from "./ElementOfInterestDecorator";\n\nconst App: React.FC = () => {\n  const [iModelId, setIModelId] = useState(process.env.IMJS_IMODEL_ID);\n  const [iTwinId, setITwinId] = useState(process.env.IMJS_ITWIN_ID);\n\n  const accessToken = useAccessToken();\n\n  const authClient = useMemo(\n    () =>\n      new BrowserAuthorizationClient({\n        scope: process.env.IMJS_AUTH_CLIENT_SCOPES ?? "",\n        clientId: process.env.IMJS_AUTH_CLIENT_CLIENT_ID ?? "",\n        redirectUri: process.env.IMJS_AUTH_CLIENT_REDIRECT_URI ?? "",\n        postSignoutRedirectUri: process.env.IMJS_AUTH_CLIENT_LOGOUT_URI,\n        responseType: "code",\n        authority: process.env.IMJS_AUTH_AUTHORITY,\n      }),\n    []\n  );\n\n  const login = useCallback(async () => {\n    try {\n      await authClient.signInSilent();\n    } catch {\n      await authClient.signIn();\n    }\n  }, [authClient]);\n\n  useEffect(() => {\n    void login();\n  }, [login]);\n\n  useEffect(() => {\n    if (accessToken) {\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.has("iTwinId")) {\n        setITwinId(urlParams.get("iTwinId") as string);\n      } else {\n        if (!process.env.IMJS_ITWIN_ID) {\n          throw new Error(\n            "Please add a valid iTwin ID in the .env file and restart the application or add it to the iTwinId query parameter in the url and refresh the page. See the README for more information."\n          );\n        }\n      }\n\n      if (urlParams.has("iModelId")) {\n        setIModelId(urlParams.get("iModelId") as string);\n      } else {\n        if (!process.env.IMJS_IMODEL_ID) {\n          throw new Error(\n            "Please add a valid iModel ID in the .env file and restart the application or add it to the iModelId query parameter in the url and refresh the page. See the README for more information."\n          );\n        }\n      }\n    }\n  }, [accessToken]);\n\n  useEffect(() => {\n    if (accessToken && iTwinId && iModelId) {\n      history.push(`?iTwinId=${iTwinId}&iModelId=${iModelId}`);\n    }\n  }, [accessToken, iTwinId, iModelId]);\n\n  /** NOTE: This function will execute the "Fit View" tool after the iModel is loaded into the Viewer.\n   * This will provide an "optimal" view of the model. However, it will override any default views that are\n   * stored in the iModel. Delete this function and the prop that it is passed to if you prefer\n   * to honor default views when they are present instead (the Viewer will still apply a similar function to iModels that do not have a default view).\n   */\n  const viewConfiguration = useCallback((viewPort: ScreenViewport) => {\n    // default execute the fitview tool and use the iso standard view after tile trees are loaded\n    const tileTreesLoaded = () => {\n      return new Promise((resolve, reject) => {\n        const start = new Date();\n        const intvl = setInterval(() => {\n          if (viewPort.areAllTileTreesLoaded) {\n            ViewerPerformance.addMark("TilesLoaded");\n            void ViewerPerformance.addAndLogMeasure(\n              "TileTreesLoaded",\n              "ViewerStarting",\n              "TilesLoaded",\n              viewPort.numReadyTiles\n            );\n            clearInterval(intvl);\n            resolve(true);\n          }\n          const now = new Date();\n          // after 20 seconds, stop waiting and fit the view\n          if (now.getTime() - start.getTime() > 20000) {\n            reject();\n          }\n        }, 100);\n      });\n    };\n\n    tileTreesLoaded().finally(() => {\n      void IModelApp.tools.run(FitViewTool.toolId, viewPort, true, false);\n      viewPort.view.setStandardRotation(StandardViewId.Iso);\n    });\n  }, []);\n\n  const viewCreatorOptions = useMemo(\n    () => ({ viewportConfigurer: viewConfiguration, skyboxOn: true }),\n    [viewConfiguration]\n  );\n\n  /** \n  * List of model elements we will create markers for. \n  * In a typical application, we would get these by querying the iModel or from an external source. \n  */\n  const elements: ElementOfInterest[] = [\n    {id: "0x12c", title: "Front Door", viewOrientation: StandardViewId.Front},\n    {id: "0x1fa", title: "Small Window", viewOrientation: StandardViewId.Front},\n    {id: "0xf15", title: "Patio Door", viewOrientation: StandardViewId.Back},\n    {id: "0x26c", title: "Television", viewOrientation: StandardViewId.Right},\n  ];\n\n  /** \n  * Our marker image\n  */\n  const markerImagePromise = imageElementFromUrl("magnifying-glass.svg");\n\n  /**\n  * Function we will be called when the iModelConnection is established.\n  * We provide our decorator with the list of elements we wish to create markers for, \n  * then we add our decorator to the viewManager. \n  */\n  const onIModelConnected = async (iModel: IModelConnection) => {\n    const elementOfInterestdecorator = new ElementOfInterestDecorator(\n      elements,\n      await markerImagePromise,\n      iModel\n    );\n    IModelApp.viewManager.addDecorator(elementOfInterestdecorator);\n  }\n\n  return (\n    <div className="viewer-container">\n      {!accessToken && (\n        <FillCentered>\n          <div className="signin-content">\n            <ProgressLinear indeterminate={true} labels={["Signing in..."]} />\n          </div>\n        </FillCentered>\n      )}\n      <Viewer\n        iTwinId={iTwinId}\n        iModelId={iModelId}\n        authClient={authClient}\n        viewCreatorOptions={viewCreatorOptions}\n        enablePerformanceMonitors={true} // see description in the README (https://www.npmjs.com/package/@itwin/desktop-viewer-react)\n        onIModelConnected={onIModelConnected} // The viewer calls this function when the connection is established\n      />\n    </div>\n  );\n};\n\nexport default App;\n',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,r.kt)("h3",{id:"23-modifying-apptsx"},"2.3 Modifying App.tsx"),(0,r.kt)("p",null,"We have created our marker class and our decorator class. All that remains is to create our decorator instance and supply it to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Viewer"),"'s ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/views/viewmanager/"},"ViewManager")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"App.tsx"),"."),(0,r.kt)("p",null,"Our decorator\u2019s constructor requires an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementOfInterest")," from which to create markers. In this tutorial, we supply these manually."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript","data-language":"typescript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> elements<span class="token operator">:</span> ElementOfInterest<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token string">"0x12c"</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">"Front Door"</span><span class="token punctuation">,</span> viewOrientation<span class="token operator">:</span> StandardViewId<span class="token punctuation">.</span>Front<span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token string">"0x1fa"</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">"Small Window"</span><span class="token punctuation">,</span> viewOrientation<span class="token operator">:</span> StandardViewId<span class="token punctuation">.</span>Front<span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token string">"0xf15"</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">"Patio Door"</span><span class="token punctuation">,</span> viewOrientation<span class="token operator">:</span> StandardViewId<span class="token punctuation">.</span>Back<span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token string">"0x26c"</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">"Television"</span><span class="token punctuation">,</span> viewOrientation<span class="token operator">:</span> StandardViewId<span class="token punctuation">.</span>Right<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n'}})),(0,r.kt)("p",null,"In a real application, we would problably receive this information from an external source or through user interaction with our app."),(0,r.kt)("p",null,"The constructor also requires an image in the form of and ",(0,r.kt)("inlineCode",{parentName:"p"},"HTMLImageElement"),". To generate it, save an ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types"},"HTML-compatible")," image file in the app\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," directory."),(0,r.kt)("p",null,"You can ",(0,r.kt)("a",{href:"/images/tutorials/adding-decorators-and-markers/magnifying-glass.svg",download:!0},"download")," this image,"),(0,r.kt)("img",{src:"/images/tutorials/adding-decorators-and-markers/magnifying-glass.svg",alt:"Cartoony magnifying glass icon.",style:{display:"block",width:"80%","max-width":"240px","margin-left":"auto","margin-right":"auto","margin-top":"22px","margin-bottom":"22px"}}),(0,r.kt)("p",null,"or you may download a different compatible one from elsewhere on the internet."),(0,r.kt)("p",null,"Then, load the image using the utility function ",(0,r.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/core-frontend/rendering/imageelementfromurl/"},"imageElementFromUrl"),", which is async."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript","data-language":"typescript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> markerImagePromise <span class="token operator">=</span> <span class="token function">imageElementFromUrl</span><span class="token punctuation">(</span><span class="token string">"magnifying-glass.svg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}})),(0,r.kt)("p",null,"Lastly, our decorator\u2019s constructor requires an ",(0,r.kt)("inlineCode",{parentName:"p"},"IModelConnection"),", which is set up by the ",(0,r.kt)("inlineCode",{parentName:"p"},"Viewer")," component. Conveniently, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Viewer")," component accepts an optional ",(0,r.kt)("inlineCode",{parentName:"p"},"onIModelConnected")," property to supply a function to be called when the connection to the iModel is established. The function is called with the ",(0,r.kt)("inlineCode",{parentName:"p"},"IModelConnection")," as input. We define such a function, which we use to instantiate our decorator and supply it to the ",(0,r.kt)("inlineCode",{parentName:"p"},"viewManager"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript","data-language":"typescript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> <span class="token function-variable function">onIModelConnected</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>iModel<span class="token operator">:</span> IModelConnection<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> elementOfInterestdecorator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ElementOfInterestDecorator</span><span class="token punctuation">(</span>\n    elements<span class="token punctuation">,</span>\n    <span class="token keyword">await</span> <span class="token function">imageElementFromUrl</span><span class="token punctuation">(</span>markerImageUrl<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    iModel\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  IModelApp<span class="token punctuation">.</span>viewManager<span class="token punctuation">.</span><span class="token function">addDecorator</span><span class="token punctuation">(</span>elementOfInterestdecorator<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n'}})),(0,r.kt)("p",null,"Notice our function is async because we wait on the image\u2019s promise to be resolved."),(0,r.kt)("p",null,"Now, we supply the function to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Viewer")," component by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"onIModelConnected={onIModelConnected}"),". Also, make sure to add the necessary import statements."),(0,r.kt)("p",null,"Congratulations, your first Viewer Application using view decorations is now complete!",(0,r.kt)("br",null),"\nMake sure to try it out by running ",(0,r.kt)("inlineCode",{parentName:"p"},"npm start")," and then opening ",(0,r.kt)("a",{parentName:"p",href:"https://localhost:3000"},"https://localhost:3000")," in your browser."),(0,r.kt)(u,{autoplay:"true",src:"/images/tutorials/adding-decorators-and-markers/sample-app-black-bg.webm",alt:"Screen recording of the Viewer app being used.",style:{display:"block",width:"80%","margin-left":"auto","margin-right":"auto"},mdxType:"WebMLoop"}),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": If you wish to get rid of the black background in your app, you can turn on the default skybox by adding ",(0,r.kt)("inlineCode",{parentName:"p"},"skyboxOn: true")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"viewCreatorOptions"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript","data-language":"typescript","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> viewCreatorOptions <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> viewportConfigurer<span class="token operator">:</span> viewConfiguration<span class="token punctuation">,</span> skyboxOn<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>viewConfiguration<span class="token punctuation">]</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}}))),(0,r.kt)(h,{mdxType:"ContinueLearningSection"},(0,r.kt)("h2",{id:"more-resources-that-you-may-like"},"More resources that you may like"),(0,r.kt)(w,{mdxType:"TileList"},(0,r.kt)(g,{title:"View Decorations",href:"https://www.itwinjs.org/learning/frontend/viewdecorations/",description:"Detailed explanation of View Decorations and their uses in the iTwin.js Library.",isExternal:!0,mdxType:"ResourceTile"}),(0,r.kt)(g,{title:"Markers",href:"https://www.itwinjs.org/learning/frontend/markers/",description:"Learn more about the iTwin.js Library's Marker component.",isExternal:!0,mdxType:"ResourceTile"}),(0,r.kt)(g,{title:"The Display System",href:"https://www.itwinjs.org/learning/display/",description:"Dive deeper into the iTwin.js Library's display system.",isExternal:!0,mdxType:"ResourceTile"}),(0,r.kt)(g,{title:"Simple Marker Sample App",href:"https://www.itwinjs.org/sandboxes/RaphaelMelancon/Simple%20Marker%20Sample%20App",description:"A community sandbox implementing the iTwin Viewer Application developed in this tutorial.",isExternal:!0,mdxType:"ResourceTile"}))))}y.isMDXComponent=!0;var v=function(){return[{id:"introduction",level:2,title:"Introduction",children:[]},{id:"prerequisites",level:2,title:"Prerequisites",children:[]},{id:"1-view-decorations-decorators-and-markers",level:2,title:"1. View Decorations, Decorators and Markers",children:[{id:"11-view-decorations",level:3,title:"1.1 View Decorations",children:[]},{id:"12-decorators",level:3,title:"1.2 Decorators",children:[]},{id:"13-markers",level:3,title:"1.3 Markers",children:[]}]},{id:"2-creating-a-simple-app-to-display-markers-for-elements-of-interest",level:2,title:"2. Creating a simple app to display markers for elements of interest",children:[{id:"21-creating-our-elementofinterestmarker-class",level:3,title:"2.1 Creating our ElementOfInterestMarker class",children:[]},{id:"22-creating-our-elementofinterestdecorator-class",level:3,title:"2.2 Creating our ElementOfInterestDecorator class",children:[]},{id:"23-modifying-apptsx",level:3,title:"2.3 Modifying App.tsx",children:[]}]},{id:"more-resources-that-you-may-like",level:2,title:"More resources that you may like",children:[]}]}}}]);
(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6693],{61882:function(e,t,n){"use strict";n.d(t,{Pu:function(){return s},ZP:function(){return f},Jt:function(){return y}});var i=n(159),o=n(91164),r=n(67294),l=n(3905),a=["components"],s=(r.createElement,{title:'Customizing the iTwin Viewer - "The Basics"',tile:{name:'Customizing the iTwin Viewer - "The Basics"',description:"This tutorial will take you through the first steps of customizing your iTwin Web Viewer. First you will learn how to add a new user interface component. Later you will customize that component to change the background color of your viewer.",thumbnail:"/images/itwin-viewer-hello-world-sample-small.png",href:"/tutorials/itwin-viewer-hello-world",durationInMinutes:30,relatedApiIds:["visualization"],showInFirstSteps:!0,firstStepsSequenceNumber:2}}),d=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",t)}},p=d("Introduction"),c=d("TutorialSection"),u=d("Title"),g=d("CodeBlock"),m=d("ContinueLearningSection"),h=d("TileList"),w=d("Tile"),k=d("ResourceTile"),v={metadata:s};function f(e){var t=e.components,n=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,i.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(p,{skillLevel:"Basic",durationInMinutes:"30",summaryImageSrc:"/images/itwin-viewer-hello-world-sample.gif",mdxType:"Introduction"},(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"This tutorial will take you through the first steps of customizing your ",(0,l.kt)("strong",{parentName:"p"},"iTwin Web Viewer"),". First you will learn ",(0,l.kt)("strong",{parentName:"p"},"how to add a new user interface component"),". Later you will ",(0,l.kt)("strong",{parentName:"p"},"customize that component")," to change the background color of your viewer.")),(0,l.kt)(c,{mdxType:"TutorialSection"},(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("p",null,"This tutorial assumes that you already have:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Your own local source for the iTwin Web Viewer based on the template @itwin/web-viewer",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Instructions for that can be found ",(0,l.kt)("a",{parentName:"li",href:"/tutorials/web-application-quick-start"},"here")))),(0,l.kt)("li",{parentName:"ul"},"Configured your local source to open the \u201cHouse Model\u201d sample iModel.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Instructions to use this sample iModel can be found ",(0,l.kt)("a",{parentName:"li",href:"/tutorials/create-test-imodel-sample"},"here"),"."))))),(0,l.kt)(c,{actions:[(0,l.kt)(u,{mdxType:"Title"},"Return statement of App.tsx where the Viewer component is configured"),(0,l.kt)(g,{language:"jsx",code:"return (\n    <div className=\"viewer-container\">\n      <Header\n        handleLogin={onLoginClick}\n        loggedIn={isAuthorized}\n        handleLogout={onLogoutClick}\n      />\n      {isLoggingIn ? (\n        <span>\"Logging in....\"</span>\n      ) : (\n        isAuthorized && (\n          <Viewer\n            iTwinId={process.env.IMJS_ITWIN_ID ?? ''}\n            iModelId={process.env.IMJS_IMODEL_ID ?? ''}\n            authClient={AuthorizationClient.oidcClient}\n          />\n        )\n      )}\n    </div>\n  );",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,l.kt)("h2",{id:"1-add-new-itwin-web-viewer-interface-component"},"1. Add new iTwin Web Viewer interface component"),(0,l.kt)("p",null,"The iTwin Web Viewer viewer template generates several files. To start with, let\u2019s take a look at the ",(0,l.kt)("inlineCode",{parentName:"p"},"App.tsx")," file. This is where you should start in customizing your iTwin Viewer."),(0,l.kt)("p",null,"To start with ",(0,l.kt)("inlineCode",{parentName:"p"},"App.tsx")," contains a single react functional component fittingly called ",(0,l.kt)("inlineCode",{parentName:"p"},"App"),". The ",(0,l.kt)("inlineCode",{parentName:"p"},"App")," component is responsible for:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Authenticating the user"),(0,l.kt)("li",{parentName:"ol"},"Rendering the ",(0,l.kt)("inlineCode",{parentName:"li"},"Viewer")," component")),(0,l.kt)("p",null,"At the bottom of ",(0,l.kt)("inlineCode",{parentName:"p"},"App.tsx")," you can see the ",(0,l.kt)("inlineCode",{parentName:"p"},"return")," statement where the ",(0,l.kt)("inlineCode",{parentName:"p"},"Viewer")," component is configured. Let\u2019s focus on that for now.")),(0,l.kt)(c,{hasTitle:!1,actions:[(0,l.kt)(u,{mdxType:"Title"},'Viewer component with "Hello World" span'),(0,l.kt)(g,{language:"jsx",code:"<div style={{ height: '100%' }}>\n  <span>\"Hello World\"</span>\n  <Viewer\n    iTwinId={process.env.IMJS_ITWIN_ID ?? ''}\n    iModelId={process.env.IMJS_IMODEL_ID ?? ''}\n    authClient={AuthorizationClient.oidcClient}\n  />\n</div>",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"App")," is just a react component. Like any react component, it returns JSX to tell react how to create HTML for the browser to render. Let\u2019s start off by adding some custom code to our JSX. We can render a \u201cHello World\u201d ",(0,l.kt)("inlineCode",{parentName:"p"},"span")," above the viewer by simply creating the element above the component. Note that this needs to be surrounded in a ",(0,l.kt)("inlineCode",{parentName:"p"},"div")," per the single parent rule for react.")),(0,l.kt)(c,{subSection:!0,mdxType:"TutorialSection"},(0,l.kt)("h4",{id:"11-result"},"1.1 Result"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"/images/hello_world_above.png",alt:"HelloWorldAbove"}))),(0,l.kt)(c,{actions:[(0,l.kt)(u,{mdxType:"Title"},"Passing uiProviders prop to Viewer component"),(0,l.kt)(g,{language:"jsx",code:"<Viewer\n  iTwinId={process.env.IMJS_ITWIN_ID ?? ''}\n  iModelId={process.env.IMJS_IMODEL_ID ?? ''}\n  authClient={AuthorizationClient.oidcClient}\n  uiProviders={[new MyFirstUiProvider()]}\n/>",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,l.kt)("h2",{id:"2-your-first-ui-widget"},"2. Your first UI Widget"),(0,l.kt)("p",null,"So far, we haven\u2019t done anything to change the way the viewer works. We\u2019ve only just added a new ",(0,l.kt)("inlineCode",{parentName:"p"},"span")," element ",(0,l.kt)("em",{parentName:"p"},"above")," the viewer. To add our \u201cHello World\u201d ",(0,l.kt)("inlineCode",{parentName:"p"},"span")," into the viewer, we need to pass the ",(0,l.kt)("inlineCode",{parentName:"p"},"uiProviders")," prop to the ",(0,l.kt)("inlineCode",{parentName:"p"},"Viewer")," component."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"uiProviders")," prop is typed to require an array of objects that implements the ",(0,l.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/ui-abstract/uiitemsprovider/uiitemsprovider/"},"UIItemsProvider")," interface. Passing in the array will allow us to extend the ",(0,l.kt)("inlineCode",{parentName:"p"},"Viewer")," with custom UI components. To do that, we need to define our ",(0,l.kt)("inlineCode",{parentName:"p"},"MyFirstUiProvider")," class so that it implements the ",(0,l.kt)("inlineCode",{parentName:"p"},"UiItemsProvider")," interface. Our new provider will tell the ",(0,l.kt)("inlineCode",{parentName:"p"},"Viewer")," to include our \u201cHello world\u201d ",(0,l.kt)("inlineCode",{parentName:"p"},"span")," within the view.")),(0,l.kt)(c,{hasTitle:!1,actions:[(0,l.kt)(u,{mdxType:"Title"},'"MyFirstUiProvider.tsx" file content'),(0,l.kt)(g,{language:"typescript",code:"import {\n  AbstractWidgetProps,\n  StagePanelLocation,\n  StagePanelSection,\n  UiItemsProvider,\n} from '@bentley/ui-abstract';\n\nimport * as React from 'react';\n\nexport class MyFirstUiProvider implements UiItemsProvider {\n  public readonly id = 'MyFirstProviderId';\n\n  public provideWidgets(\n    stageId: string,\n    stageUsage: string,\n    location: StagePanelLocation,\n    section?: StagePanelSection\n  ): ReadonlyArray<AbstractWidgetProps> {\n    const widgets: AbstractWidgetProps[] = [];\n\n    if (\n      location === StagePanelLocation.Right &&\n      section === StagePanelSection.Start\n    ) {\n      const helloWidget: AbstractWidgetProps = {\n        id: 'HelloWidget',\n        label: 'Hello',\n        getWidgetContent() {\n          return <span>\"Hello World\"</span>;\n        },\n      };\n\n      widgets.push(helloWidget);\n    }\n\n    return widgets;\n  }\n}",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,l.kt)("p",null,"Create a new file called ",(0,l.kt)("inlineCode",{parentName:"p"},"MyFirstUiProvider.tsx")," with contents shown in a code snippet."),(0,l.kt)("p",null,"Let\u2019s review that code. We\u2019ve defined our new ",(0,l.kt)("inlineCode",{parentName:"p"},"MyFirstUiProvider")," class. In the new class we\u2019ve defined ",(0,l.kt)("inlineCode",{parentName:"p"},"public readonly id")," which is required to distinguish between different providers. Then notice that we\u2019ve defined just one function called ",(0,l.kt)("inlineCode",{parentName:"p"},"provideWidgets"),". This function will be called several times as the ",(0,l.kt)("inlineCode",{parentName:"p"},"Viewer")," is building up the user interface. We will return an empty array except for when the ",(0,l.kt)("inlineCode",{parentName:"p"},"location")," is equal to ",(0,l.kt)("inlineCode",{parentName:"p"},"StagePanelLocation.Right")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"section")," is equal to ",(0,l.kt)("inlineCode",{parentName:"p"},"StagePanelSection.Start"),". In that case, we will return a single widget that will supply our \u201cHello World\u201d ",(0,l.kt)("inlineCode",{parentName:"p"},"span"),"."),(0,l.kt)("p",null,"Our ",(0,l.kt)("inlineCode",{parentName:"p"},"helloWidget")," consists of three attributes:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"id")," - used to uniquely identify the widget"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"label")," - description label for our widget"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"getWidgetContent()")," - returns our custom UI component"))),(0,l.kt)(c,{hasTitle:!1,actions:[(0,l.kt)(u,{mdxType:"Title"},"MyFirstUiProvider import"),(0,l.kt)(g,{language:"typescript",code:'import { MyFirstUiProvider } from "./MyFirstUiProvider";',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,l.kt)("p",null,"At this point we need to import ",(0,l.kt)("inlineCode",{parentName:"p"},"MyFirstUiProvider")," at the top of file ",(0,l.kt)("inlineCode",{parentName:"p"},"App.tsx"),".")),(0,l.kt)(c,{hasTitle:!1,actions:[(0,l.kt)(u,{mdxType:"Title"},"Return statement in App.tsx should look like this:"),(0,l.kt)(g,{language:"typescript",code:"return (\n  <div className=\"viewer-container\">\n    <Header\n      handleLogin={onLoginClick}\n      loggedIn={isAuthorized}\n      handleLogout={onLogoutClick}\n    />\n    {isLoggingIn ? (\n      <span>\"Logging in....\"</span>\n    ) : (\n      isAuthorized && (\n        <Viewer\n          iTwinId={process.env.IMJS_ITWIN_ID ?? ''}\n          iModelId={process.env.IMJS_IMODEL_ID ?? ''}\n          authClient={AuthorizationClient.oidcClient}\n          uiProviders={[new MyFirstUiProvider()]}\n        />\n      )\n    )}\n  </div>\n);",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,l.kt)("p",null,"Finally, let\u2019s clean up the ",(0,l.kt)("inlineCode",{parentName:"p"},"span")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"div")," that we added directly into the ",(0,l.kt)("inlineCode",{parentName:"p"},"App")," component earlier.")),(0,l.kt)(c,{subSection:!0,mdxType:"TutorialSection"},(0,l.kt)("h4",{id:"21-result"},"2.1 Result"),(0,l.kt)("p",null,"Now we have our \u201cHello World\u201d ",(0,l.kt)("inlineCode",{parentName:"p"},"span")," displaying in a panel within the ",(0,l.kt)("inlineCode",{parentName:"p"},"Viewer")," component. It should look like this:"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"/images/hello_world_widget.png",alt:"HelloWorldWidget"}))),(0,l.kt)(c,{mdxType:"TutorialSection"},(0,l.kt)("h2",{id:"3-beyond-hello-world"},"3. Beyond Hello World"),(0,l.kt)("p",null,"Saying hello to the world can be fun but we need to get past that. For this next step we\u2019ll swap out our trivial ",(0,l.kt)("inlineCode",{parentName:"p"},"helloWidget")," with something a little more interactive: a ",(0,l.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/ui-core/toggle/toggle/"},"Toggle"),". Eventually this toggle will control the background color, so we\u2019ll name our new widget ",(0,l.kt)("inlineCode",{parentName:"p"},"backgroundColorWidget"),". Instead of returning a ",(0,l.kt)("inlineCode",{parentName:"p"},"span")," we\u2019ll return a ",(0,l.kt)("inlineCode",{parentName:"p"},"Toggle"),".")),(0,l.kt)(c,{hasTitle:!1,actions:[(0,l.kt)(u,{mdxType:"Title"},"Toggle import"),(0,l.kt)(g,{language:"typescript",code:"import { Toggle } from '@bentley/ui-core';",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,l.kt)("p",null,"Start by navigating back to ",(0,l.kt)("inlineCode",{parentName:"p"},"MyFirstUiProvider.tsx")," and adding an import for ",(0,l.kt)("inlineCode",{parentName:"p"},"Toggle")," at the top of the file.")),(0,l.kt)(c,{hasTitle:!1,actions:[(0,l.kt)(u,{mdxType:"Title"},"Switch out the helloWidget with the new backgroundColorWidget"),(0,l.kt)(g,{language:"typescript",code:"if (location === StagePanelLocation.Right) {\n  const backgroundColorWidget: AbstractWidgetProps = {\n    id: 'BackgroundColorWidget',\n    label: 'Background Color Toggle',\n    getWidgetContent() {\n      return <Toggle />;\n    },\n  };\n\n  widgets.push(backgroundColorWidget);\n}",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,l.kt)("p",null,"Next switch out the ",(0,l.kt)("inlineCode",{parentName:"p"},"helloWidget")," with the new ",(0,l.kt)("inlineCode",{parentName:"p"},"backgroundColorWidget"),".")),(0,l.kt)(c,{hasTitle:!1,mdxType:"TutorialSection"},(0,l.kt)("p",null,"Notice the only significant difference is that ",(0,l.kt)("inlineCode",{parentName:"p"},"getWidgetContent")," is now returning a ",(0,l.kt)("inlineCode",{parentName:"p"},"Toggle"),". It doesn\u2019t do anything interesting yet, but it should look like this:"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"/images/background_color_toggle.png",alt:"Background Color Toggle"}))),(0,l.kt)(c,{actions:[(0,l.kt)(u,{mdxType:"Title"},"Passing the onChange prop to the Toggle component"),(0,l.kt)(g,{language:"typescript",code:"return (\n  <Toggle\n    onChange={(toggle) => {\n      if (MyFirstUiProvider.toggledOnce === false) {\n        MyFirstUiProvider.originalColor =\n          IModelApp.viewManager.selectedView!.displayStyle.backgroundColor.tbgr;\n        MyFirstUiProvider.toggledOnce = true;\n      }\n\n      const color = toggle\n        ? ColorDef.computeTbgrFromString('skyblue')\n        : MyFirstUiProvider.originalColor;\n      IModelApp.viewManager.selectedView!.overrideDisplayStyle({\n        backgroundColor: color,\n      });\n    }}\n  />\n);",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,l.kt)("h2",{id:"4-changing-the-background-color"},"4. Changing the background color"),(0,l.kt)("p",null,"For this last step, let\u2019s put our new toggle to work. We want the toggle to control the background color in the view of our house iModel. When the toggle is on, we\u2019ll override the background color to \u201cskyblue\u201d. When the toggle is off, we\u2019ll change the background color back to its original color."),(0,l.kt)("p",null,"To do this, we need to pass the ",(0,l.kt)("inlineCode",{parentName:"p"},"onChange")," prop to the ",(0,l.kt)("inlineCode",{parentName:"p"},"Toggle")," component.")),(0,l.kt)(c,{hasTitle:!1,actions:[(0,l.kt)(u,{mdxType:"Title"},"Adding toggledOnce and originalColor variables to MyFirstUiProvider class"),(0,l.kt)(g,{language:"typescript",code:"export class MyFirstUiProvider implements UiItemsProvider {\n  public readonly id = 'HelloWorldProvider';\n  public static toggledOnce: boolean = false;\n  public static originalColor: number;",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,l.kt)("p",null,"Since we\u2019re using two new static variables here, we need to add this to to our ",(0,l.kt)("inlineCode",{parentName:"p"},"MyFirstUiProvider")," class at the beginning of our definition.")),(0,l.kt)(c,{hasTitle:!1,actions:[(0,l.kt)(u,{mdxType:"Title"},"Completed MyFirstUiProvider.tsx file"),(0,l.kt)(g,{language:"typescript",code:"import { ColorDef } from '@bentley/imodeljs-common';\nimport { IModelApp } from '@bentley/imodeljs-frontend';\nimport {\n  AbstractWidgetProps,\n  StagePanelLocation,\n  StagePanelSection,\n  UiItemsProvider,\n} from '@bentley/ui-abstract';\nimport { Toggle } from '@bentley/ui-core';\n\nimport * as React from 'react';\n\nexport class MyFirstUiProvider implements UiItemsProvider {\n  public readonly id = 'HelloWorldProvider';\n  public static toggledOnce: boolean = false;\n  public static originalColor: number;\n\n  public provideWidgets(\n    stageId: string,\n    stageUsage: string,\n    location: StagePanelLocation,\n    section?: StagePanelSection\n  ): ReadonlyArray<AbstractWidgetProps> {\n    const widgets: AbstractWidgetProps[] = [];\n    if (\n      location === StagePanelLocation.Right &&\n      section === StagePanelSection.Start\n    ) {\n      const backgroundColorWidget: AbstractWidgetProps = {\n        id: 'BackgroundColorWidget',\n        label: 'Background Color Toggle',\n        getWidgetContent() {\n          return (\n            <Toggle\n              onChange={(toggle) => {\n                if (MyFirstUiProvider.toggledOnce === false) {\n                  MyFirstUiProvider.originalColor =\n                    IModelApp.viewManager.selectedView!.displayStyle.backgroundColor.tbgr;\n                  MyFirstUiProvider.toggledOnce = true;\n                }\n\n                const color = toggle\n                  ? ColorDef.computeTbgrFromString('skyblue')\n                  : MyFirstUiProvider.originalColor;\n                IModelApp.viewManager.selectedView!.overrideDisplayStyle({\n                  backgroundColor: color,\n                });\n              }}\n            />\n          );\n        },\n      };\n\n      widgets.push(backgroundColorWidget);\n    }\n\n    return widgets;\n  }\n}",mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,l.kt)("p",null,"The first condition checks for only the first trigger of the toggle using boolean ",(0,l.kt)("inlineCode",{parentName:"p"},"toggledOnce"),". If true, we need to store the original color in static variable ",(0,l.kt)("inlineCode",{parentName:"p"},"MyFirstUiProvider.originalColor"),". We are using the global singleton ",(0,l.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/imodeljs-frontend/imodelapp/imodelapp/"},"IModelApp")," to get to the viewManager that can provide the current ",(0,l.kt)("inlineCode",{parentName:"p"},"backgroundColor"),". We also need to flip variable ",(0,l.kt)("inlineCode",{parentName:"p"},"MyFirstUiProvider.toggledOnce")," to true to make sure we only store the original color once."),(0,l.kt)("p",null,"Notice we\u2019re using the function ",(0,l.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/imodeljs-frontend/views/viewport/overridedisplaystyle/"},"overrideDisplayStyle()")," on the currently selected view. To get the view, we use the same global singleton ",(0,l.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/imodeljs-frontend/imodelapp/imodelapp/"},"IModelApp")," to get to the ",(0,l.kt)("a",{parentName:"p",href:"https://www.itwinjs.org/reference/imodeljs-frontend/views/viewmanager/"},"viewManager"),"."),(0,l.kt)("p",null,"Our completed ",(0,l.kt)("inlineCode",{parentName:"p"},"MyFirstUiProvider.tsx")," file should look similar to the one shown in a code snippet.")),(0,l.kt)(c,{subSection:!0,mdxType:"TutorialSection"},(0,l.kt)("h4",{id:"51-result"},"5.1 Result"),(0,l.kt)("p",null,"Result when the toggle is on:"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"/images/background_toggled_blue.png",alt:"Background blue"})),(0,l.kt)("p",null,"Result when the toggle is off:"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"/images/original_background_color.png",alt:"Background original"}))),(0,l.kt)(m,{mdxType:"ContinueLearningSection"},(0,l.kt)("h2",{id:"continue-learning"},"Continue learning"),(0,l.kt)(h,{mdxType:"TileList"},(0,l.kt)(w,{name:"Adding showcase widgets to your iTwin Viewer",thumbnail:"/images/view_attributes_ported_results.png",description:"This tutorial will take widgets from the sample showcase and add them into your iTwin Viewer using the `uiProviders` prop.",href:"/tutorials/adding-showcase-widgets-to-your-itwin-viewer/",mdxType:"Tile"}),(0,l.kt)(w,{name:"Start building a Viewer App",thumbnail:"/images/retail-tutorial-sample-small.png",description:"This quick start is intended to help you get started with using iTwin Platform visualization components. By the end of this walk-through, you will be able to build and run a web application for viewing an infrastructure digital twin (iTwin).",href:"/tutorials/web-application-quick-start/",mdxType:"Tile"})),(0,l.kt)("h2",{id:"more-resources-that-you-may-like"},"More resources that you may like"),(0,l.kt)(h,{mdxType:"TileList"},(0,l.kt)(k,{title:"Create a test iModel from a Bentley provided sample",href:"/tutorials/create-test-imodel-sample",description:"The quickest way to get access to a cloud hosted iModel is by creating an iModel seeded with Bentley provided sample data.",mdxType:"ResourceTile"}),(0,l.kt)(k,{title:"Sample House Model",href:"/tutorials/create-test-imodel-sample/#house-sample",description:"Bentley provided sample of a House for test iModel creation.",mdxType:"ResourceTile"}),(0,l.kt)(k,{title:"UI Provider",href:"https://www.itwinjs.org/reference/ui-abstract/uiitemsprovider/uiitemsprovider/",description:"Describes interface of objects that want to provide UI component to the running IModelApp.",isExternal:!0,mdxType:"ResourceTile"}),(0,l.kt)(k,{title:"IModelApp",href:"https://www.itwinjs.org/reference/imodeljs-frontend/imodelapp/imodelapp/",description:"Global singleton that connects the user interface with the iTwin.js services.",isExternal:!0,mdxType:"ResourceTile"}),(0,l.kt)(k,{title:"Visit the iTwin Code Sandbox",href:"https://www.itwinjs.org/sandboxes/",description:"The iTwin Code Sandbox provides many samples demonstrating options for customizing the iTwin viewer.",isExternal:!0,mdxType:"ResourceTile"}))))}f.isMDXComponent=!0;var y=function(){return[{id:"introduction",level:2,title:"Introduction",children:[]},{id:"prerequisites",level:2,title:"Prerequisites",children:[]},{id:"1-add-new-itwin-web-viewer-interface-component",level:2,title:"1. Add new iTwin Web Viewer interface component",children:[]},{id:"2-your-first-ui-widget",level:2,title:"2. Your first UI Widget",children:[]},{id:"3-beyond-hello-world",level:2,title:"3. Beyond Hello World",children:[]},{id:"4-changing-the-background-color",level:2,title:"4. Changing the background color",children:[]},{id:"continue-learning",level:2,title:"Continue learning",children:[]},{id:"more-resources-that-you-may-like",level:2,title:"More resources that you may like",children:[]}]}},31389:function(e,t,n){"use strict";n.d(t,{Z:function(){return u}});var i=n(61565),o=n(67294),r=n(94184),l=n.n(r),a=(n(50371),n(73351)),s=n(85893),d=function(e){var t=e.item,n=e.setActiveItem,i=e.className,o=e.activeItem,r=e.prefix;return(0,s.jsx)(s.Fragment,{children:(0,s.jsx)("div",{className:"menuItem-container",children:(0,s.jsx)(a.D,{href:"".concat(null!==r&&void 0!==r?r:"#").concat(t.id),children:(0,s.jsx)("span",{onClick:function(){return n(t.id)},className:"".concat(i," ").concat(t.id===o?"active":""),children:t.title})})})})},p=function(e){var t=e.items,n=e.setActiveItem,i=e.activeItem,o=e.navPrefix;return(0,s.jsx)(s.Fragment,{children:t.map((function(e,t){return(0,s.jsxs)("div",{children:[(0,s.jsx)(d,{item:e,className:"sideMenuItem",setActiveItem:n,activeItem:i,prefix:o},e.id),e.children.map((function(e){return(0,s.jsx)(d,{item:e,className:"sideMenuItem sideMenuSubItem",setActiveItem:n,activeItem:i,prefix:o},e.id)}))]},t)}))})},c=n(71125),u=function(e){var t,n=o.useState(!1),r=(0,i.Z)(n,2),a=r[0],d=r[1],u=o.useState(""),g=(0,i.Z)(u,2),m=g[0],h=g[1],w=o.useState(!1),k=(0,i.Z)(w,2),v=k[0],f=k[1];o.useEffect((function(){var t;e.items.length>0&&h(null!==(t=e.activeItem)&&void 0!==t?t:e.items[0].id)}),[e.activeItem]),o.useEffect((function(){var e=function(){var e=window.location.hash.substring(1,window.location.hash.length);h(e),f(!1)};return window.addEventListener("hashchange",e,!1),function(){window.removeEventListener("hashchange",e,!1)}}),[]),o.useEffect((function(){v&&d(!1)}),[v]);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(c.j,{isOpened:a,onClick:function(){d((function(e){return!e}))}}),(0,s.jsx)("div",{id:"tutorial-side-navigation-pane",className:l()(e.className,"sticky-container",a?"opened":void 0),children:(0,s.jsx)("div",{className:"sideMenu sticky-element",children:(0,s.jsxs)("div",{className:"sideMenu-large",children:[e.header,(0,s.jsx)(p,{items:e.items,setActiveItem:function(e){f(!0),h(e)},activeItem:m,navPrefix:null!==(t=e.navPrefix)&&void 0!==t?t:"#"}),e.actions&&(0,s.jsx)("div",{className:"side-menu-actions",children:e.actions})]})})})]})}},1176:function(e,t,n){"use strict";n(63673),n(67294);var i=n(29e3),o=n(31389),r=n(52203),l=n(85893);t.Z=function(e){return(0,l.jsx)(r.Z,{children:(0,l.jsxs)("div",{id:"page",className:"container tutorial-container",children:[(0,l.jsx)("div",{id:"tutorial-header",children:(0,l.jsx)(i.s,{children:e.tutorial.headline})}),(0,l.jsxs)("div",{id:"tutorial-content",children:[(0,l.jsx)(o.Z,{items:e.tutorial.navigationItems}),(0,l.jsx)("div",{id:"tutorial-content-body",children:e.tutorial.tutorialSteps})]})]})})}},61923:function(e,t,n){"use strict";n.r(t);var i=n(3905),o=n(1176),r=n(55092),l=n(61882),a=(n(67294),n(80989)),s=n(85893);t.default=function(){var e={headline:l.Pu.title,navigationItems:(0,l.Jt)(),tutorialSteps:(0,s.jsx)(i.Zo,{components:r.d,children:(0,s.jsx)(l.ZP,{})})};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.d,{title:"".concat(l.Pu.title," - Tutorials | iTwin Platform")}),(0,s.jsx)(o.Z,{tutorial:e})]})}},63376:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorials/itwin-viewer-hello-world",function(){return n(61923)}])},63673:function(){}},function(e){e.O(0,[8273,508,483,229,271,2033,6815,9527,1061,9774,2888,179],(function(){return t=63376,e(e.s=t);var t}));var t=e.O();_N_E=t}]);
(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8663],{90304:function(e,t,n){"use strict";n.d(t,{Pu:function(){return r},ZP:function(){return f},Jt:function(){return v}});var a=n(159),i=n(91164),s=n(67294),o=n(3905),l=["components"],r=(s.createElement,{title:"Clash Test Basics",tile:{name:"Clash Test Basics",description:"Walk-through of the clash detection lifecycle-creating, running and retrieving the results.",href:"/tutorials/clash-test-basics/",thumbnail:"/unreal-docs-site/images/ClashDetectionSample.png",durationInMinutes:20,relatedApiIds:["clashdetection"]}}),c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},d=c("Introduction"),u=c("TutorialSection"),h=c("Alert"),p=c("Title"),m=c("CodeBlock"),y=c("ContinueLearningSection"),k=c("TileList"),g=c("ResourceTile"),T={metadata:r};function f(e){var t=e.components,n=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},T,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(d,{skillLevel:"Basic",durationInMinutes:"20",mdxType:"Introduction"},(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Clash detection is used to analyze the potential conflicts between multiple elements in an iModel. Based on criteria you set, it detects geometrical clashes between object element sets and returns information about each of these clashes so you can follow up and determine which might lead to potential problems. In this tutorial, you will learn how to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create a clash test"),(0,o.kt)("li",{parentName:"ul"},"Run the clash test against a specific iModel version"),(0,o.kt)("li",{parentName:"ul"},"Monitor the Clash Test run process"),(0,o.kt)("li",{parentName:"ul"},"Retrieve and interpret the resulting clashes"),(0,o.kt)("li",{parentName:"ul"},"Update your clash test"))),(0,o.kt)(u,{mdxType:"TutorialSection"},(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"This tutorial assumes that you already have:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Access to an iModel and the associated projectId and imodelId for that iModel, along with the named version ID for the version you want to run the test against",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"If you do not have a model, instructions on creating one and retrieving the associated model data can be found ",(0,o.kt)("a",{parentName:"li",href:"/tutorials/retrieve-validation-model-data/#1-optional-create-a-sample-imodel-for-testing"},"here")))),(0,o.kt)("li",{parentName:"ul"},"A list of model and category IDs you wish to check for clashes",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Instructions on retrieving lists of models and categories for a specific model can be found ",(0,o.kt)("a",{parentName:"li",href:"/tutorials/retrieve-validation-model-data/#2-retrieving-models-and-categories"},"here")))))),(0,o.kt)(u,{mdxType:"TutorialSection"},(0,o.kt)("h2",{id:"1-get-a-token"},"1. Get a token"),(0,o.kt)("p",null,"To make request to the API a user token is needed. There are several ways to get it."),(0,o.kt)("h3",{id:"implement-authorization-code-flow-in-the-application"},"Implement Authorization Code Flow in the application"),(0,o.kt)("p",null,"Follow this ",(0,o.kt)("a",{parentName:"p",href:"/apis/overview/authorization/"},"article")," to implement Authorization code workflow in your application. You will need to include the scopes clashdetection:read and clashdetection:modify."),(0,o.kt)("h3",{id:"grab-a-user-token-from-api-reference-try-it-section"},"Grab a user token from Api reference \u201cTry it\u201d Section"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Go ",(0,o.kt)("a",{parentName:"li",href:"/apis/clash-detection/operations/create-clashdetection-tests/"},"here")),(0,o.kt)("li",{parentName:"ol"},"Click \u201cTry it\u201d button."),(0,o.kt)("li",{parentName:"ol"},"On Authorization section select \u201cAuthorizationCode\u201d."),(0,o.kt)("li",{parentName:"ol"},"After popup closes Authorization header with your user token value should be visible."),(0,o.kt)("li",{parentName:"ol"},"Save user token value for this tutorial.")),(0,o.kt)(h,{type:"informational",mdxType:"Alert"},"Use user token to replace JWT_TOKEN dynamic parameter in the next steps.")),(0,o.kt)(u,{actions:[(0,o.kt)(p,{mdxType:"Title"},"Request Syntax"),(0,o.kt)(m,{language:"http",code:"POST https://api.bentley.com/clashdetection/tests HTTP/1.1",mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Request Headers"),(0,o.kt)(m,{language:"http",code:"Accept: application/vnd.bentley.itwin-platform.v1+json\nPrefer: return=representation\nAuthorization: Bearer JWT_TOKEN",mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Request Body"),(0,o.kt)(m,{language:"json",code:'{\n  "projectId":"00000000-0000-0000-0000-000000000000",\n  "displayName":"Sample Test",\n  "description":"Categories: Tag v Structure",\n  "setA":{\n    "modelIds":[],\n    "categoryIds":["0x4000000000d"],\n    "selfCheck":false,\n    "clearance":0\n  },\n  "setB":{\n    "modelIds":[],\n    "categoryIds":["0x40000000e71"],\n    "selfCheck":false,\n    "clearance":0\n  },\n  "suppressTouching":true,\n  "touchingTolerance":0.001,\n  "includeSubModels":false\n}',mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Response Body"),(0,o.kt)(m,{language:"json",code:'{\n  "test":{\n    "id":"000000000000000-000000000000000000000000000",\n    "_links":{\n      "self":{\n        "href":"https://api.bentley.com/clashdetection/tests/000000000000000-000000000000000000000000000"\n      }\n    }\n  }\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,o.kt)("h2",{id:"2-create-a-clash-test"},"2. Create a Clash Test"),(0,o.kt)("p",null,"Now that we have an authorization token, along with the prerequisites we should have everything we need to run our first clash test."),(0,o.kt)(h,{type:"informational",mdxType:"Alert"},"Note: Many people's first inclination when experimenting with clash tests is to run every model or category against every other model or category. While this does usually guarantee you will see clashes, it also usually guarantees a long wait time while the engine processes the sets. Consider selecting a smaller subset if you're just starting out. You can always look in the iTwin Viewer and find two elements you know are clashing, and note the models/categories they belong to to use in your practice test."),(0,o.kt)("p",null,"Clash tests are saved and associated with a specific project; if you run a clash test and find issues that you plan to fix in your model, once you upload the new model version you can rerun the same test to ensure they\u2019ve been resolved."),(0,o.kt)(h,{type:"informational",mdxType:"Alert"},"Note: Even if iModels share category and model display names, the ids may differ. Please check before running a test against a different iModel than the one it was initially created for."),(0,o.kt)("p",null,"To create a clash test send an HTTP POST request to ",(0,o.kt)("inlineCode",{parentName:"p"},"POST https://api.bentley.com/clashdetection/tests/")),(0,o.kt)("p",null,"Clash detection tests are highly configurable. so let\u2019s quickly go over all of the different parameters you can set in the request body:\n",(0,o.kt)("strong",{parentName:"p"},"projectId")," - Id of the project this test will be associated with. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"displayName")," - Name of the clash test. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"description")," - Additional identifying information or descriptions of the clash. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"setA/setB")," - Object containing clash test information about a given set of elements. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"modelIds")," - Array of model IDs which contain elements to check for clashes. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"categoryIds")," - Array of category IDs which contain elements to check for clashes ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"selfCheck")," - Boolean value. When this is true, elements in this set will be checked for clashes against other elements in this set. When false, it will only check against elements in the opposing set. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"clearance")," - When this is set above 0, any elements within this distance will be reported as a clash, even when not touching. A \u201cClearance\u201d value will be supplied in results, telling you the distance between the elements. This is in meters. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"suppressTouching")," - Boolean value. When this is true, the results will not include elements that are touching, or whose clash overlap falls within the touching tolerance limits specified below. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"touchingTolerance")," - Elements that are overlapping by less than this amount will be suppressed. This is in meters. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"includeSubModels")," - Boolean value. When this is true, any elements under any model that falls under the model hierarchy of the models you\u2019ve specified will be included. When false, this test will only include elements directly under the models you\u2019ve specified.",(0,o.kt)("br",null)),(0,o.kt)("p",null,"The response from the server will include the id of the newly created test, as well as a link to the test."),(0,o.kt)(h,{type:"informational",mdxType:"Alert"},"Note: You will need this test ID later to run the test.")),(0,o.kt)(u,{actions:[(0,o.kt)(p,{mdxType:"Title"},"Request Syntax"),(0,o.kt)(m,{language:"http",code:"POST https://api.bentley.com/clashdetection/runs/ HTTP/1.1",mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Request Headers"),(0,o.kt)(m,{language:"http",code:"Accept: application/vnd.bentley.itwin-platform.v1+json\nPrefer: return=representation\nAuthorization: Bearer JWT_TOKEN",mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Request Body"),(0,o.kt)(m,{language:"json",code:'{\n  "testId":"00000000-0000-0000-0000-000000000000",\n  "iModelId":"00000000-0000-0000-0000-000000000000",\n  "namedVersionId":"00000000-0000-0000-0000-000000000000"\n}',mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Response Body"),(0,o.kt)(m,{language:"json",code:'{\n  "run":{\n    "id":"000000000000000-000000000000000000000000000",\n    "_links":{\n      "run":{\n        "href":"https://api.bentley.com/clashdetection/runs/000000000000000-000000000000000000000000000"\n      }\n    }\n  }\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,o.kt)("h2",{id:"3-run-the-clash-detection-test"},"3. Run the Clash Detection Test"),(0,o.kt)("p",null,"Now that you have created a test, we\u2019re going to go ahead and run it. To run a Clash Detection test, you just need to send the HTTP POST request ",(0,o.kt)("inlineCode",{parentName:"p"},"POST https://api.bentley.com/clashdetection/runs/")," with a request body containing the testId from the previous step, the iModel id and Named Version Id you want to run against."),(0,o.kt)("p",null,"Clash detection tests are asynchronous, so instead of containing the results directly, the result body contains the runId as well as a link to the run. You will use this in the next step to retrieve the run status.")),(0,o.kt)(u,{actions:[(0,o.kt)(p,{mdxType:"Title"},"Retrieve Run Results Request Syntax"),(0,o.kt)(m,{language:"http",code:"GET https://api.bentley.com/clashdetection/runs/000000000000000-000000000000000000000000000 HTTP/1.1",mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Retrieve Run Results Request Headers"),(0,o.kt)(m,{language:"http",code:"Accept: application/vnd.bentley.itwin-platform.v1+json\nPrefer: return=representation\nAuthorization: Bearer JWT_TOKEN",mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Retrieve Run Results Response Body"),(0,o.kt)(m,{language:"json",code:'{\n  "run":{\n    "id":"000000000000000-000000000000000000000000000",\n    "displayName":"ClashDetectionTest1-12/1/2020 5:12:50 PM",\n    "executedDateTime":"12/1/2020 5:12:50 PM",\n    "count":"0",\n    "userName":"Your Name",\n    "status":"queued",\n    "_links":{\n      "result":{\n        "href":"https://api.bentley.com/clashdetection/results/000000000000000-000000000000000000000000000"\n      },\n      "test":{\n        "href":"https://api.bentley.com/clashdetection/tests/000000000000000-000000000000000000000000000"\n      }\n    }\n  }\n}',mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Retrieve Clash Results Request Syntax"),(0,o.kt)(m,{language:"http",code:"GET https://api.bentley.com/clashdetection/results/000000000000000-000000000000000000000000000 HTTP/1.1",mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Retrieve Clash Results Request Headers"),(0,o.kt)(m,{language:"http",code:"Accept: application/vnd.bentley.itwin-platform.v1+json\nPrefer: return=representation\nAuthorization: Bearer JWT_TOKEN",mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Retrieve Clash Results Response Body"),(0,o.kt)(m,{language:"json",code:'{\n  "result":[\n    {\n      "clashType":"Collision",\n      "clearance":-1,\n      "elementAId":"0x400000000c4",\n      "elementALabel":"1-SWS-0104-EX-OPM [4-5G]",\n      "elementACategoryIndex":0,\n      "elementAModelIndex":0,\n      "elementBId":"0x4000000003e",\n      "elementBLabel":"IsmCurveMember [4-1Q]",\n      "elementBCategoryIndex":1,\n      "elementBModelIndex":0,\n      "center":{\n        "x":12.192031860351562,\n        "y":407.69541931152344,\n        "z":122.92329406738281\n      },\n      "suppressingRuleIndexArray":[]\n    }\n  ],\n  "categoryList":[\n    {\n      "id":"0x4000000000d",\n      "displayName":"Tag-Category"\n    },\n    {\n      "id":"0x40000000e71",\n      "displayName":"Structure"\n    }\n  ],\n  "modelList":[\n    {\n      "id":"0x20000000002",\n      "displayName":"Sample"\n    }\n  ],\n  "suppressingRuleList":[]\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,o.kt)("h2",{id:"4-retrieve-clash-detection-results"},"4. Retrieve Clash Detection Results"),(0,o.kt)("p",null,"Once you\u2019ve run a clash detection test, you\u2019ll need to wait for the engine to finish processing the test. This can take less than ten minutes or several hours depending on the queue time and number of elements and potential collision are in your element sets."),(0,o.kt)("p",null,"There are two parts to results retrieval, retrieving the information about the clash test run itself, and then the actual results:"),(0,o.kt)("h3",{id:"retrieve-run-results"},"Retrieve Run Results"),(0,o.kt)("p",null,"You can check on the status of your clash job via an HTTP ",(0,o.kt)("inlineCode",{parentName:"p"},"GET https://api.bentley.com/clashdetection/runs/{id}")," using the runId returned in the previous create step. It can take a while, so you might want to run this on a loop until you get the \u201cstatus: completed\u201d result."),(0,o.kt)("p",null,"In addition to the status, the results body will also include some metadata, and most importantly for us a results link we will use to retrieve the actual clash results."),(0,o.kt)(h,{type:"informational",mdxType:"Alert"},"Note: While the results link will always appear in the response body, you will not be able to actually retrieve the results until the status is shown as complete."),(0,o.kt)("h3",{id:"retrieve-clash-results"},"Retrieve Clash Results"),(0,o.kt)("p",null,"Using the results link from the previous step, we can now retrieve the actual clash results we\u2019ve been waiting for using a GET HTTP request ",(0,o.kt)("inlineCode",{parentName:"p"},"GET https://api.bentley.com/clashdetection/results/{id}"),". The clash results object contains a lot of information, so let\u2019s quickly go over them. There are four main array objects in the result body:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"categoryList")," - Category lookup table. Contains an array of category id and category display name pairs.",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"modelList")," - Model lookup table. Contains an array of model id and model display name pairs. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"suppressingRuleList")," - Suppression rule lookup table. Contains an array of suppression rule ids and suppression rule display name pairs. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"clashDetectionResult")," - Array of all the clashes in this clash detection result. ",(0,o.kt)("br",null)),(0,o.kt)("p",null,"A single clash object in the clashDetectionResult array contains:",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"clashType")," - The type of clash detected - possible values: Collision, Clearance, Touching, Not Initialized. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"clearance")," - When the clash type is Clearance, the value is returned in meters. Otherwise -1 is returned. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"elementAId")," - The unique id of element A. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"elementALabel")," - The display label of element A. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"elementACategoryIndex")," - The zero-based index used to lookup the element A category in the categoryList. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"elementAModelIndex")," - The zero-based index used to lookup the element A model in the modelList. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"elementBId")," - The unique id of element B. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"elementBLabel")," - The display label of element B. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"elementBCategoryIndex")," - The zero-based index used to lookup the element B category in the categoryList. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"elementBModelIndex")," - The zero-based index used to lookup the element B model in the modelList. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"center")," - The clash center point. This contains x, y, and z properties for the exact spatial position of the center point. ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"suppressingRuleIndexArray")," - An array of the zero-based indexes used to lookup any suppression rules this clash would be suppressed by in the suppressingRuleList. ",(0,o.kt)("br",null))),(0,o.kt)(u,{actions:[(0,o.kt)(p,{mdxType:"Title"}," Get Clash Test Request Syntax"),(0,o.kt)(m,{language:"http",code:"GET https://api.bentley.com/clashdetection/tests/000000000000000-000000000000000000000000000 HTTP/1.1",mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Get Clash Test Request Headers"),(0,o.kt)(m,{language:"http",code:"Accept: application/vnd.bentley.itwin-platform.v1+json\nPrefer: return=representation\nAuthorization: Bearer JWT_TOKEN",mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Get Clash Test Response Body"),(0,o.kt)(m,{language:"json",code:'{\n  "test":{\n    "displayName":"Sample Test",\n    "description":"Categories: Tag v Structure",\n    "setA":{\n      "modelIds":[],\n      "categoryIds":["0x4000000000d"],\n      "selfCheck":false,\n      "clearance":0\n    },\n    "setB":{\n      "modelIds":[],\n      "categoryIds":["0x40000000e71"],\n      "selfCheck":false,\n      "clearance":0\n    },\n    "suppressTouching":true,\n    "touchingTolerance":0.001,\n    "includeSubModels":false,\n    "_links":{\n      "createdBy":{\n        "href":"https://api.bentley.com/projects/00000000-0000-0000-0000-000000000000/members/00000000-0000-0000-0000-000000000000"\n      },\n      "lastModifiedBy":{\n        "href":"https://api.bentley.com/projects/00000000-0000-0000-0000-000000000000/members/00000000-0000-0000-0000-000000000000"\n      }\n    }\n  }\n}',mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Update Clash Test Request Syntax"),(0,o.kt)(m,{language:"http",code:"PUT https://api.bentley.com/clashdetection/tests/000000000000000-000000000000000000000000000 HTTP/1.1",mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Update Clash Test Request Headers"),(0,o.kt)(m,{language:"http",code:"Accept: application/vnd.bentley.itwin-platform.v1+json\nPrefer: return=representation\nAuthorization: Bearer JWT_TOKEN",mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Update Clash Test Request Body"),(0,o.kt)(m,{language:"json",code:'{\n  "projectId":"00000000-0000-0000-0000-000000000000",\n  "displayName":"Sample Test",\n  "description":"Categories: Tag v Structure",\n  "setA":{\n    "modelIds":[],\n    "categoryIds":["0x4000000000d"],\n    "selfCheck":true,\n    "clearance":0\n  },\n  "setB":{\n    "modelIds":[],\n    "categoryIds":["0x40000000e71"],\n    "selfCheck":false,\n    "clearance":0\n  },\n  "suppressTouching":true,\n  "touchingTolerance":0.005,\n  "includeSubModels":true\n}',mdxType:"CodeBlock"}),(0,o.kt)(p,{mdxType:"Title"},"Update Clash Test Response Body"),(0,o.kt)(m,{language:"json",code:'{\n  "test":{\n    "id":"000000000000000-000000000000000000000000000",\n    "_links":{\n      "self":{\n        "href":"https://api.bentley.com/clashdetection/tests/000000000000000-000000000000000000000000000"\n      }\n    }\n  }\n}',mdxType:"CodeBlock"})],mdxType:"TutorialSection"},(0,o.kt)("h2",{id:"5-update-a-clash-test"},"5. Update a Clash Test"),(0,o.kt)("p",null,"After running your test, you might realize you want to tweak your criteria slightly. Instead of making a new test, you can just update the one you just made previously. This is a replacement update, so you will still need the full test criteria you enetered previously. If you still have your test criteria handy, you can just copy it and update as necessary. If not, you can use a ",(0,o.kt)("inlineCode",{parentName:"p"},"GET https://api.bentley.com/clashdetection/tests/{id}"),", with your test id to retrieve the test details and update from there."),(0,o.kt)("p",null,"Once you have your test criteria and have implemented any updates you want to make, you can use an HTTP ",(0,o.kt)("inlineCode",{parentName:"p"},"PUT https://api.bentley.com/clashdetection/tests/{id}")," using the test id.")),(0,o.kt)(u,{mdxType:"TutorialSection"},(0,o.kt)("h2",{id:"6-conclusion"},"6. Conclusion"),(0,o.kt)("p",null,"You have now gone through the entire life cycle of a clash detection test: creating, running and retrieving the results. This will aid you in detecting any potential problems or clashes earlier in the modeling process while they are easier to fix. As you continue to practice and gain experience creating and running tests, you will be able to refine the criteria to be specific to your individual needs and issues.")),(0,o.kt)(y,{mdxType:"ContinueLearningSection"},(0,o.kt)("h2",{id:"more-resources-that-you-may-like"},"More resources that you may like"),(0,o.kt)(k,{mdxType:"TileList"},(0,o.kt)(g,{title:"Validation API documentation",href:"/api-groups/validation/",description:"An overview and detailed version of Validation API documentation, including both Clash Detection and Property Validation.",mdxType:"ResourceTile"}),(0,o.kt)(g,{title:"Clash Review Sample Showcase",href:"https://www.itwinjs.org/sandboxes/iTwinPlatform/Clash%20Review",description:"A sample showcase that demonstrates calling Clash Detection APIs to retrieve clash data and present it for review in a viewer app.",isExternal:!0,mdxType:"ResourceTile"}))))}f.isMDXComponent=!0;var v=function(){return[{id:"introduction",level:2,title:"Introduction",children:[]},{id:"prerequisites",level:2,title:"Prerequisites",children:[]},{id:"1-get-a-token",level:2,title:"1. Get a token",children:[{id:"implement-authorization-code-flow-in-the-application",level:3,title:"Implement Authorization Code Flow in the application",children:[]},{id:"grab-a-user-token-from-api-reference-try-it-section",level:3,title:"Grab a user token from Api reference \u201cTry it\u201d Section",children:[]}]},{id:"2-create-a-clash-test",level:2,title:"2. Create a Clash Test",children:[]},{id:"3-run-the-clash-detection-test",level:2,title:"3. Run the Clash Detection Test",children:[]},{id:"4-retrieve-clash-detection-results",level:2,title:"4. Retrieve Clash Detection Results",children:[{id:"retrieve-run-results",level:3,title:"Retrieve Run Results",children:[]},{id:"retrieve-clash-results",level:3,title:"Retrieve Clash Results",children:[]}]},{id:"5-update-a-clash-test",level:2,title:"5. Update a Clash Test",children:[]},{id:"6-conclusion",level:2,title:"6. Conclusion",children:[]},{id:"more-resources-that-you-may-like",level:2,title:"More resources that you may like",children:[]}]}},31389:function(e,t,n){"use strict";n.d(t,{Z:function(){return h}});var a=n(61565),i=n(67294),s=n(94184),o=n.n(s),l=(n(50371),n(73351)),r=n(85893),c=function(e){var t=e.item,n=e.setActiveItem,a=e.className,i=e.activeItem,s=e.prefix;return(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("div",{className:"menuItem-container",children:(0,r.jsx)(l.D,{href:"".concat(null!==s&&void 0!==s?s:"#").concat(t.id),children:(0,r.jsx)("span",{onClick:function(){return n(t.id)},className:"".concat(a," ").concat(t.id===i?"active":""),children:t.title})})})})},d=function(e){var t=e.items,n=e.setActiveItem,a=e.activeItem,i=e.navPrefix;return(0,r.jsx)(r.Fragment,{children:t.map((function(e,t){return(0,r.jsxs)("div",{children:[(0,r.jsx)(c,{item:e,className:"sideMenuItem",setActiveItem:n,activeItem:a,prefix:i},e.id),e.children.map((function(e){return(0,r.jsx)(c,{item:e,className:"sideMenuItem sideMenuSubItem",setActiveItem:n,activeItem:a,prefix:i},e.id)}))]},t)}))})},u=n(71125),h=function(e){var t,n=i.useState(!1),s=(0,a.Z)(n,2),l=s[0],c=s[1],h=i.useState(""),p=(0,a.Z)(h,2),m=p[0],y=p[1],k=i.useState(!1),g=(0,a.Z)(k,2),T=g[0],f=g[1];i.useEffect((function(){var t;e.items.length>0&&y(null!==(t=e.activeItem)&&void 0!==t?t:e.items[0].id)}),[e.activeItem]),i.useEffect((function(){var e=function(){var e=window.location.hash.substring(1,window.location.hash.length);y(e),f(!1)};return window.addEventListener("hashchange",e,!1),function(){window.removeEventListener("hashchange",e,!1)}}),[]),i.useEffect((function(){T&&c(!1)}),[T]);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(u.j,{isOpened:l,onClick:function(){c((function(e){return!e}))}}),(0,r.jsx)("div",{id:"tutorial-side-navigation-pane",className:o()(e.className,"sticky-container",l?"opened":void 0),children:(0,r.jsx)("div",{className:"sideMenu sticky-element",children:(0,r.jsxs)("div",{className:"sideMenu-large",children:[e.header,(0,r.jsx)(d,{items:e.items,setActiveItem:function(e){f(!0),y(e)},activeItem:m,navPrefix:null!==(t=e.navPrefix)&&void 0!==t?t:"#"}),e.actions&&(0,r.jsx)("div",{className:"side-menu-actions",children:e.actions})]})})})]})}},1176:function(e,t,n){"use strict";n(63673),n(67294);var a=n(29e3),i=n(31389),s=n(52203),o=n(85893);t.Z=function(e){return(0,o.jsx)(s.Z,{children:(0,o.jsxs)("div",{id:"page",className:"container tutorial-container",children:[(0,o.jsx)("div",{id:"tutorial-header",children:(0,o.jsx)(a.s,{children:e.tutorial.headline})}),(0,o.jsxs)("div",{id:"tutorial-content",children:[(0,o.jsx)(i.Z,{items:e.tutorial.navigationItems}),(0,o.jsx)("div",{id:"tutorial-content-body",children:e.tutorial.tutorialSteps})]})]})})}},96488:function(e,t,n){"use strict";n.r(t);var a=n(3905),i=n(1176),s=n(55092),o=n(90304),l=(n(67294),n(80989)),r=n(85893);t.default=function(){var e={headline:o.Pu.title,navigationItems:(0,o.Jt)(),tutorialSteps:(0,r.jsx)(a.Zo,{components:s.d,children:(0,r.jsx)(o.ZP,{})})};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(l.d,{title:"".concat(o.Pu.title," - Tutorials | iTwin Platform")}),(0,r.jsx)(i.Z,{tutorial:e})]})}},51960:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorials/clash-test-basics",function(){return n(96488)}])},63673:function(){}},function(e){e.O(0,[8273,508,483,229,271,2033,6815,9527,1061,9774,2888,179],(function(){return t=51960,e(e.s=t);var t}));var t=e.O();_N_E=t}]);
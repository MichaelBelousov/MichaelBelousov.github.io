"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8377],{8377:function(e,t,n){n.r(t),t.default='# Webhooks API\n\nThe Webhooks API allows you to subscribe to events happening in iTwin Platform. In simple terms, webhooks, sometimes called \u201cHTTP callbacks\u201d are a way for apps to communicate with one another that removes any manual effort out of the equation.\n\n## Webhook\n\nTo use webhooks you need to create an API in order to receive webhook events. You will need to provide a public API endpoint called `callbackUrl` where you want to receive the events after you create your own webhook. Also it is required to provide a list of event types that you are interested in. After you create a webhook, it will take several seconds to get the webhook ready.\n\n### Deactivation\n\nAn existing webhook can be deactivated to temporarily stop sending events until you activate it back again. This way you don\'t have to delete the webhook and create a new one later.\n\n### Expiration\n\nWebhooks have expiration time and when that time comes, webhook becomes deactivated. Before creating a webhook, you can set the expiration time to the one you want. If the expiration time was not set, webhook will expire in 30 days by default.\n\n## Security\n\n### Webhook secret\n\nOn webhook creation, webhook secret is being generated and sent back to the client.\n\n```json\n{\n  "webhook": {\n    "id": "72a10fad-103d-4e23-9a43-a4ddf2ef61cc",\n    "secret": "4eb25d308ef2a9722ffbd7a2b7e5026f9d1f2feaca5999611d4ef8692b1ad70d"\n  }\n}\n```\n\nBefore forwarding an event to client, webhook secret is used together with whole request body to generate `HMAC-SHA256` signature which is included in `Signature` request header. Before doing anything with the received event client SHOULD handle the authorization process by using its own webhook secret copy together with request body and generate another signature on their end to validate the event source. If both signatures are the same, event SHOULD be accepted as authorized one and ignored otherwise.\n\n### Webhook event signature\n\nWebhook signature example: `sha256=a24a2e58912f4708f21eb043def1b1bcc0684b81a2e3feebe04ca558ff9830ce`. The first part of the signature _(before the equation sign)_ indicates the algorithm and the second part is generated hash which client MUST attempt to match.\n\n### Callback validation\n\nAfter webhook is created, an automatic HTTP OPTIONS validation request is sent to the callback URL. This request includes `WebHook-Request-Origin` header which contains the origin of the sending system. The client must reply including `Webhook-Allowed-Origin` header in the response with the same value supplied in the `Webhook-Request-Origin` header, or a singular asterisk character (\'\\*\'), indicating that the delivery target supports notifications from all origins. The OPTIONS response SHOULD include the `Allow` header indicating the POST method being permitted.\n\nIf the client does not support the handshake described here, webhook callback can still be validated manually but not later than 2 days after creation. Initial validation request includes `Webhook-Request-Callback` header which contains the URL that can be called manually via HTTP GET request. If callback URL does not get validated after 2 days webhook is automatically deleted.\n\n## Supported events\n\n### iModels\n\n- `iModelDeletedEvent` - is triggered when related iModel is deleted.\n- `NamedVersionCreatedEvent` - is triggered when there is a new named version created for related iModel.\n- `ChangesetPushedEvent` - is triggered when there is a new changeset pushed for related iModel.\n'}}]);
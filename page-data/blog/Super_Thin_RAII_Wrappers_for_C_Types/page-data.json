{"componentChunkName":"component---src-components-blog-page-tsx","path":"/blog/Super_Thin_RAII_Wrappers_for_C_Types/","result":{"data":{"markdownRemark":{"html":"<h4><em>Editor's Note:</em></h4>\n<p>This article abuses some C++/C interop concepts.\nIn reality, you should use the original C API in any C++ project\nusing a C dependency without official, well-supported, sane, C++ bindings,\nsince that will prevent cluttering the conceptual context of the API.\nRegardless, we can still learn a lot for our own C++ and occasionally\nC by looking at this relationship. I definitely went crazy here, but\nit's all in good fun.</p>\n<hr>\n<p>Let's partake in some template indulgence\n. Suppose we have some C files\nthat we're linking to our amazing C++ project, but it leaves us with\na few sad C \"constructors\" and \"destructors\" surrounding a struct, as a\nlanguage without implicit object construction. Suppose we have a struct: <code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyCType</span></code>,<br>\na \"constructor\" for it: <code class=\"language-cpp\">MyCtype<span class=\"token operator\">*</span> <span class=\"token function\">Create_MyCType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code> and a \"destructor\"\nfor it too: <code class=\"language-cpp\"><span class=\"token function\">Free_MyCType</span><span class=\"token punctuation\">(</span>MyCType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span></code>.</p>\n<p>If you don't know what\n<a href=\"https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization\">Resource Acquisition is Initialization</a>\nis, you should check it out, it's a useful programming idiom, often associated with C++ (and Rust),\nthat you probably already use somewhere.\nSo the question is, how can we get ourselves some nice RAII, scope-based destruction\nfor this type with minimal boiler plate? </p>\n<p>Our goal is that we can transform this code:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  CType<span class=\"token operator\">*</span> ctype <span class=\"token operator\">=</span> <span class=\"token function\">initialize_CType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//do something with c type</span>\n  <span class=\"token function\">destroy_CType</span><span class=\"token punctuation\">(</span>ctype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Into this code:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    WrappedCType type<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//do something with it</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isn't that much cleaner?\nI'll look into using the STL for a great, simple solution, and then a custom\nwrapper emphasizing performance.</p>\n<p>Indeed, it turns out we can actually do what we want there\n<em>very</em> easily, having decent knowledge of the STL, the natural solution to the\nproblems that most over-zealous c++ programmers have.\nLet's give this an STL solution before we look into a custom one and later we'll\nsee what kind of performance gains we can find and if it's worth it.\nBut first, let's define some contrived \"C code\", structs and functions that we\nwill attempt to wrap. We'll assume it's partitioned into headers and implementation\nsource as the files in our working directory of \"ctype.h\" and \"ctype.c\".</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// === ctype.h =============</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> ExampleSubType<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> b<span class=\"token punctuation\">;</span>\n  ExampleSubType<span class=\"token operator\">*</span> sub<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> ExampleCType<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// === ctype.c ============</span>\n\nExampleCType<span class=\"token operator\">*</span> <span class=\"token function\">Create_ExampleCType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//pardon any mistakes, in my tests I used C++ allocation</span>\n  <span class=\"token comment\">//i.e. new ExampleCType{i,f, new ExampleSubType{5, ...}};</span>\n  ExampleCType<span class=\"token operator\">*</span> result <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ExampleCType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token operator\">-></span>a <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n  result<span class=\"token operator\">-></span>b <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n  result<span class=\"token operator\">-></span>sub <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ExampleSubType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token operator\">-></span>sub<span class=\"token operator\">-></span>s <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token operator\">-></span>sub<span class=\"token operator\">-></span>t <span class=\"token operator\">=</span> <span class=\"token number\">334323464592ULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Free_ExampleCType</span><span class=\"token punctuation\">(</span>ExampleCType<span class=\"token operator\">*</span> in<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>in<span class=\"token operator\">-></span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, how can we elegantly use the STL To initialize with our Create function,\nand destroy with our Delete function? The real hint should be our intended scope\nbased destruction. We can provide a smart pointer with a custom deleter, which\nhappens to match our intended signature. If it didn't, we could still probably use\na fitting lambda expression to map it to the required deleter signature. Let's do it\nas follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctype.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;type_traits></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//for brevity and tersity</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">auto</span> Create<span class=\"token punctuation\">,</span> <span class=\"token keyword\">auto</span> Delete<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> CreateArgTypes<span class=\"token operator\">></span>\nshared_ptr<span class=\"token operator\">&lt;</span>\n<span class=\"token keyword\">typename</span> <span class=\"token class-name\">remove_pointer</span><span class=\"token operator\">&lt;</span>\n<span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>declval<span class=\"token operator\">&lt;</span>CreateArgTypes<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>type<span class=\"token operator\">></span>\n<span class=\"token function\">makeCTypeWrapper</span><span class=\"token punctuation\">(</span>CreateArgTypes<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">using</span> CTypePtr <span class=\"token operator\">=</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>declval<span class=\"token operator\">&lt;</span>CreateArgTypes<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">using</span> CType <span class=\"token operator\">=</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">remove_pointer</span><span class=\"token operator\">&lt;</span>CTypePtr<span class=\"token operator\">></span><span class=\"token operator\">::</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> shared_ptr<span class=\"token operator\">&lt;</span>CType<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Delete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Example example_inst{1, 0.5f};</span>\n  <span class=\"token keyword\">auto</span> example_inst <span class=\"token operator\">=</span> makeCTypeWrapper<span class=\"token operator\">&lt;</span>\n  Create_ExampleCType<span class=\"token punctuation\">,</span>\n    Free_ExampleCType<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"peek at the instance's 'a' member\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> example_inst<span class=\"token operator\">-></span>a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"peek at the instance's 'sub' member's 't' member\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> example_inst<span class=\"token operator\">-></span>sub<span class=\"token operator\">-></span>t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This has some awesome advantages. Copy prevention (if you use unique<em>ptr),\nreference counting, all the things that come with smart pointers. The one\nissue is, what if the library you're using already does reference counting?\nWhat if this is just too much overhead for what you're doing? Exploring a\nmore raw wrapper is the next step, but before that, I'll first show what would\nmake a lovely addition to the above code... if C++ allowed deduced arguments for\ntemplated aliases. Using a function pointer variable type alias, we can craft\na single, make</em>Example() function with no template parameters. Unfortunately, without\ndeduction, you would have to explicitly list the argument types which is ugly\nand worst of all redundant. Either way, it might look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> ArgTypes<span class=\"token operator\">></span>\nshared_ptr<span class=\"token operator\">&lt;</span>ExampleCType<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token function\">make_Example</span><span class=\"token punctuation\">(</span>ArgTypes<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> \n    <span class=\"token operator\">&amp;</span>makeCTypeWrapper<span class=\"token operator\">&lt;</span>Create_ExampleCtype<span class=\"token punctuation\">,</span> Free_ExmapleCType<span class=\"token punctuation\">,</span> ArgTypes<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So then, we're on to a raw wrapper. How thin can we make it?\nCan we make the wrapping inlined by the compiler entirely? I will explore the latter\nquestion and discuss it in another article. For now we'll just bring the wrapper into\nexistence. That question is what I'd like to use to determine if the\nsmart_pointer solution is worth it in performance-critical contexts.</p>\n<p>We'll start with the idea for our template that hopefully will inevitably do everything\nwe want.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">CType</span><span class=\"token punctuation\">,</span> CType<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>Create<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>Free<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">CTypeWrapper</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We've got function pointer type value arguments to our template already, and later\nwe'll add variadic arguments to match any signature for the Create function. This\ncould be used to match different overloads but unfortunately it seems difficult to\ninfer the overload so we can't do much without boilerplate as far as my\nintelligence falls.\nWe can at least infer the wrapped type itself from the function pointer arguments.\nFor now let's put in a simple implementation and see how it compiles.</p>\n<p>I ended up adding some additional templated aliases for the function pointer\ntypes, which makes it much more comprehensible, but these will disappear in the\nC++17 version.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span>\n<span class=\"token keyword\">using</span> CreateFunc <span class=\"token operator\">=</span> T<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span>\n<span class=\"token keyword\">using</span> FreeFunc <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">CType</span><span class=\"token punctuation\">,</span> \n  CreateFunc<span class=\"token operator\">&lt;</span>CType<span class=\"token operator\">&lt;</span> Create<span class=\"token punctuation\">,</span> \n  FreeFunc<span class=\"token operator\">&lt;</span>CType<span class=\"token operator\">&lt;</span> Free<span class=\"token operator\">&lt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">CTypeWrapper</span>\n<span class=\"token punctuation\">{</span>\n  CType<span class=\"token operator\">*</span> wrapped<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">CTypeWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token function\">wrapped</span><span class=\"token punctuation\">(</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">~</span><span class=\"token function\">CTypeWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Free</span><span class=\"token punctuation\">(</span>wrapped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//implicit conversion to wrapped type</span>\n  <span class=\"token keyword\">operator</span> CType<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> wrapped<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  CType<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> wrapped<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<!--\n\nI should probably say by now that there will be some elements of danger\nto stuff I am discussing, but one of the cool things (I think) you can do\nwith this type is safely cast a reference of it to the underlying pointer.\n\n-->\n<p>Now let's use our contrived C example and see what happens</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"ctype.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"CTypeWrapper.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//for brevity and tersity</span>\n<span class=\"token comment\">//our shiny type wrapper</span>\n<span class=\"token keyword\">using</span> Example <span class=\"token operator\">=</span> CTypeWrapper<span class=\"token operator\">&lt;</span>ExampleCType<span class=\"token punctuation\">,</span> \n      Create_ExampleCType<span class=\"token punctuation\">,</span> \n      Free_ExampleCType<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Example example_inst<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"peek at the instance's 'a' member\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> example_inst<span class=\"token operator\">-></span>a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"peek at the instance's 'sub' member's 't' member\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> example_inst<span class=\"token operator\">-></span>sub<span class=\"token operator\">-></span>t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Assuming \"CTypeWrapper.h\" contains our templates we've made, we should be good\nto go. Our output is:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">peek at the instance&#39;s &#39;a&#39; member\n100\npeek at the instance&#39;s &#39;sub&#39; member&#39;s &#39;t&#39; member\n334323464592</code></pre></div>\n<p>So we've got implicit conversion to the underlying type, and an overrided\n<code class=\"language-text\">operator-&gt;</code>to\nprovide access to the underlying type. This should feel a bit worrisome actually,\nbecause our type <em>should</em> feel like a value, not a pointer, but overriding the\n<code class=\"language-text\">.</code>  operator is out of the question for good reason and the\n<code class=\"language-text\">-&gt;</code> syntax reminds us that our type really just contains an underlying\npointer so in my opinion it's, <em>ok</em>, not great. Definitely sinful.</p>\n<p>I tried with some difficulty to find out how one can template alias the type\nto provide a variadic constructor, but unfortunately I don't believe it's possible\nsince the first two types cannot be deduced in a class construction context\nand template aliases can't either (as far as I know up to c++17). The function\ndeduction context appears to correctly deduce the types even with only the partial\nexplicit template parameters, but the class doesn't seem to be able to. I couldn't\nfigure out a deduction guideline for it either, but I will\nlook into the difference in deduction rules for classes and functions, and confirm\nor fix my loss here.\nThis minimal and I think \"acceptable\" boilerplate is the\nfarthest I got for generic RAII wrappers of C-style types. If you're looking to C++-ify\nyour C-using code, try something like this, but clearly a heavy duty careful wrapper is\nthe real solution to any sufficient project. There are a few more hacks for quick wrapping\nof C types that I explored and may revisit later, but for now I'll leave the code where\nI left off, with a tidy wrapper which unfortunately has some definition boilterplate.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ctype.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;type_traits></span></span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span>\n<span class=\"token keyword\">auto</span> Create<span class=\"token punctuation\">,</span> \n     <span class=\"token keyword\">auto</span> Free<span class=\"token punctuation\">,</span>\n     <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> CreateArgTypes<span class=\"token operator\">></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">CTypeWrapper</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">using</span> CTypePtr <span class=\"token operator\">=</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>declval<span class=\"token operator\">&lt;</span>CreateArgTypes<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    CTypePtr wrapped<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CTypeWrapper</span><span class=\"token punctuation\">(</span>CreateArgTypes<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> wrapped<span class=\"token punctuation\">{</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">CTypeWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">Free</span><span class=\"token punctuation\">(</span>wrapped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">operator</span> <span class=\"token function\">CTypePtr</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> wrapped<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    CTypePtr <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> wrapped<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> Example <span class=\"token operator\">=</span> CTypeWrapper<span class=\"token operator\">&lt;</span>\nCreate_ExampleCType<span class=\"token punctuation\">,</span> \n  Free_ExampleCType<span class=\"token punctuation\">,</span> \n  <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//for brevity and tersity</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Example example_inst{1, 0.5f};</span>\n  Example example_inst<span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"peek at the instance's 'a' member\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> example_inst<span class=\"token operator\">-></span>a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"peek at the instance's 'sub' member's 't' member\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> example_inst<span class=\"token operator\">-></span>sub<span class=\"token operator\">-></span>t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I'll add a follow up article some day for analyzing some of the\nllvm-ir assembly instructions that the clang compiler can emit to get a good idea\nat the overhead the wrapper incurs and how to minimize it or potentially eradicate\nit with optimization and inlining. If you find better ways, as I'm sure you will,\nplease send me an email.</p>","frontmatter":{"title":"Super Thin RAII Wrappers for C Types","path":"/blog/super-thin-raii-wrappers-for-c-types","date":"June 17, 2018"}}},"pageContext":{"slug":"/blog/Super_Thin_RAII_Wrappers_for_C_Types/"}}}
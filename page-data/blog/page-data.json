{"componentChunkName":"component---src-pages-blog-tsx","path":"/blog/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>I have some projects in the works that I want to share soon.</p>\n<p>But before I am ready, I will actually start streaming work on them occasionally.\nMy internet bandwidth is sporadic while traveling so I don't think I can do\nit stably yet, but I'd like to try a few times. My mic will also suck until I\nget back.</p>\n<p>So if you wanna see some Zig programming, feel free to sit in.</p>","frontmatter":{"date":"July 06, 2024","path":"/blog/soft-start-streaming","title":"Soft starting some streaming"},"fields":{"slug":"/blog/maybe_streaming/"}}},{"node":{"html":"<p>So I'm currently daylighting as a tourist in Western Europe, but I am an\nincorrigible workaholic so after a while I decided to moonlight as a programmer.</p>\n<p>I've been pretty good at not sleeping (or \"<em>bad at sleeping</em>\" depending on who you ask) since I became\na father, and my mind wanders when the family goes to sleep,\nso its hard to stop myself from working on something that I find interesting.\n(What exactly I find interesting this time, I will share soon).</p>\n<p>But I did not bring a laptop on this very long trip.</p>\n<p>So this brings me back to what I used to do in college and really what I planned on doing on this trip.\nI have everything I need on my Android phone.\nA C/C++ compiler, zig, rust, gdb, node.js, python, bash, vim, tmux, etc.</p>\n<p>All thanks to <a href=\"https://termux.dev/en/\">Termux</a>.\nMy eyes may not always agree (especially when I use a tmux split),\nbut I find it a very convenient setup.\nI've even written several blog posts or chunks of them from there (this one included).</p>\n<div style=\"text-align:center\">\n  <img style=\"width:50%\" alt=\"a picture of my phone kickstanded and my bluetooth keyboard in front of it\" src=\"/images/phone-keyboard-setup.jpg\" />\n</div>\n<h4>Setup:</h4>\n<ul>\n<li><a href=\"https://www.newegg.com/p/0GA-08NW-000K1?item=9SIAS45HVK7458&#x26;utm_source=transactional&#x26;utm_medium=email&#x26;cm_mmc=TEMC-Delivery-Notice-USA-_-101932&#x26;utm_campaign=TEMC-Delivery-Notice-USA-_-101932&#x26;source=f\">my portable folding bluetooth keyboard</a> (I am not affiliated with that link whatsoever, and get nothing for linking it).</li>\n<li>any kickstand phone case or accessory.\nThe above keyboard comes with a separate kickstand but I use a case with a kickstand instead.</li>\n<li>pretty much any android phone, even old ones</li>\n</ul>\n<p>I think it's sad that these days the split between \"producer\" and \"consumer\" of computers is\ngetting more and more black and white. Sure you can still use the phone camera and\nsome apps to \"produce\" e.g. TikTok content. But glaringly few people would consider it possible\nto create e.g. the TikTok app itself on a phone. I think it's a sad division.</p>\n<p>It's worth mentioning that I can't really use an iPhone for this, they're (only slightly)\nmore firmly than Android in the camp of \"simplicity\" and \"security\" (I think those terms are conflated here but I'll\nexplain another time), and that's a tradeoff that I think is overrated.\nFor an iPhone, feel free to buy a computer elsewhere and login remotely from some app, but I don't\nthink that counts.</p>\n<p>Also, iPhones can be much more expensive. I have not measured my setup's linux-compute per dollar,\nas compared to e.g. a hacked chrome book (never used one),\nbut it's often good enough for my tinkering and requires much less space.\nMy folded keyboard is lightweight and fits in my pocket or very small bag.</p>\n<p>So anyway, I think the uncommon knowledge that you <em>can</em> develop your website or\ntinker with native code from a phone, is useful, or at least interesting.</p>\n<p>Maybe someone ought to take things further and lower the boundary for computer science\nby designing a course that requires only a cheap Android phone, internet, and free open source software.</p>\n<hr>\n<p>A maintenance note; I am going to try to write/blog more. Life has moved quickly in the last couple of years,\nbut I think I'm used to it now.</p>","frontmatter":{"date":"June 05, 2024","path":"/blog/programming-on-your-phone","title":"Programming on your phone"},"fields":{"slug":"/blog/mobile_programming/"}}},{"node":{"html":"<p>I use too much bash. I've written down some of the more outrageous or useful ones. I think it'll make a good part 1 to\nan ongoing series.</p>\n<h4>List extensions of non-text files in a git repository</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">comm</span> <span class=\"token parameter variable\">-13</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token function\">git</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-Il</span> <span class=\"token string\">''</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> -u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">\\</span>\n         <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token function\">git</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-al</span> <span class=\"token string\">''</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> -u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-Po</span> <span class=\"token string\">'(?&lt;=\\.)\\w+$'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-u</span></code></pre></div>\n<h4>comparing sections of files across git history with changed line-endings and indent levels</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">dwdiff <span class=\"token parameter variable\">--color</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'103,125p'</span> core/test/CompatTests.cpp <span class=\"token operator\">|</span> unix2dos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token function\">git</span> show 7c788f88:core/test/CompatTests.cpp <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'88,108p'</span> <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -b13-<span class=\"token punctuation\">)</span></code></pre></div>\n<h4>not really bash but... play a little song where you invoke the C compiler for every note</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">AMP</span> <span class=\"token keyword\">in</span> <span class=\"token number\">20</span> <span class=\"token number\">50</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token assign-left variable\">f</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>mktemp<span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF<span class=\"token bash punctuation\"> <span class=\"token operator\">|</span> gcc <span class=\"token parameter variable\">-x</span> c <span class=\"token parameter variable\">-o</span> <span class=\"token variable\">$f</span> - <span class=\"token parameter variable\">-lm</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$f</span> <span class=\"token operator\">|</span> aplay<span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span></span>\n#include &lt;stdio.h>\n#include &lt;math.h>\nvoid main(){ for (int t=0,osc=0;t&lt;8000;t++,osc+=14) putchar(<span class=\"token variable\">$AMP</span>*sin(osc/255.0*2*3.14) + 128); }\nEOF</span></code></pre></div>\n<h4>This one is quite raw... guess what it does</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">FOR class IN <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-Pho</span> <span class=\"token string\">'\\.[a-zA-Z][a-z-A-Z0-9-]+'</span>\n  ~/your-mono-repo/packages/package/src/components/*.scss\n  <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-u</span><span class=\"token variable\">)</span></span>\nDO\n  <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> s/<span class=\"token punctuation\">\\</span>\"<span class=\"token variable\">${class<span class=\"token operator\">/</span>.<span class=\"token operator\">/</span>}</span><span class=\"token punctuation\">\\</span>\"/<span class=\"token variable\"><span class=\"token variable\">$(</span>perl <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'s/(?&lt;=[a-z-]{1,100})-(\\w)/\\U\\1/g'</span> <span class=\"token operator\">&lt;&lt;&lt;</span><span class=\"token string\">\"<span class=\"token variable\">${class<span class=\"token operator\">/</span>.<span class=\"token operator\">/</span>}</span>\"</span><span class=\"token variable\">)</span></span>/ <span class=\"token punctuation\">\\</span>\n    <span class=\"token string\">'package/src/frontend/layout/*.ts'</span>\nDONE</code></pre></div>\n<details>\n  <summary>The answer</summary>\n  Converts kebab-case identifiers to camelCased ones in typescript-react source code given some SCSS\n</details>","frontmatter":{"date":"April 12, 2022","path":null,"title":"Bashisms Part 1"},"fields":{"slug":"/blog/bashisms/"}}},{"node":{"html":"<p>Modern React has a problem, that functional components unfortunately, make it all too easy to rely on state\nthat gets thrown out the window between renders. That's why <code class=\"language-js\">useCallback</code> and <code class=\"language-js\">useEffect</code>, which take closures\nthat may accidentally reference old state in their bodies, can have weird bugs when dependencies aren't used correctly.</p>\n<p>Take for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state1<span class=\"token punctuation\">,</span> setState2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state2<span class=\"token punctuation\">,</span> setState2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state1 <span class=\"token operator\">+</span> state2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>state1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// oops state2 is also a dependency</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setState1</span><span class=\"token punctuation\">(</span>state1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">press me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Because no dependencies have been listed for React to check between renders, it will see that the effect does not need\nto be updated, even though the value of <code class=\"language-js\">state</code> would have changed between renders when the button is clicked.\nWhen altering existing code especially, you may accidentally add a new dependency without realizing and not add it to the list,\nand thus, a bug is born.</p>\n<p>This is really just a shortcoming of something that should be a language-level feature so that we wouldn't have to extract\nsuch redundant data ourselves, but to continue using vanilla JavaScript safely, we lucikly have\n<a href=\"https://reactjs.org/docs/hooks-rules.html\">the rules of hooks and some eslint plugins</a>, which, when integrated properly\nwith your editor and CI/CD, provide near perfect support for inferred dependencies.</p>\n<p>These dependencies are checked by React using <em>strict equality</em>, which in JavaScript pretty much means object identity.\nTo determine\nwhether your <code class=\"language-js\">useEffect</code>, <code class=\"language-js\">useMemo</code>, or <code class=\"language-js\">useCallback</code> should be thrown out and replaced with the new\nclosure, referencing up-to-date state, all objects in the dependency list are checked if they still <code class=\"language-text\">===</code> each other.\nThis works fine, petty performance concerns aside, until you want React to not throw away the old function, but instead keep\nit <em>stable</em>.</p>\n<p>Let's try the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isHovered<span class=\"token punctuation\">,</span> setIsHovered<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n        <span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> isHovered<span class=\"token operator\">?</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>myInst<span class=\"token punctuation\">,</span> setMyInst<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onMouseEnter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsHovered</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">onMouseLeave</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsHovered</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">\"50px\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token string\">\"50px\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What's wrong here? Suppose we are using a dependency, <code class=\"language-js\"><span class=\"token string\">\"some-api\"</span></code>, that manipulates subclasses from its own classes,\nand we have to register them to use them (ignore whether that's a well-designed JavaScript library or not for now, these\nkinds of packages do exist). Let's add an effect to register our class on component mount, and unregister it after:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApiClass<span class=\"token punctuation\">,</span> register<span class=\"token punctuation\">,</span> unregister <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"some-api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApiClass</span> <span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n        <span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> isHovered <span class=\"token operator\">?</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">register</span><span class=\"token punctuation\">(</span>MyClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span>MyClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>MyClass<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, a <em>new</em> <code class=\"language-js\">MyClass</code> is created every render\nbecause the class declaration is inside a function body, which means <code class=\"language-js\">MyClass</code> is always new so the effect is always\nreran, not just on mount, and we call <code class=\"language-js\">register</code> and <code class=\"language-js\">unregister</code>\npractically every render. Moreso, <code class=\"language-js\">myInst</code> is no longer of the same class after the first render,\nso <code class=\"language-js\">myInst <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MyClass</span></code> will be false, and that might mess with <code class=\"language-js\"><span class=\"token string\">\"some-api\"</span></code>'s assumptions.</p>\n<p>Worse still, the <code class=\"language-js\">MyClass<span class=\"token punctuation\">.</span>color</code> method has an out-of-date copy of <code class=\"language-js\">isHovered</code>. <code class=\"language-js\">myInst</code> uses the\ndefinition as it saw it during the first render when it was constructed, and <code class=\"language-js\">isHovered</code> was immutably\nset as <code class=\"language-js\"><span class=\"token boolean\">false</span></code>. To fix this in JavaScript, we need a stable, mutable object indirectly referencing <code class=\"language-js\">isHovered</code>.\nIn React we can get that using a <code class=\"language-js\">ref</code> like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApiClass<span class=\"token punctuation\">,</span> register<span class=\"token punctuation\">,</span> unregister <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"some-api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">const</span> componentState <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    componentState<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>isHovered <span class=\"token operator\">=</span> isHovered<span class=\"token punctuation\">;</span> <span class=\"token comment\">// update the state to whatever the lastest is from React</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApiClass</span> <span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n        <span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> componentState<span class=\"token punctuation\">.</span>isHovered <span class=\"token operator\">?</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now our class will always reference the up-to-date state through an indirect reference that is always up to date.\nThe final step is to make sure we have a stable reference to the class itself, which is done the same way we get\na stable state object for indirect access of the component state.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApiClass<span class=\"token punctuation\">,</span> register<span class=\"token punctuation\">,</span> unregister <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"some-api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">const</span> MyClass <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApiClass</span> <span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n        <span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> componentState<span class=\"token punctuation\">.</span>isHovered <span class=\"token operator\">?</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-js\">useRef</code>, will be a stable reference to its argument, and can only be mutated by setting its\n<code class=\"language-js\">current</code> property, but we've made that impossible by keeping no reference to the ref object itself.\nNow that we have it, we can generalize to create a <code class=\"language-js\">useClass</code> hook that does the work for us.</p>\n<div id=\"the-useclass-hook\"></div>\n<h2><a href=\"#the-useclass-hook\">The <code class=\"language-text\">useClass</code> Hook</a></h2>\n<p>Smaller than I thought it would be, really.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> useClass<span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token keyword\">new</span></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  <span class=\"token function-variable function\">makeClass</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">C</span><span class=\"token punctuation\">,</span>\n  dependencies<span class=\"token operator\">:</span> <span class=\"token constant\">S</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">S</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">C</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> stateRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>stateRef<span class=\"token punctuation\">,</span> dependencies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token function\">makeClass</span><span class=\"token punctuation\">(</span>stateRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's use it:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isHovered<span class=\"token punctuation\">,</span> setIsHovered<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> Derived <span class=\"token operator\">=</span> <span class=\"token function\">useClass</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n                 <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>isHovered <span class=\"token operator\">?</span> <span class=\"token string\">\"y\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"n\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n               <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> isHovered <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>myInst<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">onMouseEnter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsHovered</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n         <span class=\"token attr-name\">onMouseLeave</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsHovered</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>myInst<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And there we have classes as usable as possible directly in our functional components.\nProbably not as performant as a module-scope class declaration unless our runtime is extremely clever,\nbut that's just the world we're living in. If you're heavily using an inheritance based library in your work,\nmaybe you'll enjoy this as much as I do.</p>","frontmatter":{"date":"October 10, 2021","path":null,"title":"The useClass hook and using class-based APIs in modern React"},"fields":{"slug":"/blog/subclass-apis-in-react/"}}},{"node":{"html":"<!-- should make these part of the front-matter and render them differently if possible -->\n<h3>Editor's regrets</h3>\n<p>There is a more common method in JavaScript of using generators to make powerful custom iterators than I use here. Not sure why,\nbut I was attracted to another one which I felt was more explicit somehow, although a bit more verbose and still somewhat\nesoteric. The usual way people do it is:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myIterator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">yield</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You'll see I do it without calling the generator explicitly. I have since reverted my preference to the most common\nmethod to be less clever. Either way, they are interchangeable so consider this method when reading what I do below.</p>\n<hr>\n<p>A while back, I was concerned about the wastefulness of JavaScript's\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code class=\"language-js\"><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>map</code></a>\nand <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code class=\"language-js\"><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>filter</code></a>\nfunctions, really all of JavaScript's canonical functional sequence programming builtins.\nIf you're unaware, these methods always allocate an entire new array. While this is fine in some cases, it enables several\ndumb performance pitfalls, and doesn't allow you to use these functions in performance-sensitive hotpaths of your application.\nNot to mention that these methods only exist on JavaScript's <code class=\"language-js\">Array</code> type, so you need to convert all iterators (e.g. <code class=\"language-js\">Map</code>, <code class=\"language-js\">Set</code>)\ninto an array with <code class=\"language-js\">Array<span class=\"token punctuation\">.</span>from</code>, wasting more allocations. Here we'll build an efficient, elegant alternative using lazy evaluated generators,\nand at the end I provide a TypeScript implementation with heaps of fancy functional list operations, all efficient as heck. Plus, I eventually got around\nto publishing it on npm as <a href=\"https://www.npmjs.com/package/lazy-from\"><code class=\"language-text\">lazy-from</code></a> so you can use it and its 0 dependencies in your project with just\n<code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> lazy-from</code>.</p>\n<p>Returning to the horror of JavaScript's original design, take for instance the following example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Simple enough, right? The result is <code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span></code>. But in fact this code will allocate 4 distinct intermediate arrays, and in the worst case\nall of them will be the same size as the source array (if say, the filter didn't filter anything).\nIf we were performing this on an array of 10 million records, we'd suddenly have to\nallocate 40 million records, 30 million of which we discard immediately. Perhaps an advanced optimizing JavaScript runtime, like Chromium/V8's\nTurboFan, will JIT-out the problem, but the standard library design is just poor in my opinion. There are lots of cases where your\ncode will not have been churned through some optimizer and this bloat isn't hard to design out of the equation in the first place.\nInstead, let's implement our own similar functional list processing API with better performance thanks to lazy evaluation, and we'll do\nso with modern JavaScript generators.</p>\n<p>A generator is a functional coroutine, effectively a function that can <em>yield</em> its ownership over the program execution flow, and\nconfusingly also <em>yield</em> individual elements as its iterated over as an iterable. To make one in JavaScript, you use a function statement/expression with\nthe <code class=\"language-js\"><span class=\"token operator\">*</span></code> marker.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">myGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">5</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When <code class=\"language-js\">myGenerator</code> is called, it returns an iterator which on its next method, runs the underlying coroutine until it yields, which would be\nat the <code class=\"language-js\"><span class=\"token keyword\">yield</span></code> keyword. This way, callers can run their own code in between yielded elements, and even stop asking for more elements.\nWith the <code class=\"language-js\"><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>map</code> function design, you need to allocate the entire array before you can iterate through it. This ability\nto not iterate until we need to, and even stop iteration is the concept of lazy evaluation that will free us from unnecessary allocations.</p>\n<p>Let's combine our fancy generator with JavaScript's iterator interface to get an iterable literal:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">my_iter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So we're declaring an object with the hidden <code class=\"language-js\">Symbol<span class=\"token punctuation\">.</span>iterator</code> property to show how to get an iterator of the object, and using the\nobject generator property shorthand syntax to make it a generator. For completeness I also added an example of the <code class=\"language-js\"><span class=\"token keyword\">yield</span><span class=\"token operator\">*</span></code> syntax which\nlets our generator yield from other iteratables. Now we can do something interesting with our generators.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iterable<span class=\"token punctuation\">,</span> mapFunction</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> iterable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">mapFunction</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And that's basically it to <code class=\"language-js\">map</code>. We'll make the API more elegant later. We can now do the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>You may be missing the trailing function syntax which is the main advantage to having <code class=\"language-js\">map</code> be a method of <code class=\"language-js\">Array</code>s, but as I said we'll be\nmaking it elegant later. If you run this code in your local JavaScript runtime, be it browser or local,\n(I actually originally was inspired to write this code while using <a href=\"https://bellard.org/quickjs/\">quickjs</a> which doesn't optimize this stuff afaik)\nyou'll notice that the spread syntax forces the iteration of the lazy iterable into an array, for us to view. When this code is running the spread syntax\ncalls next on the outer map iterable. To get the first element, it calls next on the inner map. The inner map\nruns the loop, sets <code class=\"language-js\">item</code> to <code class=\"language-js\"><span class=\"token number\">1</span></code>, then runs <code class=\"language-js\"><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x<span class=\"token operator\">*</span><span class=\"token number\">3</span></code> over it, yielding <code class=\"language-js\"><span class=\"token number\">3</span></code>. The outer map sets its <code class=\"language-js\">item</code> to <code class=\"language-js\"><span class=\"token number\">3</span></code> after receiving it as the first element\nfrom inner map it is wrapping, and runs <code class=\"language-js\"><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> </code> yielding <code class=\"language-js\"><span class=\"token string\">'3'</span></code>. This repeats for all elements until the Array has pushed all 3 elements and is now\n<code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">]</span></code>. The point is, the instructions for the <code class=\"language-js\">map</code> calls are glued together when implemented via coroutine, as if you wrote only one <code class=\"language-js\">map</code> call\npractically. Now let's make <code class=\"language-js\">filter</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iterable<span class=\"token punctuation\">,</span> predicate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> iterable<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">yield</span> item\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Again, easy. Now let's try to make these two functions as elegant as <code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x<span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code>.\nThe best way to do this, is be as close to the original API as possible. Let's take advantage of <code class=\"language-js\">Array<span class=\"token punctuation\">.</span>from</code>, and make our own\n<code class=\"language-js\">Lazy<span class=\"token punctuation\">.</span>from</code> method for all our lazy-evaluation needs. This way, we can have <code class=\"language-js\"><span class=\"token class-name\">Lazy</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>map</code> and <code class=\"language-js\"><span class=\"token class-name\">Lazy</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>filter</code>, and\nmost code will just be a <code class=\"language-js\">Lazy<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code> away from making no copies.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Lazy</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iterable</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>iterable <span class=\"token operator\">=</span> iterable\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Lazy</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>iterable<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Alright, so we can wrap iterables, but how can we map over them? We'll bring back our anonymous iterable to do so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Lazy</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...</span>\n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mapFunc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n        <span class=\"token keyword\">return</span> Lazy<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> t <span class=\"token keyword\">of</span> _this<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">yield</span> <span class=\"token function\">mapFunc</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I like to let the code speak for itself normally but this can be a bit to parse. We return a new <code class=\"language-js\">Lazy</code> object,\nwrapping a new anonymous iterable mapping over this iterable. Since our <code class=\"language-js\">Lazy</code> object is an iterable (it implements <code class=\"language-js\">Symbol<span class=\"token punctuation\">.</span>iterator</code>)\nwe just need to iterate over it. Unfortunately, in the anonymous object's method <code class=\"language-js\"><span class=\"token keyword\">this</span></code> would refer to the new anonymous object,\nnot the original <code class=\"language-js\">Lazy</code> instance, so we create an alias to that <code class=\"language-js\"><span class=\"token keyword\">this</span></code> reference, <code class=\"language-js\">_this</code>, and reference it from our closure.\nThis pattern is incredibly powerful, and we'll do filter pretty much the exact same way.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Lazy</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...</span>\n    <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">predicate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n        <span class=\"token keyword\">return</span> Lazy<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> t <span class=\"token keyword\">of</span> _this<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token keyword\">yield</span> t\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can expand our horizons and implement other array methods like <code class=\"language-js\">concat</code>, and <code class=\"language-js\">forEach</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isIterable</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arg</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">typeof</span> arg <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> Symbol<span class=\"token punctuation\">.</span>iterator <span class=\"token keyword\">in</span> arg\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Lazy</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n        <span class=\"token keyword\">return</span> Lazy<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> _this\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> arg <span class=\"token keyword\">of</span> args<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isIterable</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> arg\n                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">yield</span> arg\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> t <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And to get crazy, we can do some recursion with this technique and implement <code class=\"language-js\"><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>flat</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">depth<span class=\"token operator\">=</span><span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>depth <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> Lazy<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> _this<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isIterable</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> Lazy<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span>depth <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">yield</span> item\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The morale of the story is once you get oriented, generators can make\nefficient, readable and effortlessly composable code, effectively reducing the\nsins of JavaScript. I think the 'anonymous iterable'\nidiom is a real gem in TypeScript, with generators also shining. Hopefully you decide\nto use something like this over lowering yourself to mutable <code class=\"language-js\"><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>push</code>\nin your performance-sensitive hotspots. Although I'm yet to [micro]benchmark the two.</p>\n<p>As promised, below is a decently extensive <code class=\"language-js\">Lazy</code> implementation in TypeScript.\nAs stated before, I <a href=\"https://www.npmjs.com/package/lazy-from\">published it to npm</a>,\nalthough it could use <a href=\"https://github.com/MichaelBelousov/lazy-from/issues\">a great deal of work</a>.\nYou can <code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> lazy-from</code> it or copy and paste into your TypeScript project.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Typescript@4.0 probably simplifies or allows better alternative typings for</span>\n<span class=\"token comment\">// some of these</span>\n\n<span class=\"token comment\">/** return whether arg is T or an iterable of T */</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">isIterable</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> Iterable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> arg <span class=\"token keyword\">is</span> Iterable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> arg <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> Symbol<span class=\"token punctuation\">.</span>iterator <span class=\"token keyword\">in</span> arg\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** iterable wrapper for functional programming with lazy composition */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Lazy<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Iterable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token generic-function\"><span class=\"token function\">from</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>iterable<span class=\"token operator\">:</span> Iterable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Lazy<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">protected</span> iterable<span class=\"token operator\">:</span> Iterable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Iterator<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>iterable<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">predicate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n        <span class=\"token keyword\">return</span> Lazy<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> t <span class=\"token keyword\">of</span> _this<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">yield</span> t\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token generic-function\"><span class=\"token function\">map</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">transform</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n        <span class=\"token keyword\">return</span> Lazy<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">from</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> t <span class=\"token keyword\">of</span> _this<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">yield</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">flat</span><span class=\"token punctuation\">(</span>depth<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>depth <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> Lazy<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> _this<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isIterable</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> Lazy<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span>depth <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">yield</span> item\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Iterable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Lazy<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n        <span class=\"token keyword\">return</span> Lazy<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> _this\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> arg <span class=\"token keyword\">of</span> args<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isIterable</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> arg\n                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">yield</span> arg\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">doSomething</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Lazy<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n        <span class=\"token keyword\">return</span> Lazy<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> _this<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span>\n                    <span class=\"token keyword\">yield</span> item\n                    i<span class=\"token operator\">++</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token generic-function\"><span class=\"token function\">reduce</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Result<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>prev<span class=\"token operator\">:</span> Result<span class=\"token punctuation\">,</span> curr<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Result<span class=\"token punctuation\">,</span> initial<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Result<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Result <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> initial\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> curr <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n            i<span class=\"token operator\">++</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">toSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Set<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> \n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">predicate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">predicate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span>done\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span>sortFunc<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Lazy<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>sortFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">get</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> i<span class=\"token operator\">++</span>\n        <span class=\"token keyword\">return</span> i\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">===</span> t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">predicate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> item\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"October 06, 2020","path":null,"title":"Lazy Javascript Iterables via Generators"},"fields":{"slug":"/blog/iterators-and-generators-are-better-than-array-prototype/"}}},{"node":{"html":"<p>I wrote a couple of articles for\n<a href=\"https://medium.com/imodeljs/community/home\">Bentley's iModel.js community blog</a>.\nA disclaimer, I work for Bentley, but I found a very convenient\nJavaScript pattern while using our vanilla Javascript APIs in React;\nit inspired me to write about it for internal and external usage, and\nthat turned into two articles.</p>\n<p>The pattern is called the <code class=\"language-text\">Provider-Local Class</code> pattern, I named it\nmyself but hopefully the idea is clear. It seriously helped\nme simplify a lot of my code so go check it out for some\nadvanced React discussion, and maybe it'll improve your integration\nof APIs in your React application somewhere.</p>\n<p>The first article, <a href=\"https://medium.com/imodeljs/writing-a-primitivetool-a044647f7f66\">Writing a Primitive Tool</a>,\nserves as an application context for using the pattern, I've\nincluded a gif of the final application just to pique the interest.</p>\n<p><img src=\"https://miro.medium.com/max/700/1*fYaZC7eQrVdlFrQ-DMbhsA.gif\" alt=\"gif of the app made in the article\"></p>\n<p>Article two, <a href=\"https://medium.com/imodeljs/provider-local-class-pattern-dc44bab33144\">The Provider-Local Class Pattern</a>, takes the example application\nthat was built, and simplifies usage of API subclasses with the pattern.\nIt also discusses the code-scalability that the pattern provides and\ncompares that with trying to do the same thing via <a href=\"https://redux.js.org/\">Redux</a>.</p>\n<p>If you think there are better alternatives (I think this is the most\nidiomatic way to do it in React), please feel free to write a blog post\non why and send me a link.</p>","frontmatter":{"date":"October 04, 2020","path":null,"title":"iModel.js Articles"},"fields":{"slug":"/blog/imodeljs-articles-oct-2020/"}}},{"node":{"html":"<p>So you want to join the <a href=\"https://reactjs.org\">React</a> world, but when you look online,\nyou either see some buzz about hooks, or a bunch of tutorials using React with big\nclasses and method overrides. Most of all you probably see something that isn't technically\nreal Javascript, JSX.\nThere's an open secret about modern web development. It's complicated. Really complicated.\nA-transpiles-to-B-transpiles-to-C-transpiles-to-Javascript complicated (more on the word\n<em>transpile</em> later. Maybe this isn't that\nsecret, but lots of web developers either ignore it or pretend it's easy after learning\n50 distinct technologies to make their website. This article will try to take the magic out,\nand hopefully show that there is a light at the  end of the tunnel.</p>\n<p>JSX is a very small one of those many technologies, a syntax extension for JavaScript that allows\nyou to declare HTML element trees in code instead of manually manufacturing them. Even\nmore specifically, JSX\nis really syntactic sugar used by the react ecosystem for constructing \"components\", a\nreusable chunk of HTML.\nTake for instance the following vanilla JavaScript script running in a simple webpage.\nIf you want to test it, you can run <code class=\"language-bash\">python3 <span class=\"token parameter variable\">-m</span> http.server</code> in a folder\ncontaining the two files, then you can see it at localhost:8000 in the browser.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">var</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mike'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> root <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>ul<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> people<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  li<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" is \"</span> <span class=\"token operator\">+</span> people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token string\">\" years old\"</span><span class=\"token punctuation\">;</span>\n  ul<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// If you've seen modern JavaScript, you'll notice there are</span>\n<span class=\"token comment\">// some no-nos above, there are better ways to do things now</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- index.html --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>JSX gives us a much more declarative way to do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mike'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// once you know react, you'll know there's something else you need when generating</span>\n<span class=\"token comment\">// a dynamic list of children...</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>people<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> is </span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> years old </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But there is one significant difference, JSX is only used in the react ecosystem,\nwhere DOM elements aren't actually built directly by consumers. That's why we need to tell React to run its own\nrender method given the JSX expression. JSX isn't equivalent to calling the DOM's element construction\nAPI/functions. Even though someone could write a JSX transpiler that did that, it's never seen\nwide adoption, probably due to the prevalence of React (You should probably look into\n<a href=\"https://svelte.dev/\">Svelte</a> if you're interested in something like that).\nIf we take what had above and see what the JSX transpiles to, we get the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ui'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> \n  <span class=\"token comment\">// the ... \"spread\" syntax used allows us to generate an arbitrary list of arguments.</span>\n  <span class=\"token comment\">// parameter #3 and beyond to the \"React.createElement\" function are the children of the element,</span>\n  <span class=\"token comment\">// and can be strings to be an html text node, or another complex element</span>\n  <span class=\"token operator\">...</span>people<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> \n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>p<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>p<span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>React choosing to not use real elements allows it to have a light-weight representation of the DOM (this technique is called\nusing a <em>virtual DOM</em> or <em>VDOM</em>) that it can later efficiently update the real DOM to match. If you want\nto experiment with more JSX to regular JavaScript conversions, <a href=\"https://babeljs.io\">Babel</a>, the world's de facto JavaScript\ntranspiler has a <a href=\"https://babeljs.io/repl/#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&#x26;build=&#x26;builtIns=false&#x26;spec=false&#x26;loose=false&#x26;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA&#x26;debug=false&#x26;forceAllTransforms=false&#x26;shippedProposals=false&#x26;circleciRepo=&#x26;evaluate=false&#x26;fileSize=false&#x26;timeTravel=false&#x26;sourceType=module&#x26;lineWrap=true&#x26;presets=react&#x26;prettier=false&#x26;targets=&#x26;version=7.9.6&#x26;externalPlugins=\">playground for JSX compilation</a>.</p>\n<p>For your reference, I'll leave here a terse demonstration of all JSX features and differences from HTML.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//// dynamic children</span>\n<span class=\"token keyword\">const</span> selfClosingTag <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// all tags can be self closing</span>\n<span class=\"token keyword\">const</span> dynamicContent <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>selfClosingTag<span class=\"token punctuation\">,</span> selfClosingTag<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> lists <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>selfClosingTag<span class=\"token punctuation\">,</span> selfClosingTag<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> emptyContent <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> objects <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token string\">\"string object\"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// this will throw an error, plain objects are not valid react elements</span>\n<span class=\"token comment\">//const emptyContent = &lt;span> {{}} {new Date()} &lt;/span>; </span>\n<span class=\"token keyword\">const</span> emptyContent <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/link<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello!\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">const</span> optionalContent <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>isLoading <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Loader</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// clever short-circuiting hacks</span>\n<span class=\"token comment\">// this will throw an error, lower case components CANNOT be user-defined, they're \"intrinsic components\", defined by HTML</span>\n<span class=\"token comment\">//const loader = &lt;myloader />; // won't compile!</span>\n<span class=\"token keyword\">const</span> stringProp <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyLoader</span></span> <span class=\"token attr-name\">myCustomStringProp</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prop is to attribute as component is to element in React</span>\n<span class=\"token comment\">// any object can be passed as a prop by using {} delimiters instead of quotes</span>\n<span class=\"token keyword\">const</span> booleanProp <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyLoader</span></span> <span class=\"token attr-name\">myCustomStringProp</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//this is sugar for myCustomStringProp={true}</span>\n<span class=\"token keyword\">const</span> numberProp <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyLoader</span></span> <span class=\"token attr-name\">myProp</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> anyObjectProp <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyLoader</span></span> <span class=\"token attr-name\">myProp</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">an</span><span class=\"token operator\">:</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prop is to attribute as component is to element in React</span>\n<span class=\"token comment\">// you can spread props</span>\n<span class=\"token keyword\">const</span> examplePropObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">prop1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">prop2</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> spreadProps <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyLoader</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>examplePropObj<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">hello</span><span class=\"token operator\">:</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// just like spreading objects</span>\n\n\n<span class=\"token comment\">//// html differences</span>\n<span class=\"token comment\">// use \"className\" instead of \"class\"</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-css-class<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">// listeners on intrinsic elements take real callbacks and are camel-cased</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">onMouseEnter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">mouseevent</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mouseevent<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">// inline styles are camel-cased and objects instead of inline css</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">marginBottom</span><span class=\"token operator\">:</span> <span class=\"token string\">\"56px\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">marginTop</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">// A react \"fragment\" generates HTML without needing a parent tag, effectively</span>\n<span class=\"token comment\">// injecting the HTML chunk into the parent element, good for wrapping multiple conditional children</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>test <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token string\">\"hello!\"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">// if test is true, yields &lt;div>hello! 5&lt;/div></span>\n<span class=\"token comment\">// You cannot use XML/HTML comments</span>\n<span class=\"token comment\">//&lt;> &lt;!-- not valid jsx --> &lt;/></span>\n<span class=\"token comment\">// and you can't always use JS comments which sucks...</span>\n<span class=\"token comment\">// &lt;div></span>\n<span class=\"token comment\">//   // this isn't valid JSX either</span>\n<span class=\"token comment\">// &lt;/div></span>\n<span class=\"token comment\">// usually you can use this if you need a comment:</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* my valid comment */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The other main thing React allows, with JSX making it syntactically convenient, is user-defined\n\"components\", they look like normal HTML elements being used in JSX, but they have custom\nlogic in what attributes (<em>props</em> in React parlance) you can pass them, what\nHTML they generate with those attributes, and they can have their own internal state. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> props<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">'s age is divisible by </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">2</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">! </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> is </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> years old </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyComponent</span></span> <span class=\"token attr-name\">person</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mike'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That example doesn't actually have state, just to note, but it does generate different\nHTML depending on what is passed to it.</p>\n<h2>Setting up JSX transpilation without magic</h2>\n<p>To <em>transpile</em> is like to compile, but instead of transforming a higher level source language into a lower level language,\nit is more indicative of transforming into a similar language. JSX to Javascript, is often called transpilation, probably\nbecause it's done often by Babel which is usually used for real transpilation of converting some JavaScript code into other\nJavaScript code using more well-supported features that most browsers will have implemented. As mentioned before, Babel\nis the world's most popular JavaScript transpiler. The most popular way to use React is with a tool called <a href=\"https://github.com/facebook/create-react-app\">create-react-app</a>.</p>\n<p>But CRA installs about 1500 packages as of today, and uses a <em>bundler</em>, webpack, that manages a transpiler toolchain and hides\nthe nitty-gritty real stuff from you. You should work without webpack at least once, but I do recommend using webpack for heavy\nproducts and definitely anything in production, so you can get optimization and hot-reloading during development.</p>\n<p>Another tool that is thankfully less magical and we will make use of here, is TypeScript. We won't focus on TypeScript much itself, but it will\nlet us look at the nitty gritty while still developing React comfortably. If you haven't already, now is the time to install <a href=\"https://nodejs.org\">Node.js</a>,\nI recommending using a Node installation management program like <a href=\"https://github.com/nvm-sh/nvm\">nvm</a>, or if you're on windows,\n<a href=\"https://github.com/coreybutler/nvm-windows\">nvm-windows</a>, to install it. Use it to install a capable version of Node like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">nvm <span class=\"token function\">install</span> <span class=\"token number\">12.16</span>.3\nnvm use <span class=\"token number\">12.16</span>.3</code></pre></div>\n<p>With node installed, comes its package manager, <code class=\"language-bash\"><span class=\"token function\">npm</span></code>. We could already install <code class=\"language-bash\">create-react-app</code> here, but we're just going to\nonly install typescript, which will give us the typescript compiler program, <code class=\"language-bash\">tsc</code>. Install it globally (as opposed to the current\ndirectory/project) using <code class=\"language-bash\"><span class=\"token function\">npm</span></code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">--global</span> typescript</code></pre></div>\n<p>Now you should be able to run <code class=\"language-bash\">tsc <span class=\"token parameter variable\">-h</span></code>, to see some of the options. TypeScript's job for us is not just to compile typescript to JavaScript, but more importantly to\ntranspile our JSX to React, since it supports JSX in <code class=\"language-bash\">*.tsx</code> files. For this article, our goal will be to create a point-buy system\nfor an RPG character UI. We'll use React with and without hooks, see the difference, and employ some basic css to make it stylish.</p>\n<h2>modules</h2>\n<p>We will make our React and ReactDOM libraries globals variables in the browser by linking them in the HTML. We will use the\n<a href=\"https://github.com/umdjs/umd\">UMD</a> packaged version of React, hosted by\nsome friendly denizens of the internet <a href=\"https://www.jsdelivr.com/\">jsdelivr</a> which are a Content Delivery Network or CDN, so they host common\nfiles like packaged React builds for us. There are a lot of module formats for JS, but UMD uses a global variable in the browser which makes it\nthe easiest for us to consume without a bundler like webpack to process it for us.\nYou can use jsdelivr's search bar to find React, but here's <a href=\"https://www.jsdelivr.com/package/npm/react?path=umd\">a link</a>\ndirectly to their page on provided UMD packages of React. Go ahead and hit the copy clipboard icon and\ncopy the HTML vesion and load that script in out HTML. It will already be set to the latest stable\nversion which should be fine. You also need the latest version of <code class=\"language-bash\">react-dom</code> which you can find\nusing the jsDelivr search bar or <a href=\"https://www.jsdelivr.com/package/npm/react-dom?path=umd\">here</a>.\nYour script should look like this, note that both react dependencies are loaded before our site's\nown script.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- index.html --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/react@16.13.1/umd/react.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/react-dom@16.13.1/umd/react-dom.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>TypeScript is only designed to really work with packages, so it won't understand yet that we're\nexpecting React to already exist in global scope. This makes sense, since TypeScript wants to know\nthe type of everything that is being used, including imported functions. Normally, we'd install the React\npackage and import it in typescript as such:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Instead, we will simply tell typescript using the <em>declare</em> keyword, that something exists that\nit can't tell by itself. We won't go any further into typescript, this will shut up the compiler.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> React<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> ReactDOM<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This tells typescript that it should expect the names React and ReactDOM were declared using the \"var\"\nkeyword somewhere before the code the compiler is processing, and it tells the compiler to not care\nabout their type by giving them the type, <code class=\"language-tsx\"><span class=\"token builtin\">any</span></code>. We lose valuable typechecking, but it makes\nthings less complicated to start; we'll still get valuable type checking for our own stuff, but\nnot when we use the React and ReactDOM names.</p>\n<p>Let's get our new <code class=\"language-bash\">index.tsx</code> file off the ground:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> React<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> ReactDOM<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AttributeCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> \n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">PointBuy</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AttributeCounter</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Strength\"</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AttributeCounter</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Charisma\"</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AttributeCounter</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Wisdom\"</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PointBuy</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now run <code class=\"language-bash\">tsc</code> with the <code class=\"language-bash\"><span class=\"token parameter variable\">--jsx</span></code> setting set to \"react\" (it can also not transpile it or target react for iOS). Run it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">tsc <span class=\"token parameter variable\">--jsx</span> react  index.tsx</code></pre></div>\n<p>Typescript will create the index.js file for you or yell at you if you made a mistake. You can open it and see some neat tricks, including the converted JSX,\nas well as transpilation of other not-well supported javascript features like the class is compiled to a function with a \"prototype\" property attached to it.\nYou can read up on prototype based inheritance and JavaScript's object/class model\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">elsewhere</a>,\nsince that's not in scope here. Either way, you should now\nbe able to run a server, like the Python simple http server mentioned earlier, navigate to <code class=\"language-bash\">index.html</code> and see React render out 3 values and 3 \"+\" buttons, and 3 \"-\" buttons.\nWith React working, we can talk about state, and what that \"useState\" function does, and how we're going to use state differently in that class component.</p>\n<h2>hooks, class components, and state</h2>\n<p>React 16.8 introduced the concept of <em>hooks</em>. React already had what they call <em>functional components</em>, which is where a function takes an object of props as an argument,\nand returns a JSX fragment. Hooks allow you to \"hook\" into React's render logic specific to the currently rendering component. This can be used to identify each component\nin the rendered component tree, which means functional components which normally only have access to props can now store their own state in a way unique to the component instance.\nWith that, you can ditch the use of classes entirely, but we'll come back to this after we learn how to use state the old way in React anyway.</p>\n<p>You'll notice we used a class in our <code class=\"language-bash\">index.tsx</code> already. This is the old way of creating stateful components that can rerender themselves. You simply inherit (extend)\nthe official React.Component class, and override its lifecycle methods, in this case just the \"render\" method. In these objects, state is an object property of a component instance,\nbut you can't set it the same way as you normally do in JavaScript. To set state, you need to do it in a way that React knows, so you use the inherited method, <code class=\"language-tsx\">setState</code>,\nwhich takes an object containing all of the changed state values. Let's make that \"+\" button increment the <code class=\"language-tsx\">value</code> property of the state.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AttributeCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> \n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To do so, we use React's built-in support for setting a listener similiarly to how we would on the DOM, but directly on the component and taking an actual function reference.\nOn the DOM you'd have to pass a name to a function in scope to the \"onclick\" attribute, or manually find the element, probably by setting some id attribute, and use the DOM\nelement API to attach and possibly remove the listener. But here we can just use an arrow function inline to run our component instance's <code class=\"language-tsx\">setState</code> method to increment the value.\nNext we decrement for the \"-\" button:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AttributeCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In original React, this was the only way to use state in a way that would cause components to rerender.\nThe point of React, is that components only rerender when their state changes. This old way isn't bad,\nbut it's\na lot of boiler plate, and we aren't using any of the life cycle methods at all yet. This works because our component class gives us\na new instance of the component each time React needs one, and we store the state on that component until the component is unmounted by\nReact and its instance and state variables can be garbage collected.\nWhen we call <code class=\"language-tsx\">ReactDOM<span class=\"token punctuation\">.</span>render</code>, we give it our React element to render, created by the implicit React.createElement which we're using JSX\nto hide. When the react element to be rendered is a class, an instance is initialized, rendered,\nand mounted (<em>mounted</em> is React jargon for its resulting render HTML is added to the DOM and\nReact is keeping track of it).</p>\n<p>If you pass a function to <code class=\"language-tsx\">React<span class=\"token punctuation\">.</span>createElement</code>, React can't create an instance, so it just runs the function with the props object as an argument\nfrom the parent. So two different instances of a functional component use the same function, and have\nno state. A functional component used like <code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyFunction</span></span> <span class=\"token attr-name\">a</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">b</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">c</span> <span class=\"token punctuation\">/></span></span></code> would be interpreted by React as <code class=\"language-tsx\"><span class=\"token function\">MyFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>a<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>'</code>. Then\nwhatever JSX-fragment/React-element that functional component returns is rendered with its components in turn, and any intrinsic elements or strings marked as literal return.\nThe point is, there is no state this way, just the props passed by the parent.</p>\n<p>But we can have state in functional components, when React pays attention to the render order in the tree. Before we start using state in\nour functional component using hooks, lets look at where that state is stored, so we can better understand some of the restrictions hooks will\nimpose.</p>\n<p>Suppose we have the following React app:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">C</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>b <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">C</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// in 5 seconds make false</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">B</span></span> <span class=\"token attr-name\">b</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So the App is an <code class=\"language-tsx\"><span class=\"token constant\">A</span></code> component, when A is rendered, it tells React to render one child <code class=\"language-tsx\"><span class=\"token constant\">B</span></code> with a prop of <code class=\"language-tsx\">b</code> as <code class=\"language-tsx\"><span class=\"token boolean\">true</span></code> which is\nderived from its state of <code class=\"language-tsx\">a</code>. <code class=\"language-tsx\"><span class=\"token constant\">B</span></code> renders two <code class=\"language-tsx\"><span class=\"token constant\">C</span></code> components, because its <code class=\"language-tsx\">b</code> component as passed to it was true, and the <code class=\"language-tsx\"><span class=\"token operator\">&amp;&amp;</span></code> expression evaluated\nvia short-circuiting to a <code class=\"language-tsx\"><span class=\"token constant\">B</span></code> element.</p>\n<div style=\"text-align:center\">\n  <img style=\"width:600px\" alt=\"YOU CAN'T SEE THIS IMAGE\" src=\"/images/component-tree.svg\" />\n</div>\n<p>You can see that the <code class=\"language-tsx\"><span class=\"token constant\">C</span></code> function component was called twice, each time for a unique child of <code class=\"language-tsx\"><span class=\"token constant\">B</span></code>.\nWhen React traverse the render tree, after the state update, and sees that the second <code class=\"language-tsx\"><span class=\"token constant\">C</span></code> is gone, it\nwill unmount it, which means React no longer listens for updates to that component's props or state.\nNow let's create the same thing using hooks for state.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\"hello\"</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">B</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">C</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>b <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">C</span></span><span class=\"token punctuation\">/></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">A</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> setA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setA</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">B</span></span> <span class=\"token attr-name\">b</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In this iteration I opted to switch to using arrow functions which are often much nicer (once\nyou're used to them), and have other benefits compared to old-school function literals. Regardless,\nyou can see a lot of new stuff going on already to do the same thing. Since function components\nare always the render function, there is no \"constructor\" or other life cycle method which we\ncan use to set our timeout in. Instead, we have to learn about the concept of <em>effects</em>.</p>\n<p>An effect, is a function that React will run after each render, possibly with a list of\n<em>dependencies</em>, states that if changed trigger the effect. Probably my favorite thing about\nhooks, is how they can truly turn components into finite state machines with effects.\nYou have multiple state properties, and multiple effects that run at each state change, and can\nlisten to only when a particular state changes.</p>\n<p>In <code class=\"language-tsx\"><span class=\"token constant\">A</span></code> above, our effect says \"after each render, if any of the states in this list, <code class=\"language-tsx\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code>, changed,\nset a timeout that sets the state <code class=\"language-tsx\">a</code> to <code class=\"language-tsx\"><span class=\"token boolean\">false</span></code> in 5000 milliseconds\". When you consider that\n<code class=\"language-text\">[]</code> has no states in it and realize it will never change and therefore only happens after the first\nrender, you have one of the first React hooks idioms, which I'll call <code class=\"language-tsx\">useDoAfterMount</code>. Together, it's,\n\"after mount, set a timeout to change the state of <code class=\"language-tsx\">a</code> to <code class=\"language-tsx\"><span class=\"token boolean\">false</span></code> in 5000 milliseconds\".</p>\n<p>As for the <code class=\"language-tsx\">useState</code> hook, it allows you to allocate one cell of state for the currently rendering\ncomponent in the component tree, with an initial value. This initial value is ignored in future renders.\nWe will return to that, but for now, suppose we added some hook state to our <code class=\"language-tsx\"><span class=\"token constant\">C</span></code> components:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>useState<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span><span class=\"token operator\">=></span>prev<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is a more advanced usage of a react state dispatcher (the <code class=\"language-tsx\">setCount</code> function returned by\n<code class=\"language-tsx\">useState</code>). Instead of a new value, you can pass a function that gets the current value and\ncreates a new one from it, like how above we increment from the current value which I nickname\nprev (since it's about to become the previous value). Because <code class=\"language-tsx\">setInterval</code> runs the function\nevery second, it will keep going up. If we didn't use a function for the dispatcher call, we\nwould do the following, which has a bug:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is probably one of the hardest challenges of starting hooks. What's wrong with this code?\nThe issue is, when the first render is ran, and the useEffect's function is parsed, the value of\ncount is <code class=\"language-tsx\"><span class=\"token number\">5</span></code>. Since the dependencies never change (the dependency list is empty still), the hook\nisn't re ran. That same function of <code class=\"language-tsx\"><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code> is ran every second, effectively not changing\nanything. Alright then, how about then we use that fancy dependency list then?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Alright, so now this... probably won't work. Think about it. On the first render, the function is called,\nand the effect is ran, adding code of <code class=\"language-tsx\"><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code> to be called every second. One second passed, the\nstate changes (<code class=\"language-tsx\">count</code> is now 6), and react rerenders, rerunning the function but this time useState\nreturns 6 instead of the initial state which it ignores, 5. <code class=\"language-tsx\">count</code> has now changed, so the effect runs\nagain, adding <em>another</em> code body to set state this time to <code class=\"language-tsx\"><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code> every second. One more\nsecond passes, and now <em>both</em> functions execute in an unpredictable order. Which will occur first and\nwhich last? Will your the state of <code class=\"language-tsx\">count</code> be <code class=\"language-tsx\"><span class=\"token number\">7</span></code> or <code class=\"language-tsx\"><span class=\"token number\">6</span></code>? It gets worse, because this balloons up and\na minute later you now have 60 functions running per second, all setting the state to different things.\nAvoiding dependencies on state when you can just transform the current state in the dispatcher's\nargument is key to avoiding asynchronous programming headaches, so use it whenever possible.</p>\n<p>With that out of the way, we can take the brief descriptions and formalize what the <code class=\"language-tsx\">useState</code> hook\ndoes, and why React actually has something called the <a href=\"https://reactjs.org/docs/hooks-rules.html\">rules of hooks</a>.\n<code class=\"language-tsx\">useState</code> allocates a singular state reference for the currently rendering component when the\ncomponent is first rendered. On all renders, it then returns the current state. Notice, that the\n<code class=\"language-tsx\">useState</code> parameters don't include any identifier for identifying which state you want, you don't\nask for <code class=\"language-tsx\"><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code>. This is because React uses the ordered nature of javascript to\nfigure out which state you're asking for. Because of using this order, you <em>cannot use hooks in\nconditional code</em>. You have to extract it from the conditional code, or strange thing could happen.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">C</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> setA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> b<span class=\"token punctuation\">,</span> setB<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> setC<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>blah<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span> setB<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">,</span> setC<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// same as empty jsx</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">B</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">C</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">C</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n};</span></code></pre></div>\n<p>When <code class=\"language-tsx\"><span class=\"token constant\">C</span></code> renders, React allocates two state cells, but if <code class=\"language-tsx\">props<span class=\"token punctuation\">.</span>blah</code> flips its truth value,\nthen <code class=\"language-tsx\">b</code> and <code class=\"language-tsx\">c</code> will flip which state they get from React. For these reasons, people usually use\nlinters to detect and warn them about using hooks in ways that can cause this strange behavior.\nFor the same reasons, you cannot run hooks in loops or other dynamic ways, they need to be run\nat function scope.</p>\n<!-- transition? -->\n<p>Now, let's have a final note on the alternative to class instances, and then we can really get to work.\nWhen <code class=\"language-tsx\"><span class=\"token constant\">B</span></code> renders, how does React know which <code class=\"language-tsx\">a</code>, <code class=\"language-tsx\">b</code>, and <code class=\"language-tsx\">c</code> state references to give to it?\nUnlike the class components where React keeps and maintains an instance, React needs to think a bit\nharder. React remembers the <em>path</em> it took to render this component. If we were to run\n<code class=\"language-tsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">B</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span></code>, React sees three component instances. It sees something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1: \n  path: /B\n  renderer: B\n2: \n  path: /B/C:1\n  renderer: C\n\n3: \n  path: /B/C:2\n  renderer: C</code></pre></div>\n<p>But if you look at our first example of JSX, how can it tell where components are in the render\nfunction if they are generated dynamically like so?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mike'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>people<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> is </span><span class=\"token punctuation\">{</span>person<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> years old </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  root\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You could associate state by the order they come in, but react does one better and requires you to\npass a special key prop in all list-generated children to tell react which is which, allowing\nyour list to be in any order and change in any way. If a component shows up with a different key,\nit will be newly mounted with fresh state, if a component's props change but it has the same key,\nit is identified as the owner of that state and rerenders. It is important that your keys are\nunique, or React will only render one of them.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>people<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> is </span><span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> years old </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  root\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And with that in-depth explanation of most of reacts internals, we should be set to build our\nRPG point buy system for real, let's return to our original concept with some tweaks:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> React<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> ReactDOM<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AttributeCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> \n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">PointBuy</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AttributeCounter</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Strength\"</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AttributeCounter</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Charisma\"</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AttributeCounter</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Wisdom\"</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PointBuy</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Let's start by <em>lifting</em> the state out of the children into the parent, so that the parent\ncan impose concurrent constraints.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> React<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> ReactDOM<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// extrace useState function from react</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AttributeCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        &lt;button onClick=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>onInc<span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>onDec<span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">-</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span> \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">PointBuy</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">,</span> setStr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>cha<span class=\"token punctuation\">,</span> setCha<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>wis<span class=\"token punctuation\">,</span> setWis<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AttributeCounter</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Strength\"</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>str<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onInc</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">setStr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token operator\">=></span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onDec</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">setStr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token operator\">=></span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AttributeCounter</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Charisma\"</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>cha<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onInc</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">setCha</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token operator\">=></span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onDec</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">setCha</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token operator\">=></span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AttributeCounter</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Wisdom\"</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>wis<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onInc</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">setWis</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token operator\">=></span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onDec</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">setWis</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token operator\">=></span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PointBuy</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And if you get this far... well you're going to have to do the rest now!</p>","frontmatter":{"date":"May 06, 2020","path":"/blog/react-hooks-tutorial","title":"React and its hooks without Create React App"},"fields":{"slug":"/blog/react_hooks_tutorial/"}}},{"node":{"html":"<p>Always use a monorepo. Because otherwise the temptation to jam more stuff into one package is too strong.\nContext switches are annoying, and that may prevent you from correctly crossing package lines when thinking\nwhere to put your code. In my terrible opinion you can always extract the history out to\na separate repo later with <a href=\"https://github.com/newren/git-filter-repo\">git filter-repo</a>.</p>\n<p>Anyway, the <em>real</em> reason to use a monorepo is because in tooling environments like HTML5\nJavaScript stacks (e.g. create-react-app),\n(where monorepo jargon is especially popular) you can expose custom linter rule packages that\nbend everyone to your all-knowing will!!!!!! In a work project recently, we had some Sass theming logic\nthat I deprecated in favor of a more direct, less complicated method for achieving the same thing.\nWe all wanted a better method and had been looking for a while.\nDeprecating it was a great step, but in a large product code base, there's little value and\npossible danger in taking a long time to rewrite all of the deprecated references.\nThe ideal approach is \"progressive migration\"—not wasting time converting everything\nthat works fine as is, but slowly converting anything that needs maintenance, implying a\nsort of LRU chipping away at usage of the deprecated styling technique. Since we were already using\nlint-staged+husky to force linting of vcs-staged files precommit, I just added the new\ndeprecation rule and set it to error, so\nother developers could not change style files without first migrating the deprecated references.\nIt's a tad intense since it still\ndemands that you migrate any file you may make small changes to, but it ensures active files receive\nthe love of an easier theming logic so future maintenance is easier.</p>\n<p>Without a very proper naming scheme, or private package registry like we have, project-scope\npackages are a bit difficult to justify. But, if you're careful, there's a lot of value and change\nyou can bring about by reading your linters' APIs.</p>\n<p>Without a monorepo setup, I'd have had to setup a separate repository and publishing pipeline. Not\na ton of work, but for a utility of exactly project-scope it belongs in your project's source\n(vcs) context. I especially opted for this since stylelint only seems to support package-level\ncustom rules (afaik). I'm sure a module-level custom rule would have been nicer for something\nproject-only.</p>\n<p>JS Monorepos can come with their own headaches, but the scalable reusability is essential.</p>","frontmatter":{"date":"February 15, 2020","path":"/blog/always-monorepo","title":"Always use a Monorepo"},"fields":{"slug":"/blog/always_monorepo/"}}},{"node":{"html":"<p>I've been working on a human eye recently. It's not done, but I think I'll put up a description (or even a youtube tutorial?)\non how to make a fully procedural eye once I'm done. Or at least a vanity post of how many nodes I used.\nIt contains <em>no</em> images/textures. Everything is generated using math and noise\nfunctions, in particular Blender's standard Cycle's Perlin noise implementation, Musgrave, and Voronoi.</p>\n<div style=\"text-align:center\">\n  <img style=\"width:50%\" alt=\"you seem to not be able to see the image\" src=\"/images/the_eye.png\" />\n</div>\n<p>You can tell it's not done based on the iris color, and the fact that I haven't rendered it with the clear gel layer that the\neye typically has around it, which would cause some much needed refraction. Also this version doesn't tone down the veins as\nmuch as needed.  Still, I'm pretty happy with some of the results so far so I figured I'd put it out here.</p>","frontmatter":{"date":"December 19, 2019","path":"/blog/eye-progress","title":"Eye Progress"},"fields":{"slug":"/blog/eye_ball/"}}},{"node":{"html":"<p>I needed to do a top-down draft, a design of something I would be 3D-modeling later, and so I opened up\nmy 2D drawing toolkit, Krita. I bumped the resolution to\n5000x5000 pixels, and had to think deeply about it.</p>\n<p>The lack of dynamic resolution in such raster based image manipulation programs is saddening. Especially\nin my drafting process. It's inconvenient to have to worry about blurry details when zooming in too far, or slow stroke\nrendering/committing when zooming out too much. So, since I already use Blender for practically everything else and\nwas enjoying the quality of life improvements in Blender 2.8 recently, I decided to check out its new 2D (Grease Pencil) tools for kicks.\nLo and behold, the lagless, vector-based, infinite resolution, hassle-free zoom, layered, materialed, simple, beautiful 2D workspace of my\ndreams was before me. Gone are the drafting days of drawing arrows to various scene elements to elaborate on them.\nJust zoom into them! You can just zoom infinitely and write inside them. The brushes are clean, and\ncustomizable. Erasing is instant (use point-erase), and rendering is lagless. And since you're not\ndealing with raster, there are <em>no</em> complex selections to perform. You can select strokes independently,\nselect their points, move things, scale things, and it takes no time at all. You can <em>sculpt</em> your points,\nadding or reducing thickness of lines, moving them, adding some fuzziness, simplifying them, and more. It's not\njust good for drafting, but all drawing comes naturally to it. And you can even extend it to 3D! Draw in 3D,\nstart modeling in 3D. Draw on your 3D models to concept some greebling if your artstyle demands it!\nIt has never felt so easy to me. Blender has always been good at what it does,\nbut it has never felt so exceptionally designed until now. Whether you're designing interfaces or levels, doing\n3D graphics work, doing 2D work, or any animation, definitely get into Blender 2.8 and start a new 2D drawing\nproject. It just works!</p>","frontmatter":{"date":"July 13, 2019","path":"/blog/blender-2.8-grease-pencil-is-awesome","title":"Blender 2.8 Grease Pencil Is Awesome"},"fields":{"slug":"/blog/blender_2_8/"}}},{"node":{"html":"<p>For my computational geometry course, I and a small team of my peers wrote a\nvisualization comparing the naive and the Melkman convex hull\nfinding algorithms, with some pedagogical narration. It\nwas a fun opportunity to really learn Elm for HTML5 content authoring, and SVG rendering.\n<a href=\"https://mikemikeb.com/convex-hull-visualization/\">See it here</a>.</p>\n<p>The narration needs better interactivity, the style is pretty poor and there's no mobile support,\nso I need to come back and polish it some night. It was made in <a href=\"https://elm-lang.org/\">elm</a>.</p>","frontmatter":{"date":"May 04, 2019","path":"/blog/convex-hull-visualization","title":"Melkman Algorithm Visualization"},"fields":{"slug":"/blog/convex_hull/"}}},{"node":{"html":"<p>The one nagging gap in my homework development stack early on\nwas an itch for\nprogrammability, that trait which Excel is alleged to have.\nBut I have a gripe with Excel. It's like Scratch for adults,\nA psuedoscripting language for the uninitiated and unlearned.\nPersonally, I've always kicked up a Python interpreter any\ntime I needed a calculation, and I quickly began depending on\nPython+scipy for more intense derivations and data routines. I scratched\nup a utility module for producing LaT<sub>E</sub>X tables and pgfplots graphics\nfrom various data formats, and used it frequently with minimal\ncopy and paste glue (thank you Cygwin's\n<code class=\"language-latex\">/dev/clipboard</code>).</p>\n<p>But larger projects begged for more complete tools; like that assignment\ninvolving the visualization\nof 26 different samples from a dataset, as well as calculating some\nstatistical metrics about each sample.\nA sane person would have used the charting features\nin the Excel spreadsheet it was provided in, but that's outside the scope\nof this post.\nI exported to csv immediately and made an incredibly primitive\ntoolkit for embedding Python logic in LaT<sub>E</sub>X. Revisiting it a\ncouple of months later, I refined my toolkit massively and today I\nwould consider the design complete, but alternative implementation\napproaches merit some exploration.</p>\n<p>The first time I attemped glueing my Pythonisms into LaT<sub>E</sub>X,\nmy design was a tiny mapping from a LaT<sub>E</sub>X grammar extension\nto Python formatting key syntax.\nIf I were to write my LaT<sub>E</sub>X code directly in a Python string,\nand attempt to use formatting keys,\nI would probably spontaneously combust. It looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"latex\"><pre class=\"language-latex\"><code class=\"language-latex\">r\"\"\"<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">{document</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\frac</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span>kill<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span>me<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">{document</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\"\"\".format(kill=5, me=10)</code></pre></div>\n<p>That's almost as crufty as chained ternary expressions in JSX.\nBackslash doubling I can avoid by making it a raw string, but that\nisn't an option in all use cases.\nRegardless, I hid this formatting ugliness behind a script, which\nescaped braces for me, and interpretted the characters '&#x3C;&#x3C;' as '{', and\n'>>' as '}'. So now I didn't have to brace every 5 characters, and the\nkeys looked distinct from the LaT<sub>E</sub>X syntax.\nMy dumb and ugly LaT<sub>E</sub>X superset templater took about 5 lines of\nPython code to process, and the source looked like:</p>\n<div class=\"gatsby-highlight\" data-language=\"latex\"><pre class=\"language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\frac</span><span class=\"token punctuation\">{</span>&lt;&lt;numerator>><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>&lt;&lt;denominator>><span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">document</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quite literally, all my template processor had to do was replace all braces with\nescaped double braces, and then replace all\ndouble angle brackets with a single formatting brace, thus yielding\nthe valid Python formatting keys, while allowing raw LaT<sub>E</sub>X to look\nat least familiar.\nThen you just produce your values and/or data in your Python script,\nread this template from some file,\nand submit it to Python's formatting functinos with the expected keyword\narguments that you used in the document source\n(e.g. &#x3C;<numerator>>).\nHere's the naive templating implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">load_pytex</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  txt <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  txt <span class=\"token operator\">=</span> txt<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'{'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'{{'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'}'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'}}'</span><span class=\"token punctuation\">)</span>    \n  txt <span class=\"token operator\">=</span> txt<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;&lt;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'{'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'>>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'}'</span><span class=\"token punctuation\">)</span>\n  txt<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> txt  <span class=\"token comment\"># or subproc.check_output(['pdflatex' ...])</span></code></pre></div>\n<p>So this works, but it would be quite annoying to have a Python\ncontext so decoupled from the usage context. Calculating things\nwithout regard to the location in the document, and being\nunable to change the logic while editing the document without\nswitching files.\nCertainly I could do better? So I did something sinful.</p>\n<p>Fake macros in LaT<sub>E</sub>X will make this all look way more T<sub>E</sub>X-savvy.\nLet's add a <code class=\"language-latex\"><span class=\"token function selector\">\\pyeval</span></code> pseudo-command, and a\n<code class=\"language-text\">pyexec</code> pseudo-environment so that we can get something\nlike so:</p>\n<div class=\"gatsby-highlight\" data-language=\"latex\"><pre class=\"language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">pyexec</span><span class=\"token punctuation\">}</span>\nname = 'John'\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">pyexec</span><span class=\"token punctuation\">}</span>\n\nHello I am <span class=\"token function selector\">\\pyeval</span><span class=\"token punctuation\">{</span>' '.join(<span class=\"token punctuation\">[</span>name,'Smith'<span class=\"token punctuation\">]</span>)<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Originally I implemented (knowing my transgressions) a naive\nregular expression based implementation, but this has many problems</p>\n<ul>\n<li>I want to ignore false ends in quotes and comments</li>\n<li>I want to allow counting of nested braces in pyeval</li>\n</ul>\n<p>expressions so that you don't need to escape all right\nbraces. (Regular expressions can't find the valid ending\nbrace of a nested expression)\nCheckout the following counter_examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"latex\"><pre class=\"language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">pyexec</span><span class=\"token punctuation\">}</span>\nhate_you = r'<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">pyexec</span><span class=\"token punctuation\">}</span>'  # we need to avoid ending if its in a literal\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">pyexec</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\pyeval</span><span class=\"token punctuation\">{</span>h = <span class=\"token punctuation\">{</span>'hello': 'world', 'x': <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>  # which brace do we end on?</code></pre></div>\n<p>So I couldn't use regular expressions for this, but I still wanted it.\nBecause my LaT<sub>E</sub>X document source would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"latex\"><pre class=\"language-latex\"><code class=\"language-latex\"><span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">pyexec</span><span class=\"token punctuation\">}</span>\nfrom scipy.optimize import curve_fit\nfrom random import random as rand\nfrom itertools import count, product as crossproduct\nbin = crossproduct((0,1),repeat=5)\ndata = list(zip(count(), bin))\n# add a count of set bits as a column\nfor row in data:\nd, b = row\nrow.append(b.count(1))\nrandpts = <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>rand(),rand()<span class=\"token punctuation\">]</span> for _ in range(100)<span class=\"token punctuation\">]</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">pyexec</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\section*</span><span class=\"token punctuation\">{</span><span class=\"token headline class-name\">Data Stuff</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function selector\">\\begin</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>|c|c|<span class=\"token punctuation\">}</span>\n<span class=\"token function selector\">\\hline</span>\nDecimal <span class=\"token punctuation\">&amp;</span> Binary <span class=\"token punctuation\">&amp;</span> 1-Bits <span class=\"token function selector\">\\\\</span>\n<span class=\"token function selector\">\\hline</span>\n<span class=\"token function selector\">\\pyeval</span><span class=\"token punctuation\">{</span>'<span class=\"token function selector\">\\n</span>'.join(('<span class=\"token punctuation\">&amp;</span>'.join(map(str,d)) for d in data))<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">% we can extract the above one-liner for reuse in tabular </span>\n<span class=\"token comment\">% construction and any horizontally partitioned context</span>\n<span class=\"token function selector\">\\hline</span>\n<span class=\"token function selector\">\\end</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">tabular</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">% use unpack+zip hack to get separate lists of x then y coords</span>\nBest Fit: <span class=\"token function selector\">\\pyeval</span><span class=\"token punctuation\">{</span>curve_fit(lambda x,m,b: m*x+b, zip(*randpts))<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>Mmmmm... delicious. It looks so much like Python yet so much like LaT<sub>E</sub>X.\nIt's both at once, without crippling either one! It's logic embedded in the document\nmarkup cleanly. So I did go and implement it. Originally I tried using a more\ncomplicated parsing approach, PyParsing, but it turned out to be far too complicated\nfor what was essentially templating. I ended up settling on parsing by character, due\nto the simplicity of the extension. There are a few performance enhancements I could\nmake but I'm not in the need of them right now, and I've noted them for posterity in\nmy README. This is PyLaT<sub>E</sub>X, and I put it on my\n<a href=\"https://github.com/MichaelBelousov/pylatexc\">GitHub</a></p>\n<p>At last, I would argue, that we have a tool more extensible than Excel,\nit's got all of PyPI behind it, with numpy, scipy, and all the packages\nyou could want— embedded in your document.\nIf you like this approach, maybe you can be just as sinful and throw it into\nMarkdown, or change up the scripting language to your preference. So long as you\ndon't use php. Even if it's already a templating language.</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\">My Document\n<span class=\"token punctuation\">===========</span></span>\n\n<span class=\"token code\"><span class=\"token punctuation\">```</span><span class=\"token code-language\">pyexec</span>\n<span class=\"token code-block language-pyexec\">import csv\ndata = list(csv.reader('mycsv.csv'))</span>\n<span class=\"token punctuation\">```</span></span>\n<span class=\"token code-snippet code keyword\">`>>> '\\n'.join(data)`</span></code></pre></div>\n<p>And as a final note, check out <a href=\"https://typora.io/\">Typora</a>\nother cool ways to not use Office products. I don't actually use it, but the LaT<sub>E</sub>X\nin Markdown makes me want to. Even if I'm not in school any more.</p>\n<style>\nspan.vim {\n    font-size: 3pt;\n}\n</style>","frontmatter":{"date":"May 04, 2019","path":"/blog/empowering-LaTeX","title":"Empowering LaTeX (PyLaTeXc)"},"fields":{"slug":"/blog/latex_and_python/"}}},{"node":{"html":"<p>Shout-out to Bill Wurtz.</p>\n<p>His website is a real treat, it harkens back to the early web styles (or lack thereof). It reminds me of a simpler time when websites were awesome.</p>\n<p>Check it out: <a href=\"https://billwurtz.com\">billwurtz.com</a></p>","frontmatter":{"date":"August 28, 2018","path":"/blog/billwurtz","title":"Bill Wurtz"},"fields":{"slug":"/blog/billwurtz/"}}},{"node":{"html":"<h4><em>Editor's Note:</em></h4>\n<p>This article abuses some C++/C interop concepts.\nIn reality, you should use the original C API in any C++ project\nusing a C dependency without official, well-supported, sane, C++ bindings,\nsince that will prevent cluttering the conceptual context of the API.\nRegardless, we can still learn a lot for our own C++ and occasionally\nC by looking at this relationship. I definitely went crazy here, but\nit's all in good fun.</p>\n<hr>\n<p>Let's partake in some template indulgence\n. Suppose we have some C files\nthat we're linking to our amazing C++ project, but it leaves us with\na few sad C \"constructors\" and \"destructors\" surrounding a struct, as a\nlanguage without implicit object construction. Suppose we have a struct: <code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyCType</span></code>,<br>\na \"constructor\" for it: <code class=\"language-cpp\">MyCtype<span class=\"token operator\">*</span> <span class=\"token function\">Create_MyCType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code> and a \"destructor\"\nfor it too: <code class=\"language-cpp\"><span class=\"token function\">Free_MyCType</span><span class=\"token punctuation\">(</span>MyCType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span></code>.</p>\n<p>If you don't know what\n<a href=\"https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization\">Resource Acquisition is Initialization</a>\nis, you should check it out, it's a useful programming idiom, often associated with C++ (and Rust),\nthat you probably already use somewhere.\nSo the question is, how can we get ourselves some nice RAII, scope-based destruction\nfor this type with minimal boiler plate?</p>\n<p>Our goal is that we can transform this code:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  CType<span class=\"token operator\">*</span> ctype <span class=\"token operator\">=</span> <span class=\"token function\">initialize_CType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//do something with c type</span>\n  <span class=\"token function\">destroy_CType</span><span class=\"token punctuation\">(</span>ctype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Into this code:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    WrappedCType type<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//do something with it</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Isn't that much cleaner?\nI'll look into using the STL for a great, simple solution, and then a custom\nwrapper emphasizing performance.</p>\n<p>Indeed, it turns out we can actually do what we want there\n<em>very</em> easily, having decent knowledge of the STL, the natural solution to the\nproblems that most over-zealous c++ programmers have.\nLet's give this an STL solution before we look into a custom one and later we'll\nsee what kind of performance gains we can find and if it's worth it.\nBut first, let's define some contrived \"C code\", structs and functions that we\nwill attempt to wrap. We'll assume it's partitioned into headers and implementation\nsource as the files in our working directory of \"ctype.h\" and \"ctype.c\".</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// === ctype.h =============</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> ExampleSubType<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> b<span class=\"token punctuation\">;</span>\n  ExampleSubType<span class=\"token operator\">*</span> sub<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> ExampleCType<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// === ctype.c ============</span>\n\nExampleCType<span class=\"token operator\">*</span> <span class=\"token function\">Create_ExampleCType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//pardon any mistakes, in my tests I used C++ allocation</span>\n  <span class=\"token comment\">//i.e. new ExampleCType{i,f, new ExampleSubType{5, ...}};</span>\n  ExampleCType<span class=\"token operator\">*</span> result <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ExampleCType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token operator\">-></span>a <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n  result<span class=\"token operator\">-></span>b <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n  result<span class=\"token operator\">-></span>sub <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ExampleSubType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token operator\">-></span>sub<span class=\"token operator\">-></span>s <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token operator\">-></span>sub<span class=\"token operator\">-></span>t <span class=\"token operator\">=</span> <span class=\"token number\">334323464592ULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Free_ExampleCType</span><span class=\"token punctuation\">(</span>ExampleCType<span class=\"token operator\">*</span> in<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>in<span class=\"token operator\">-></span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, how can we elegantly use the STL To initialize with our Create function,\nand destroy with our Delete function? The real hint should be our intended scope\nbased destruction. We can provide a smart pointer with a custom deleter, which\nhappens to match our intended signature. If it didn't, we could still probably use\na fitting lambda expression to map it to the required deleter signature. Let's do it\nas follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctype.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;type_traits></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;memory></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//for brevity and tersity</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">auto</span> Create<span class=\"token punctuation\">,</span> <span class=\"token keyword\">auto</span> Delete<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> CreateArgTypes<span class=\"token operator\">></span>\nshared_ptr<span class=\"token operator\">&lt;</span>\n<span class=\"token keyword\">typename</span> <span class=\"token class-name\">remove_pointer</span><span class=\"token operator\">&lt;</span>\n<span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">declval</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CreateArgTypes<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>type<span class=\"token operator\">></span>\n<span class=\"token function\">makeCTypeWrapper</span><span class=\"token punctuation\">(</span>CreateArgTypes<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">using</span> CTypePtr <span class=\"token operator\">=</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">declval</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CreateArgTypes<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">using</span> CType <span class=\"token operator\">=</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">remove_pointer</span><span class=\"token operator\">&lt;</span>CTypePtr<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>type<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">shared_ptr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CType<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Delete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Example example_inst{1, 0.5f};</span>\n  <span class=\"token keyword\">auto</span> example_inst <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">makeCTypeWrapper</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>\n  Create_ExampleCType<span class=\"token punctuation\">,</span>\n    Free_ExampleCType<span class=\"token operator\">></span></span></span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"peek at the instance's 'a' member\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> example_inst<span class=\"token operator\">-></span>a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"peek at the instance's 'sub' member's 't' member\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> example_inst<span class=\"token operator\">-></span>sub<span class=\"token operator\">-></span>t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This has some awesome advantages. Copy prevention (if you use unique_ptr),\nreference counting, all the things that come with smart pointers. The one\nissue is, what if the library you're using already does reference counting?\nWhat if this is just too much overhead for what you're doing? Exploring a\nmore raw wrapper is the next step, but before that, I'll first show what would\nmake a lovely addition to the above code... if C++ allowed deduced arguments for\ntemplated aliases. Using a function pointer variable type alias, we can craft\na single, make_Example() function with no template parameters. Unfortunately, without\ndeduction, you would have to explicitly list the argument types which is ugly\nand worst of all redundant. Either way, it might look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> ArgTypes<span class=\"token operator\">></span>\n<span class=\"token generic-function\"><span class=\"token function\">shared_ptr</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ExampleCType<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token function\">make_Example</span><span class=\"token punctuation\">(</span>ArgTypes<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> \n    <span class=\"token operator\">&amp;</span>makeCTypeWrapper<span class=\"token operator\">&lt;</span>Create_ExampleCtype<span class=\"token punctuation\">,</span> Free_ExmapleCType<span class=\"token punctuation\">,</span> ArgTypes<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So then, we're on to a raw wrapper. How thin can we make it?\nCan we make the wrapping inlined by the compiler entirely? I will explore the latter\nquestion and discuss it in another article. For now we'll just bring the wrapper into\nexistence. That question is what I'd like to use to determine if the\nsmart_pointer solution is worth it in performance-critical contexts.</p>\n<p>We'll start with the idea for our template that hopefully will inevitably do everything\nwe want.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">CType</span><span class=\"token punctuation\">,</span> CType<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>Create<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>Free<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CType<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">CTypeWrapper</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We've got function pointer type value arguments to our template already, and later\nwe'll add variadic arguments to match any signature for the Create function. This\ncould be used to match different overloads but unfortunately it seems difficult to\ninfer the overload so we can't do much without boilerplate as far as my\nintelligence falls.\nWe can at least infer the wrapped type itself from the function pointer arguments.\nFor now let's put in a simple implementation and see how it compiles.</p>\n<p>I ended up adding some additional templated aliases for the function pointer\ntypes, which makes it much more comprehensible, but these will disappear in the\nC++17 version.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span>\n<span class=\"token keyword\">using</span> CreateFunc <span class=\"token operator\">=</span> T<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span>\n<span class=\"token keyword\">using</span> FreeFunc <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">CType</span><span class=\"token punctuation\">,</span> \n  CreateFunc<span class=\"token operator\">&lt;</span>CType<span class=\"token operator\">&lt;</span> Create<span class=\"token punctuation\">,</span> \n  FreeFunc<span class=\"token operator\">&lt;</span>CType<span class=\"token operator\">&lt;</span> Free<span class=\"token operator\">&lt;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">CTypeWrapper</span>\n<span class=\"token punctuation\">{</span>\n  CType<span class=\"token operator\">*</span> wrapped<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">CTypeWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token function\">wrapped</span><span class=\"token punctuation\">(</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">~</span><span class=\"token function\">CTypeWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Free</span><span class=\"token punctuation\">(</span>wrapped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//implicit conversion to wrapped type</span>\n  <span class=\"token keyword\">operator</span> CType<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> wrapped<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  CType<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> wrapped<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<!--\n\nI should probably say by now that there will be some elements of danger\nto stuff I am discussing, but one of the cool things (I think) you can do\nwith this type is safely cast a reference of it to the underlying pointer.\n\n-->\n<p>Now let's use our contrived C example and see what happens</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"ctype.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"CTypeWrapper.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//for brevity and tersity</span>\n<span class=\"token comment\">//our shiny type wrapper</span>\n<span class=\"token keyword\">using</span> Example <span class=\"token operator\">=</span> CTypeWrapper<span class=\"token operator\">&lt;</span>ExampleCType<span class=\"token punctuation\">,</span> \n      Create_ExampleCType<span class=\"token punctuation\">,</span> \n      Free_ExampleCType<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  Example example_inst<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"peek at the instance's 'a' member\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> example_inst<span class=\"token operator\">-></span>a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"peek at the instance's 'sub' member's 't' member\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> example_inst<span class=\"token operator\">-></span>sub<span class=\"token operator\">-></span>t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Assuming \"CTypeWrapper.h\" contains our templates we've made, we should be good\nto go. Our output is:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">peek at the instance's 'a' member\n100\npeek at the instance's 'sub' member's 't' member\n334323464592</code></pre></div>\n<p>So we've got implicit conversion to the underlying type, and an overrided\n<code class=\"language-text\">operator-> </code>to\nprovide access to the underlying type. This should feel a bit worrisome actually,\nbecause our type <em>should</em> feel like a value, not a pointer, but overriding the\n<code class=\"language-text\">.</code>  operator is out of the question for good reason and the\n<code class=\"language-text\">-></code> syntax reminds us that our type really just contains an underlying\npointer so in my opinion it's, <em>ok</em>, not great. Definitely sinful.</p>\n<p>I tried with some difficulty to find out how one can template alias the type\nto provide a variadic constructor, but unfortunately I don't believe it's possible\nsince the first two types cannot be deduced in a class construction context\nand template aliases can't either (as far as I know up to c++17). The function\ndeduction context appears to correctly deduce the types even with only the partial\nexplicit template parameters, but the class doesn't seem to be able to. I couldn't\nfigure out a deduction guideline for it either, but I will\nlook into the difference in deduction rules for classes and functions, and confirm\nor fix my loss here.\nThis minimal and I think \"acceptable\" boilerplate is the\nfarthest I got for generic RAII wrappers of C-style types. If you're looking to C++-ify\nyour C-using code, try something like this, but clearly a heavy duty careful wrapper is\nthe real solution to any sufficient project. There are a few more hacks for quick wrapping\nof C types that I explored and may revisit later, but for now I'll leave the code where\nI left off, with a tidy wrapper which unfortunately has some definition boilterplate.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ctype.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;type_traits></span></span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span>\n<span class=\"token keyword\">auto</span> Create<span class=\"token punctuation\">,</span> \n     <span class=\"token keyword\">auto</span> Free<span class=\"token punctuation\">,</span>\n     <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> CreateArgTypes<span class=\"token operator\">></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">CTypeWrapper</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">using</span> CTypePtr <span class=\"token operator\">=</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">declval</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>CreateArgTypes<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    CTypePtr wrapped<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CTypeWrapper</span><span class=\"token punctuation\">(</span>CreateArgTypes<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> wrapped<span class=\"token punctuation\">{</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">CTypeWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">Free</span><span class=\"token punctuation\">(</span>wrapped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">operator</span> <span class=\"token function\">CTypePtr</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> wrapped<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    CTypePtr <span class=\"token keyword\">operator</span><span class=\"token operator\">-></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> wrapped<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> Example <span class=\"token operator\">=</span> CTypeWrapper<span class=\"token operator\">&lt;</span>\nCreate_ExampleCType<span class=\"token punctuation\">,</span> \n  Free_ExampleCType<span class=\"token punctuation\">,</span> \n  <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//for brevity and tersity</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//Example example_inst{1, 0.5f};</span>\n  Example example_inst<span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"peek at the instance's 'a' member\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> example_inst<span class=\"token operator\">-></span>a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"peek at the instance's 'sub' member's 't' member\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> example_inst<span class=\"token operator\">-></span>sub<span class=\"token operator\">-></span>t <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I'll add a follow up article some day for analyzing some of the\nllvm-ir assembly instructions that the clang compiler can emit to get a good idea\nat the overhead the wrapper incurs and how to minimize it or potentially eradicate\nit with optimization and inlining. If you find better ways, as I'm sure you will,\nplease send me an email.</p>","frontmatter":{"date":"June 17, 2018","path":"/blog/super-thin-raii-wrappers-for-c-types","title":"test"},"fields":{"slug":"/blog/Super_Thin_RAII_Wrappers_for_C_Types/"}}}]}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"],"slicesMap":{}}
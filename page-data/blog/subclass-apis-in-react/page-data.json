{"componentChunkName":"component---src-components-blog-page-tsx","path":"/blog/subclass-apis-in-react/","result":{"data":{"markdownRemark":{"html":"<p>Modern React has a problem, that functional components unfortunately, make it all too easy to rely on state\nthat gets thrown out the window between renders. That's why <code class=\"language-js\">useCallback</code> and <code class=\"language-js\">useEffect</code>, which take closures\nthat may accidentally reference old state in their bodies, can have weird bugs when dependencies aren't used correctly.</p>\n<p>Take for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state1<span class=\"token punctuation\">,</span> setState2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state2<span class=\"token punctuation\">,</span> setState2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state1 <span class=\"token operator\">+</span> state2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>state1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// oops state2 is also a dependency</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setState1</span><span class=\"token punctuation\">(</span>state1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">press me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Because no dependencies have been listed for React to check between renders, it will see that the effect does not need\nto be updated, even though the value of <code class=\"language-js\">state</code> would have changed between renders when the button is clicked.\nWhen altering existing code especially, you may accidentally add a new dependency without realizing and not add it to the list,\nand thus, a bug is born.</p>\n<p>This is really just a shortcoming of something that should be a language-level feature so that we wouldn't have to extract\nsuch redundant data ourselves, but to continue using vanilla JavaScript safely, we lucikly have\n<a href=\"https://reactjs.org/docs/hooks-rules.html\">the rules of hooks and some eslint plugins</a>, which, when integrated properly\nwith your editor and CI/CD, provide near perfect support for inferred dependencies.</p>\n<p>These dependencies are checked by React using <em>strict equality</em>, which in JavaScript pretty much means object identity.\nTo determine\nwhether your <code class=\"language-js\">useEffect</code>, <code class=\"language-js\">useMemo</code>, or <code class=\"language-js\">useCallback</code> should be thrown out and replaced with the new\nclosure, referencing up-to-date state, all objects in the dependency list are checked if they still <code class=\"language-text\">===</code> each other.\nThis works fine, petty performance concerns aside, until you want React to not throw away the old function, but instead keep\nit <em>stable</em>.</p>\n<p>Let's try the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isHovered<span class=\"token punctuation\">,</span> setIsHovered<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n        <span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> isHovered<span class=\"token operator\">?</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>myInst<span class=\"token punctuation\">,</span> setMyInst<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onMouseEnter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsHovered</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">onMouseLeave</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsHovered</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>height<span class=\"token operator\">:</span> <span class=\"token string\">\"50px\"</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token string\">\"50px\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What's wrong here? Suppose we are using a dependency, <code class=\"language-js\"><span class=\"token string\">\"some-api\"</span></code>, that manipulates subclasses from its own classes,\nand we have to register them to use them (ignore whether that's a well-designed JavaScript library or not for now, these\nkinds of packages do exist). Let's add an effect to register our class on component mount, and unregister it after:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApiClass<span class=\"token punctuation\">,</span> register<span class=\"token punctuation\">,</span> unregister <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"some-api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApiClass</span> <span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n        <span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> isHovered <span class=\"token operator\">?</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">register</span><span class=\"token punctuation\">(</span>MyClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span>MyClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>MyClass<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, a <em>new</em> <code class=\"language-js\">MyClass</code> is created every render\nbecause the class declaration is inside a function body, which means <code class=\"language-js\">MyClass</code> is always new so the effect is always\nreran, not just on mount, and we call <code class=\"language-js\">register</code> and <code class=\"language-js\">unregister</code>\npractically every render. Moreso, <code class=\"language-js\">myInst</code> is no longer of the same class after the first render,\nso <code class=\"language-js\">myInst <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MyClass</span></code> will be false, and that might mess with <code class=\"language-js\"><span class=\"token string\">\"some-api\"</span></code>'s assumptions.</p>\n<p>Worse still, the <code class=\"language-js\">MyClass<span class=\"token punctuation\">.</span>color</code> method has an out-of-date copy of <code class=\"language-js\">isHovered</code>. <code class=\"language-js\">myInst</code> uses the\ndefinition as it saw it during the first render when it was constructed, and <code class=\"language-js\">isHovered</code> was immutably\nset as <code class=\"language-js\"><span class=\"token boolean\">false</span></code>. To fix this in JavaScript, we need a stable, mutable object indirectly referencing <code class=\"language-js\">isHovered</code>.\nIn React we can get that using a <code class=\"language-js\">ref</code> like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApiClass<span class=\"token punctuation\">,</span> register<span class=\"token punctuation\">,</span> unregister <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"some-api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">const</span> componentState <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    componentState<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>isHovered <span class=\"token operator\">=</span> isHovered<span class=\"token punctuation\">;</span> <span class=\"token comment\">// update the state to whatever the lastest is from React</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApiClass</span> <span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n        <span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> componentState<span class=\"token punctuation\">.</span>isHovered <span class=\"token operator\">?</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now our class will always reference the up-to-date state through an indirect reference that is always up to date.\nThe final step is to make sure we have a stable reference to the class itself, which is done the same way we get\na stable state object for indirect access of the component state.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApiClass<span class=\"token punctuation\">,</span> register<span class=\"token punctuation\">,</span> unregister <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"some-api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">const</span> MyClass <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApiClass</span> <span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n        <span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> componentState<span class=\"token punctuation\">.</span>isHovered <span class=\"token operator\">?</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-js\">useRef</code>, will be a stable reference to its argument, and can only be mutated by setting its\n<code class=\"language-js\">current</code> property, but we've made that impossible by keeping no reference to the ref object itself.\nNow that we have it, we can generalize to create a <code class=\"language-js\">useClass</code> hook that does the work for us.</p>\n<div id=\"the-useclass-hook\"></div>\n<h2><a href=\"#the-useclass-hook\">The <code class=\"language-text\">useClass</code> Hook</a></h2>\n<p>Smaller than I thought it would be, really.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">useClass</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">makeClass</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token operator\">:</span> <span class=\"token constant\">S</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> stateRef <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>stateRef<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token function\">makeClass</span><span class=\"token punctuation\">(</span>stateRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's use it:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isHovered<span class=\"token punctuation\">,</span> setIsHovered<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> Derived <span class=\"token operator\">=</span> <span class=\"token function\">useClass</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Derived</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n                 <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>isHovered <span class=\"token operator\">?</span> <span class=\"token string\">\"y\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"n\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n               <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> isHovered <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>myInst<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Derived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">onMouseEnter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsHovered</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n         <span class=\"token attr-name\">onMouseLeave</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsHovered</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>myInst<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And there we have classes as usable as possible directly in our functional components.\nProbably not as performant as a module-scope class declaration unless our runtime is extremely clever,\nbut that's just the world we're living in. If you're heavily using an inheritance based library in your work,\nmaybe you'll enjoy this as much as I do.</p>","frontmatter":{"title":"The useClass hook and using class-based APIs in modern React","path":null,"date":"October 10, 2021"}}},"pageContext":{"slug":"/blog/subclass-apis-in-react/"}},"staticQueryHashes":["3649515864","63159454"]}
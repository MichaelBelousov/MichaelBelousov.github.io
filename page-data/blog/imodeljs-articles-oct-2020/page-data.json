{"componentChunkName":"component---src-components-blog-page-tsx","path":"/blog/imodeljs-articles-oct-2020/","result":{"data":{"markdownRemark":{"html":"<p>I wrote a couple of articles for\n<a href=\"https://medium.com/imodeljs/community/home\">Bentley's iModel.js community blog</a>.\nA disclaimer, I work for Bentley, but I found a very convenient\nJavaScript pattern while using our vanilla Javascript APIs in React;\nit inspired me to write about it for internal and external usage, and\nthat turned into two articles.</p>\n<p>The pattern is called the <code class=\"language-text\">Provider-Local Class</code> pattern, I named it\nmyself but hopefully the idea is clear. It seriously helped\nme simplify a lot of my code so go check it out for some\nadvanced React discussion, and maybe it'll improve your integration\nof APIs in your React application somewhere.</p>\n<p>The first article, <a href=\"https://medium.com/imodeljs/writing-a-primitivetool-a044647f7f66\">Writing a Primitive Tool</a>,\nserves as an application context for using the pattern, I've\nincluded a gif of the final application just to pique the interest.</p>\n<p><img src=\"https://miro.medium.com/max/700/1*fYaZC7eQrVdlFrQ-DMbhsA.gif\" alt=\"gif of the app made in the article\"></p>\n<p>Article two, <a href=\"https://medium.com/imodeljs/provider-local-class-pattern-dc44bab33144\">The Provider-Local Class Pattern</a>, takes the example application\nthat was built, and simplifies usage of API subclasses with the pattern.\nIt also discusses the code-scalability that the pattern provides and\ncompares that with trying to do the same thing via <a href=\"https://redux.js.org/\">Redux</a>.</p>\n<p>If you think there are better alternatives (I think this is the most\nidiomatic way to do it in React), please feel free to write a blog post\non why and send me a link.</p>","frontmatter":{"title":"iModel.js Articles","path":null,"date":"October 4, 2020"}}},"pageContext":{"slug":"/blog/imodeljs-articles-oct-2020/"}}}
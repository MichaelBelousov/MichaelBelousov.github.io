{"componentChunkName":"component---src-components-blog-page-tsx","path":"/blog/always-user-getters/","result":{"data":{"markdownRemark":{"html":"<p>I just started (finally) getting into <a href=\"https://www.rust-lang.org\">Rust</a> recently,\nand I miss properties. They're included in C#, Python, and JavaScript, but Rust doesn't\nhave them. </p>\n<p>The gripe most developers have with properties is they are often used in two malevolent ways:</p>\n<ul>\n<li>boilerplate for accessing a regular public field</li>\n<li>side-effects on field access</li>\n</ul>\n<p>Both are bad, but I don't think they should overshadow a need for properties. There\nare plenty of abused language features out there, that doesn't necessarily mean\nthey don't have a purpose, no matter what tools are out there.</p>\n<p>Properties offer a solution to interface designers for the problem of derived state.\nSuppose we're building a contrived geometry engine, and we need to store line. Here:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Line</span> <span class=\"token punctuation\">{</span>\n  slope<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f32</span>\n  y_intercept<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f32</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you remember a bit of middle school math, you'll know that there are a few ways to\nrepresent a line. For instance point-slope form, or point</p>","frontmatter":{"title":"Use Derived Getter Properties","path":"/blog/always-use-getters","date":"October 26, 2020"}}},"pageContext":{"slug":"/blog/always-user-getters/"}}}
{"componentChunkName":"component---src-components-blog-page-tsx","path":"/Super_Thin_RAII_Wrappers_for_C_Types/","result":{"data":{"markdownRemark":{"html":"<p>Let's partake in some template indulgence. Suppose we have some C files\nthat we're linking to our amazing C++ project, but it leaves us with\na few sad C \"constructors\" and \"destructors\" surrounding a struct, as a\nlanguage without implicit object constructionr. Suppose we have a struct: <code>struct MyCType</code>,<br>\na \"constructor\" for it: <code>MyCtype* Create_MyCType()</code> and a \"destructor\"\nfor it too: <code>Free_MyCType(MyCType*)</code>.</p>\n<p>If you don't know what\n<a href=\"https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization\">Resource Acquisition is Initialization</a>\nis, you should check it out, it's a useful programming idiom, often associated with C++ (and Rust),\nthat you probably already use somewhere.\nSo the question is, how can we get ourselves some nice RAII, scope-based destruction\nfor this type with minimal boiler plate? </p>\n<p>Our goal is that we can transform this code:</p>\n<pre><code class=\"language-cpp\">void myFunc()\n{\n  CType* ctype = initialize_CType();\n  //do something with c type\n  destroy_CType(ctype);\n}\n</code></pre>\n<p>Into this code:</p>\n<pre><code class=\"language-cpp\">void myFunc()\n{\n    WrappedCType type;\n    //do something with it\n}\n</code></pre>\n<p>Isn't that much cleaner?\nI'll look into using the STL for a great, simple solution, and then a custom\nwrapper emphasizing performance.</p>\n<p>Indeed, it turns out we can actually do what we want there\n<em>very</em> easily, having decent knowledge of the STL, the natural solution to the\nproblems that most over-zealous c++ programmers have.\nLet's give this an STL solution before we look into a custom one and later we'll\nsee what kind of performance gains we can find and if it's worth it.\nBut first, let's define some contrived \"C code\", structs and functions that we\nwill attempt to wrap. We'll assume it's partitioned into headers and implementation\nsource as the files in our working directory of \"ctype.h\" and \"ctype.c\".</p>\n<pre><code class=\"language-cpp\">// === ctype.h =============\n\ntypedef struct {\n  int s;\n  unsigned long long t;\n} ExampleSubType;\n\ntypedef struct {\n  int a;\n  float b;\n  ExampleSubType* sub;\n} ExampleCType;\n\n// === ctype.c ============\n\nExampleCType* Create_ExampleCType(int i, float f)\n{\n  //pardon any mistakes, in my tests I used C++ allocation\n  //i.e. new ExampleCType{i,f, new ExampleSubType{5, ...}};\n  ExampleCType* result = malloc(sizeof(ExampleCType));\n  result->a = i;\n  result->b = f;\n  result->sub = malloc(sizeof(ExampleSubType));\n  result->sub->s = 5;\n  result->sub->t = 334323464592ULL;\n  return result;\n}\n\nvoid Free_ExampleCType(ExampleCType* in)\n{\n  free(in->sub);\n  free(in);\n}\n</code></pre>\n<p>So, how can we elegantly use the STL To initialize with our Create function,\nand destroy with our Delete function? The real hint should be our intended scope\nbased destruction. We can provide a smart pointer with a custom deleter, which\nhappens to match our intended signature. If it didn't, we could still probably use\na fitting lambda expression to map it to the required deleter signature. Let's do it\nas follows:</p>\n<pre><code class=\"language-cpp\">#include &#x3C;ctype.h>\n#include &#x3C;type_traits>\n#include &#x3C;memory>\n#include &#x3C;iostream>\nusing namespace std;  //for brevity and tersity\n\ntemplate&#x3C;auto Create, auto Delete, typename... CreateArgTypes>\nshared_ptr&#x3C;\ntypename remove_pointer&#x3C;\ndecltype(Create(declval&#x3C;CreateArgTypes>()...))>::type>\nmakeCTypeWrapper(CreateArgTypes&#x26;&#x26;... args)\n{\n  using CTypePtr = decltype(Create(declval&#x3C;CreateArgTypes>()...));\n  using CType = typename remove_pointer&#x3C;CTypePtr>::type;\n  return shared_ptr&#x3C;CType>(Create(args...), Delete);\n}\n\nint main()\n{\n  //Example example_inst{1, 0.5f};\n  auto example_inst = makeCTypeWrapper&#x3C;\n  Create_ExampleCType,\n    Free_ExampleCType>\n  (-5, 0.5f);\n  cout &#x3C;&#x3C; \"peek at the instance's 'a' member\" &#x3C;&#x3C; endl;\n  cout &#x3C;&#x3C; example_inst->a &#x3C;&#x3C; endl;\n  cout &#x3C;&#x3C; \"peek at the instance's 'sub' member's 't' member\" &#x3C;&#x3C; endl;\n  cout &#x3C;&#x3C; example_inst->sub->t &#x3C;&#x3C; endl;\n}\n</code></pre>\n<p>This has some awesome advantages. Copy prevention (if you use unique<em>ptr),\nreference counting, all the things that come with smart pointers. The one\nissue is, what if the library you're using already does reference counting?\nWhat if this is just too much overhead for what you're doing? Exploring a\nmore raw wrapper is the next step, but before that, I'll first show what would\nmake a lovely addition to the above code... if C++ allowed deduced arguments for\ntemplated aliases. Using a function pointer variable type alias, we can craft\na single, make</em>Example() function with no template parameters. Unfortunately, without\ndeduction, you would have to explicitly list the argument types which is ugly\nand worst of all redundant. Either way, it might look something like this:</p>\n<pre><code class=\"language-cpp\">template&#x3C;typename... ArgTypes>\nshared_ptr&#x3C;ExampleCType>(*make_Example(ArgTypes...) = \n    &#x26;makeCTypeWrapper&#x3C;Create_ExampleCtype, Free_ExmapleCType, ArgTypes...>;\n</code></pre>\n<p>So then, we're on to a raw wrapper. How thin can we make it?\nCan we make the wrapping inlined by the compiler entirely? I will explore the latter\nquestion and discuss it in another article. For now we'll just bring the wrapper into\nexistence. That question is what I'd like to use to determine if the\nsmart_pointer solution is worth it in performance-critical contexts.</p>\n<p>We'll start with the idea for our template that hopefully will inevitably do everything\nwe want.</p>\n<pre><code class=\"language-cpp\">template&#x3C;typename CType, CType*(Create*)(), void(Free*)(CType*)>\nstruct CTypeWrapper;\n</code></pre>\n<p>We've got function pointer type value arguments to our template already, and later\nwe'll add variadic arguments to match any signature for the Create function. This\ncould be used to match different overloads but unfortunately it seems difficult to\ninfer the overload so we can't do much without boilerplate as far as my\nintelligence falls.\nWe can at least infer the wrapped type itself from the function pointer arguments.\nFor now let's put in a simple implementation and see how it compiles.</p>\n<p>I ended up adding some additional templated aliases for the function pointer\ntypes, which makes it much more comprehensible, but these will disappear in the\nC++17 version.</p>\n<pre><code class=\"language-cpp\">template&#x3C;T>\nusing CreateFunc = T*(*)();\n\ntemplate&#x3C;T>\nusing FreeFunc = void(*)(T*);\n\ntemplate&#x3C;typename CType, \n  CreateFunc&#x3C;CType&#x3C; Create, \n  FreeFunc&#x3C;CType&#x3C; Free&#x3C;\nstruct CTypeWrapper\n{\n  CType* wrapped;\n  CTypeWrapper()\n    : wrapped(Create())\n  {}\n  ~CTypeWrapper()\n  {\n    Free(wrapped);\n  }\n  //implicit conversion to wrapped type\n  operator CType* ()\n  {\n    return wrapped;\n  }\n  CType* operator->()\n  {\n    return wrapped;\n  }\n};\n</code></pre>\n<!--\n\nI should probably say by now that there will be some elements of danger\nto stuff I am discussing, but one of the cool things (I think) you can do\nwith this type is safely cast a reference of it to the underlying pointer.\n\n-->\n<p>Now let's use our contrived C example and see what happens</p>\n<pre><code class=\"language-cpp\">#include\"ctype.h\"\n#include\"CTypeWrapper.h\"\n#include &#x3C;iostream>\n\nusing namespace std;  //for brevity and tersity\n//our shiny type wrapper\nusing Example = CTypeWrapper&#x3C;ExampleCType, \n      Create_ExampleCType, \n      Free_ExampleCType>;\n\nint main()\n{\n  Example example_inst;\n  cout &#x3C;&#x3C; \"peek at the instance's 'a' member\" &#x3C;&#x3C; endl;\n  cout &#x3C;&#x3C; example_inst->a &#x3C;&#x3C; endl;\n  cout &#x3C;&#x3C; \"peek at the instance's 'sub' member's 't' member\" &#x3C;&#x3C; endl;\n  cout &#x3C;&#x3C; example_inst->sub->t &#x3C;&#x3C; endl;\n}\n</code></pre>\n<p>Assuming \"CTypeWrapper.h\" contains our templates we've made, we should be good\nto go. Our output is:</p>\n<pre><code>peek at the instance's 'a' member\n100\npeek at the instance's 'sub' member's 't' member\n334323464592\n</code></pre>\n<p>So we've got implicit conversion to the underlying type, and an overrided\n<code>operator-></code>to\nprovide access to the underlying type. This should feel a bit worrisome actually,\nbecause our type <em>should</em> feel like a value, not a pointer, but overriding the\n<code>.</code>  operator is out of the question for good reason and the\n<code>-></code> syntax reminds us that our type really just contains an underlying\npointer so in my opinion it's, <em>ok</em>, not great. Definitely sinful.</p>\n<p>I tried with some difficulty to find out how one can template alias the type\nto provide a variadic constructor, but unfortunately I don't believe it's possible\nsince the first two types cannot be deduced in a class construction context\nand template aliases can't either (as far as I know up to c++17). The function\ndeduction context appears to correctly deduce the types even with only the partial\nexplicit template parameters, but the class doesn't seem to be able to. I couldn't\nfigure out a deduction guideline for it either, but I will\nlook into the difference in deduction rules for classes and functions, and confirm\nor fix my loss here.\nThis minimal and I think \"acceptable\" boilerplate is the\nfarthest I got for generic RAII wrappers of C-style types. If you're looking to C++-ify\nyour C-using code, try something like this, but clearly a heavy duty careful wrapper is\nthe real solution to any sufficient project. There are a few more hacks for quick wrapping\nof C types that I explored and may revisit later, but for now I'll leave the code where\nI left off, with a tidy wrapper which unfortunately has some definition boilterplate.</p>\n<pre><code class=\"language-cpp\">#include \"ctype.h\"\n#include &#x3C;type_traits>\n\ntemplate&#x3C;\nauto Create, \n     auto Free,\n     typename... CreateArgTypes>\nstruct CTypeWrapper\n{\n  private:\n    using CTypePtr = decltype(Create(std::declval&#x3C;CreateArgTypes>()...));\n  public:\n    CTypePtr wrapped;\n    CTypeWrapper(CreateArgTypes&#x26;&#x26;... args)\n      : wrapped{Create(args...)}\n    {}\n    ~CTypeWrapper()\n    {\n      Free(wrapped);\n    }\n    operator CTypePtr ()\n    {\n      return wrapped;\n    }\n    CTypePtr operator->()\n    {\n      return wrapped;\n    }\n};\n\nusing Example = CTypeWrapper&#x3C;\nCreate_ExampleCType, \n  Free_ExampleCType, \n  int, double>;\n\n#include &#x3C;iostream>\nusing namespace std;  //for brevity and tersity\n\nint main()\n{\n  //Example example_inst{1, 0.5f};\n  Example example_inst{-5, 0.5f};\n  cout &#x3C;&#x3C; \"peek at the instance's 'a' member\" &#x3C;&#x3C; endl;\n  cout &#x3C;&#x3C; example_inst->a &#x3C;&#x3C; endl;\n  cout &#x3C;&#x3C; \"peek at the instance's 'sub' member's 't' member\" &#x3C;&#x3C; endl;\n  cout &#x3C;&#x3C; example_inst->sub->t &#x3C;&#x3C; endl;\n}\n</code></pre>\n<p>I'll add a follow up article some day for analyzing some of the\nllvm-ir assembly instructions that the clang compiler can emit to get a good idea\nat the overhead the wrapper incurs and how to minimize it or potentially eradicate\nit with optimization and inlining. If you find better ways, as I'm sure you will,\nplease send me an email.</p>","frontmatter":{"title":"Super Thin RAII Wrappers for C Types","path":"/blog/super-thin-raii-wrappers-for-c-types","date":"June 17, 2018"}}},"pageContext":{"slug":"/Super_Thin_RAII_Wrappers_for_C_Types/"}}}